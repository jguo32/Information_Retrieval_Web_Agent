#!/usr/local/bin/perl -w

#use strict;
use warnings;

############################################################
##  hw1b.prl
##
##  hw1b.prl < segment.data.train
## 
##  Suggestion: run in a wide window
############################################################


my @test_lines = ( );    # the current line that we are testing
my @real_lines = ( );    # the correct classification for the current line
my $numb_lines = 0;      # the number of lines in the block that we testing

my $correct   = 0;       # number of correct classifications
my $incorrect = 0;       # number of incorrect classifications
my @rule_correct = ();
my @rule_incorrect = ();

my $seg_class = "";
my $name = "";
my $email = "";
my $phone = "";
my $address = "";
my $C = "";
my $Cpp = "";
my $java = "";
my $degree = "";

my $new_file = 1;  # 1 for new file, 0 for not

my $doc_dir = './resume';

$doc_num = -1;
$qry_num = -1;

# @doc_vector
#
#   An array of hashes, each array index indicating a particular document's
#   weight "vector". 

my @doc_vector = ( );

# @qry_vector
#
#   An array of hashes, each array index indicating a particular query's
#   weight "vector".

my @qry_vector = ( );


# @titles_vector
#
# vector of the cacm journal titles. Indexed in order of apperance
# within the corpus.

my @titles_vector  = ( );

# @doc_simula
#
# array of arrays used for storing query to document or document to document
# similarity calculations (determined by cosine_similarity, etc. )

my @doc_simula = ( );

# @res_vector
#
# array of arrays used for storing the document numbers of the most relevant
# documents in a query to document or document to document calculation.

my @res_vector = ( );

my $qry_dir = './qry';

&main;

# while (($key, $val) = each %{ $qry_vector[0] }) {
# 	print $key, " ", $val, "\n";
#     }
# 

&full_similarity;

# for($i=0; $i<scalar @doc_simula; $i++){
# 	my $term = undef;
# 	foreach $term (@doc_simula[$i]){
# 		print $term, "\n";
# 	}
# }

# for($i=0; $i<$qry_num+1; $i++){
# 	print $i, "\n";
# 	push @res_vector, sort { -1 * ($doc_simula[$i][$a] <=> $doc_simula[$i][$b]); } 0 .. $doc_num;
# 	
# 	print $res_vector[$i][0], "\n";
# }

sub main {
	# &read_resumes($doc_dir, "doc");
	# &read_resumes($qry_dir, "qry");
	&evaluate("label_result_rbcv.pdf.txt", "qry/labeled_rbcv.pdf.txt");

}


sub read_resumes {
	my $dir = shift;
	my $type = shift;

	foreach my $fp (glob("$dir/*.pdf")){
		
		if($type eq "doc"){
			push @doc_vector, { }; # a new resume
			$doc_num +=1;
		}
		
		if($type eq "qry"){
			push @qry_vector, { }; # a new query resume
			$qry_num +=1;
		}
		
		printf "%s\n", $fp;

		# read the content in pdf files by converting them
		# to plain text first
		my $readfile = "./pdftotext ". $fp . " ". $fp . ".txt";
		system($readfile);

		$fp = $fp . ".txt";
		open my $fh, "<", $fp;

		my ($result_filename) = $fp =~  m/\/([\w|\.]+)$/i;
		$result_filename = "classify_result_" . $result_filename;
		open RESULT, '>>' . $result_filename or die "Could not open result file $fp";

		
		$new_file = 1;
		@real_lines  = ( );   #  these arrays may hold old data which will

		@test_lines  = ( );   # make sure that we clear memory here or else
		$numb_lines  = 0;     #  screw up calculations of their length

		my $line = undef;
		while ( <$fh> ) {
			$line = $_;	
			chomp $line;
			next if $line =~ /^$/; 
			&classify($type, $line);
		}
		close $fh;
		close RESULT;
	}
	return;
}

sub classify{
	my $type = shift;
	my $line = shift;
	my ($str) = ($line =~ /^\s*(\S.*)/);
	my $line_len = 0;

	if (defined $str && $str ne ''){
		$line_len = scalar(split /\s+/, $str);
	}
	
	my $det_seg = $line_len > 0 && $line_len < 5;
	
	if ($new_file == 1) {
		if((lc $line) !~ /curriculum vitae/ && (lc $line) !~ /resume/ && (lc $line) !~/[0-9]/){
			$new_file = 0;
			$seg_class = "contact";
			$name = $line;
			# print $name, "\n";
			return;
		}	
	} 
	
	elsif ($det_seg && ( (lc $line ) =~ /address/ || (lc $line ) =~ /personal/ || (lc $line ) =~ /contact/ ) ) {
		&init_vectors($type) if ($numb_lines && $seg_class !~/contact/);
		&process_segment if $numb_lines;
		
		$seg_class = "contact";
		print RESULT "## " . uc $seg_class, " ##   ", $line, "\n";
		@test_lines  = ( );   # make sure that we clear memory here or else
		$numb_lines  = 0;     #  screw up calculations of their length
	} 
	elsif ($det_seg && ( (lc $line ) =~ /education/ || (lc $line ) =~ /advis/ ) ) {
		&init_vectors($type) if ($numb_lines && $seg_class !~/contact/);
		&process_segment if $numb_lines ;
		
		$seg_class = "education";
		@test_lines  = ( );   # make sure that we clear memory here or else
		$numb_lines  = 0;     #  screw up calculations of their length
		print RESULT "## " . uc $seg_class, " ##   ", $line, "\n";

	} 
	elsif ($det_seg &&  ( (lc $line ) =~ /research/ || (lc $line ) =~ /field/ || (lc $line ) =~ /interest/)  ){
		&init_vectors($type) if  ($numb_lines && $seg_class !~/contact/);
		&process_segment if $numb_lines ;
		
		$seg_class = "research";
		@test_lines  = ( );   # make sure that we clear memory here or else
		$numb_lines  = 0;     #  screw up calculations of their length
		print RESULT "## " . uc $seg_class, " ##   ", $line, "\n";

	}
	elsif ($det_seg &&  ( (lc $line ) =~ /position/ || (lc $line ) =~ /employment/ || (lc $line ) =~ /profession/ ||(lc $line ) =~ /appointment/ ||(lc $line ) =~ /service/ ) ){
		&init_vectors($type) if  ($numb_lines && $seg_class !~/contact/);
		&process_segment if $numb_lines ;
		
		$seg_class = "employment";
		@test_lines  = ( );   # make sure that we clear memory here or else
		$numb_lines  = 0;     #  screw up calculations of their length
		print RESULT "## " . uc $seg_class, " ##   ", $line, "\n";
	}
	
	elsif ($det_seg &&  (lc $line ) =~ /teach/ ){
		&init_vectors($type) if  ($numb_lines && $seg_class !~/contact/);
		&process_segment if $numb_lines ;
		
		$seg_class = "teaching";
		@test_lines  = ( );   # make sure that we clear memory here or else
		$numb_lines  = 0;     #  screw up calculations of their length
		print RESULT "## " . uc $seg_class, " ##   ", $line, "\n";
	}
	
	elsif ($det_seg &&  ( (lc $line ) =~ /abstract/ ||  (lc $line ) =~ /presentation/ ||  (lc $line ) =~ /seminar/ ||  (lc $line ) =~ /publication/ ||  (lc $line ) =~ /journal/ ||  (lc $line ) =~ /conference/ ||  (lc $line ) =~ /book/ ||  (lc $line ) =~ /paper/ ||  (lc $line ) =~ /patent/ ||  (lc $line ) =~ /report/ ||  (lc $line ) =~ /grant/ ) ){
		&init_vectors($type) if  ($numb_lines && $seg_class !~/contact/);
		&process_segment if $numb_lines ;
		
		$seg_class = "publication";
		@test_lines  = ( );   # make sure that we clear memory here or else
		$numb_lines  = 0;     #  screw up calculations of their length
		print RESULT "## " . uc $seg_class, " ##   ", $line, "\n";
	}
	
	elsif ($det_seg &&  (lc $line ) =~ /student/ ){
		&init_vectors($type) if  ($numb_lines && $seg_class !~/contact/);
		&process_segment if $numb_lines ;
		
		$seg_class = "student";
		@test_lines  = ( );   # make sure that we clear memory here or else
		$numb_lines  = 0;     #  screw up calculations of their length
		print RESULT "## " . uc $seg_class, " ##   ", $line, "\n";
	}
	
	elsif ($det_seg &&  ( (lc $line ) =~ /award/ ||  (lc $line ) =~ /honor/  ) ){
		&init_vectors($type) if  ($numb_lines && $seg_class !~/contact/);
		&process_segment if $numb_lines ;
		
		$seg_class = "award";
		@test_lines  = ( );   # make sure that we clear memory here or else
		$numb_lines  = 0;     #  screw up calculations of their length
		print RESULT "## " . uc $seg_class, " ##   " . $line, "\n";
	}
	
	
	elsif ($det_seg &&  (lc $line ) =~ /skill/ ){
		&init_vectors($type) if  ($numb_lines && $seg_class !~/contact/);
		&process_segment if $numb_lines ;
		
		$seg_class = "skill";
		@test_lines  = ( );   # make sure that we clear memory here or else
		$numb_lines  = 0;     #  screw up calculations of their length
		print RESULT "## " . uc $seg_class, " ##   ", $line, "\n";
	}
	else {
		($test_lines[ $numb_lines ]) = $line;
		#($real_lines[ $numb_lines ]) = ($line =~ m/^([^\t]+)\t/  );
		$numb_lines += 1;
		print RESULT "## " . uc $seg_class, " ##   ", $line, "\n";
	}
	
	if ($numb_lines){
		&init_vectors($type) if  $seg_class !~/contact/;
		&process_segment;
	}	
}

sub evaluate {
	my $result_file = shift;
	my $label_file 	= shift;

	my $correct = 0;
	my $incorrect = 0;


	open(my $result_fh, "<", $result_file) or die "Cannot open $result_file";
	open(my $label_fh,	"<", $label_file) or die "Cannot open $label_file";

	my (@results) = <$result_fh>;
	my (@labels)   = <$label_fh>;

	while ( @results ) {
		my $result_line = shift @results;
		my $label_line	= shift @labels;

		# Get the label of the line;
		my ($result) = $result_line =~ /##\s*(\w+)\s*##/;
		my ($label)	 = $label_line	=~ /##\s*(\w+)\s*##/;

		print $result, "    ", $label_line, "\n";
		if ( $result eq $label) {
			$correct++;
		}
		else {
			$incorrect++;
		}
	}

	print "OVERALL CORRECT: ", $correct, " = ", $correct*100/($correct+$incorrect), "%  INCORRECT: ", $incorrect, " = ", $incorrect*100/($correct + $incorrect),"%.\n";



}


############################################################
## initialize @doc_vecters
############################################################

sub init_vectors {
	my $type=shift;
	
	for($cnt = 0; $cnt < scalar @test_lines ; $cnt++) {
		# parse out information you want
    	# print it in the tuple format to the CONTENT and LOG files, for example:
    	
    	my @words = (split /\s+/, $test_lines[$cnt]);
    	
    	for($i =0; $i<scalar @words; $i++){
    		if ($words[$i] =~ /[a-zA-Z]/){
    			$words[$i] =~ s/[[:punct:]]//g;   #remove punctuation
    			
    			if($type eq "doc"){
    				$doc_vector[$doc_num]{ $words[$i] } += 1;
    			}
    			if($type eq "qry"){
    				$qry_vector[$qry_num]{ $words[$i] } += 1;
    			}
    		}
    	}	
	}
    return;
}



########################################################
## COSINE_SIM_A
## 
## Computes the cosine similarity for two vectors
## represented as associate arrays.
########################################################

sub cosine_sim_a {

    my $vec1 = shift;
    my $vec2 = shift;

    my $num     = 0;
    my $sum_sq1 = 0;
    my $sum_sq2 = 0;

    my @val1 = values %{ $vec1 };
    my @val2 = values %{ $vec2 };

    # determine shortest length vector. This should speed 
    # things up if one vector is considerable longer than
    # the other (i.e. query vector to document vector).

    if ((scalar @val1) > (scalar @val2)) {
	my $tmp  = $vec1;
	   $vec1 = $vec2;
	   $vec2 = $tmp;
    }

    # calculate the cross product

    my $key = undef;
    my $val = undef;

    while (($key, $val) = each %{ $vec1 }) {
	$num += $val * ($$vec2{ $key } || 0);
    }

    # calculate the sum of squares

    my $term = undef;

    foreach $term (@val1) { $sum_sq1 += $term * $term; }
    foreach $term (@val2) { $sum_sq2 += $term * $term; }

    return ( $num / sqrt( $sum_sq1 * $sum_sq2 ));
}

sub full_similarity {
	
	for ($i =0; $i < scalar @qry_vector; $i++){
		my @temp = ();
		for ($j =0; $j < scalar @doc_vector; $j++){
			push @temp, &cosine_sim_a($qry_vector[$i], $doc_vector[$j]);
		}
		push @doc_simula, @temp;
	}

}



############################################################
## Process segments by applying specialized detectors/
## classifiers to the array of the text lines in the segment 
############################################################

sub process_segment {

	# We detect each type of text from the most frequently appeared to least appeared
	# E.g. "ADDRESS" only appears 58 times so we detect this type at the end
    if    ( $seg_class eq "contact" ) {
    	&extract_content_contact;
    }
    elsif	 ( $seg_class eq "education" ) {
		&extract_content_education;
	}
	elsif	 ( $seg_class eq "research" ) {
		&extract_content_research;
	}
	elsif	 ( $seg_class eq "skill" ) {
		&extract_content_skill;
	}

	else{
		
	}
}

# extract_content
#
#  this function should read through the context of all the text/html
#  documents retrieved by the web robot and extract three types of
#  contact information described in the assignment


sub extract_content_contact {
	
	
	for($cnt = 0; $cnt < scalar @test_lines ; $cnt++) {
		# parse out information you want
    	# print it in the tuple format to the CONTENT and LOG files, for example:
    	
    
    	while($test_lines[$cnt] =~ s/(\w+@\w+\.\w+(\.\w+){0,1})//){
        	$email = $1;
        	# print "EMAIL: ", $email, "\n";
    	}
    
    	while($test_lines[$cnt] =~ s/\D((\d{3}){0,1}(\(\d{3}\)){0,1}\D\d{3}\D\d{4})\D//){
    	
        	$phone = $1;
        	# print "PHONE: ", $phone, "\n";
    	}
    	while($test_lines[$cnt] =~ s/([0-9]*,{0,5}\s[A-Za-z]+,{0,1}\s[A-Za-z]+,{0,1}\s\d{5}(.\d{4}){0,1})//){
        	$address = $1;
        	# print "Address: ", $address, "\n";
    	}
			
	}

    return;
}

sub extract_content_education {
	for($cnt = 0; $cnt < scalar @test_lines ; $cnt++) {
		# parse out information you want
    	# print it in the tuple format to the CONTENT and LOG files, for example:
    
    	
    	if($test_lines[$cnt] =~ /Ph.*D/){
        	$degree = "Ph.D.";
        	# print "Degree; ", $degree, "\n";
    	}
    	elsif($test_lines[$cnt] =~ /M.*S/){
    		$degree = "M.S.";
        	# print "Degree; ", $degree, "\n";
    	}
    
	}
     
    return;
}


sub extract_content_research { # ????
	for($cnt = 0; $cnt < scalar @test_lines ; $cnt++) {
		# parse out information you want
    	# print it in the tuple format to the CONTENT and LOG files, for example:
    	
    	#print $test_lines[$cnt], "\n"; ????
	}
     
    return;
}

sub extract_content_skill {
	for($cnt = 0; $cnt < scalar @test_lines ; $cnt++) {
		# parse out information you want
    	# print it in the tuple format to the CONTENT and LOG files, for example:
    	
    	
    	my @words = (split /\s+/, $test_lines[$cnt]);
    	
    	for($i =0; $i<scalar @words; $i++){
    		if ($words[$i] =~ /[a-zA-Z]/){
    			$words[$i] =~ s/[[:punct:]]//g;   #remove punctuation
    			
    			# if($words[$i] eq "C"){
    			# 	$C = "Y";
       #  			print "C language; ", $C, "\n";
    			# }
    			# if($words[$i] eq "C++"){
    			# 	$Cpp = "Y";
       #  			print "Cpp; ", $Cpp, "\n";
    			# }
    			# if($words[$i] eq "java"){
    			# 	$java = "Y";
       #  			print "Java; ", $java, "\n";
    			# }		
    		}
    	}    
	}
     
    return;
}

sub ret {

    my $rule       = shift;   # which rule did I use here
    my $trueclass  = shift;   # what is the true sentence class ('NEOS','EOS')
    my $givenclass = shift;   # what is the sentence class my rule gives
    my $line       = shift;   # the actual line tested

    if ($trueclass eq $givenclass) {
		# printf(".. (%2d) %s\t%s\t%s\n",$rule,$givenclass,$trueclass,$line);
		$correct++;
		$rule_correct[$rule]++;	
    }
    else {
		printf("XX (%2d) %s\t%s\t%s\n",$rule,$givenclass,$trueclass,$line);
		$incorrect++;
		$rule_incorrect[$rule]++;
    }
}

