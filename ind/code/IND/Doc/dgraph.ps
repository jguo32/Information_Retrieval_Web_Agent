%!PS-Adobe-2.0
%%Creator: dvips 5.47 Copyright 1986-91 Radical Eye Software
%%Title: dgraph.dvi
%%Pages: 13 1
%%BoundingBox: 0 0 596 843
%%EndComments
%%BeginProcSet: tex.pro
/TeXDict 200 dict def TeXDict begin /N /def load def /B{bind def}N /S /exch
load def /X{S N}B /TR /translate load N /isls false N /vsize 10 N /@rigin{
isls{[0 1 -1 0 0 0]concat}if 72 Resolution div 72 VResolution div neg scale
Resolution VResolution vsize neg mul TR matrix currentmatrix dup dup 4 get
round 4 exch put dup dup 5 get round 5 exch put setmatrix}N /@letter{/vsize 10
N}B /@landscape{/isls true N /vsize -1 N}B /@a4{/vsize 10.6929133858 N}B /@a3{
/vsize 15.5531 N}B /@ledger{/vsize 16 N}B /@legal{/vsize 13 N}B /@manualfeed{
statusdict /manualfeed true put}B /@copies{/#copies X}B /FMat[1 0 0 -1 0 0]N
/FBB[0 0 0 0]N /nn 0 N /IE 0 N /ctr 0 N /df-tail{/nn 8 dict N nn begin
/FontType 3 N /FontMatrix fntrx N /FontBBox FBB N string /base X array
/BitMaps X /BuildChar{CharBuilder}N /Encoding IE N end dup{/foo setfont}2
array copy cvx N load 0 nn put /ctr 0 N[}B /df{/sf 1 N /fntrx FMat N df-tail}
B /dfs{div /sf X /fntrx[sf 0 0 sf neg 0 0]N df-tail}B /E{pop nn dup definefont
setfont}B /ch-width{ch-data dup length 5 sub get}B /ch-height{ch-data dup
length 4 sub get}B /ch-xoff{128 ch-data dup length 3 sub get sub}B /ch-yoff{
ch-data dup length 2 sub get 127 sub}B /ch-dx{ch-data dup length 1 sub get}B
/ch-image{ch-data dup type /stringtype ne{ctr get /ctr ctr 1 add N}if}B /id 0
N /rw 0 N /rc 0 N /gp 0 N /cp 0 N /G 0 N /sf 0 N /CharBuilder{save 3 1 roll S
dup /base get 2 index get S /BitMaps get S get /ch-data X pop /ctr 0 N ch-dx 0
ch-xoff ch-yoff ch-height sub ch-xoff ch-width add ch-yoff setcachedevice
ch-width ch-height true[1 0 0 -1 -.1 ch-xoff sub ch-yoff .1 add]{ch-image}
imagemask restore}B /D{/cc X dup type /stringtype ne{]}if nn /base get cc ctr
put nn /BitMaps get S ctr S sf 1 ne{dup dup length 1 sub dup 2 index S get sf
div put}if put /ctr ctr 1 add N}B /I{cc 1 add D}B /bop{userdict /bop-hook
known{bop-hook}if /SI save N @rigin 0 0 moveto}N /eop{clear SI restore
showpage userdict /eop-hook known{eop-hook}if}N /@start{userdict /start-hook
known{start-hook}if /VResolution X /Resolution X 1000 div /DVImag X /IE 256
array N 0 1 255{IE S 1 string dup 0 3 index put cvn put}for}N /p /show load N
/RMat[1 0 0 -1 0 0]N /BDot 260 string N /rulex 0 N /ruley 0 N /v{/ruley X
/rulex X V}B /V statusdict begin /product where{pop product dup length 7 ge{0
7 getinterval(Display)eq}{pop false}ifelse}{false}ifelse end{{gsave TR -.1 -.1
TR 1 1 scale rulex ruley false RMat{BDot}imagemask grestore}}{{gsave TR -.1
-.1 TR rulex ruley scale 1 1 false RMat{BDot}imagemask grestore}}ifelse B /a{
moveto}B /delta 0 N /tail{dup /delta X 0 rmoveto}B /M{S p delta add tail}B /b{
S p tail}B /c{-4 M}B /d{-3 M}B /e{-2 M}B /f{-1 M}B /g{0 M}B /h{1 M}B /i{2 M}B
/j{3 M}B /k{4 M}B /w{0 rmoveto}B /l{p -4 w}B /m{p -3 w}B /n{p -2 w}B /o{p -1 w
}B /q{p 1 w}B /r{p 2 w}B /s{p 3 w}B /t{p 4 w}B /x{0 S rmoveto}B /y{3 2 roll p
a}B /bos{/SS save N}B /eos{clear SS restore}B end
%%EndProcSet
%%BeginProcSet: special.pro
TeXDict begin /SDict 200 dict N SDict begin /@SpecialDefaults{/hs 612 N /vs
792 N /ho 0 N /vo 0 N /hsc 1 N /vsc 1 N /ang 0 N /CLIP false N /BBcalc false N
/p 3 def}B /@scaleunit 100 N /@hscale{@scaleunit div /hsc X}B /@vscale{
@scaleunit div /vsc X}B /@hsize{/hs X /CLIP true N}B /@vsize{/vs X /CLIP true
N}B /@hoffset{/ho X}B /@voffset{/vo X}B /@angle{/ang X}B /@rwi{10 div /rwi X}
B /@llx{/llx X}B /@lly{/lly X}B /@urx{/urx X}B /@ury{/ury X /BBcalc true N}B
/magscale true def end /@MacSetUp{userdict /md known{userdict /md get type
/dicttype eq{md begin /letter{}N /note{}N /legal{}N /od{txpose 1 0 mtx
defaultmatrix dtransform S atan/pa X newpath clippath mark{transform{
itransform moveto}}{transform{itransform lineto}}{6 -2 roll transform 6 -2
roll transform 6 -2 roll transform{itransform 6 2 roll itransform 6 2 roll
itransform 6 2 roll curveto}}{{closepath}}pathforall newpath counttomark array
astore /gc xdf pop ct 39 0 put 10 fz 0 fs 2 F/|______Courier fnt invertflag{
PaintBlack}if}N /txpose{pxs pys scale ppr aload pop por{noflips{pop S neg S TR
pop 1 -1 scale}if xflip yflip and{pop S neg S TR 180 rotate 1 -1 scale ppr 3
get ppr 1 get neg sub neg ppr 2 get ppr 0 get neg sub neg TR}if xflip yflip
not and{pop S neg S TR pop 180 rotate ppr 3 get ppr 1 get neg sub neg 0 TR}if
yflip xflip not and{ppr 1 get neg ppr 0 get neg TR}if}{noflips{TR pop pop 270
rotate 1 -1 scale}if xflip yflip and{TR pop pop 90 rotate 1 -1 scale ppr 3 get
ppr 1 get neg sub neg ppr 2 get ppr 0 get neg sub neg TR}if xflip yflip not
and{TR pop pop 90 rotate ppr 3 get ppr 1 get neg sub neg 0 TR}if yflip xflip
not and{TR pop pop 270 rotate ppr 2 get ppr 0 get neg sub neg 0 S TR}if}
ifelse scaleby96{ppr aload pop 4 -1 roll add 2 div 3 1 roll add 2 div 2 copy
TR .96 dup scale neg S neg S TR}if}N /cp{pop pop showpage pm restore}N end}if}
if}N /normalscale{Resolution 72 div VResolution 72 div neg scale magscale{
DVImag dup scale}if}N /psfts{S 65536 div N}N /startTexFig{/psf$SavedState save
N userdict maxlength dict begin /magscale false def normalscale currentpoint
TR /psf$ury psfts /psf$urx psfts /psf$lly psfts /psf$llx psfts /psf$y psfts
/psf$x psfts currentpoint /psf$cy X /psf$cx X /psf$sx psf$x psf$urx psf$llx
sub div N /psf$sy psf$y psf$ury psf$lly sub div N psf$sx psf$sy scale psf$cx
psf$sx div psf$llx sub psf$cy psf$sy div psf$ury sub TR /showpage{}N
/erasepage{}N /copypage{}N /p 3 def @MacSetUp}N /doclip{psf$llx psf$lly
psf$urx psf$ury currentpoint 6 2 roll newpath 4 copy 4 2 roll moveto 6 -1 roll
S lineto S lineto S lineto closepath clip newpath moveto}N /endTexFig{end
psf$SavedState restore}N /@beginspecial{SDict begin /SpecialSave save N gsave
normalscale currentpoint TR @SpecialDefaults}N /@setspecial{CLIP{newpath 0 0
moveto hs 0 rlineto 0 vs rlineto hs neg 0 rlineto closepath clip}if ho vo TR
hsc vsc scale ang rotate BBcalc{rwi urx llx sub div dup scale llx neg lly neg
TR}if /showpage{}N /erasepage{}N /copypage{}N newpath}N /@endspecial{grestore
clear SpecialSave restore end}N /@defspecial{SDict begin}N /@fedspecial{end}B
/li{lineto}B /rl{rlineto}B /rc{rcurveto}B /np{/SaveX currentpoint /SaveY X N 1
setlinecap newpath}N /st{stroke SaveX SaveY moveto}N /fil{fill SaveX SaveY
moveto}N /ellipse{/endangle X /startangle X /yrad X /xrad X /savematrix matrix
currentmatrix N TR xrad yrad scale 0 0 1 startangle endangle arc savematrix
setmatrix}N end
%%EndProcSet
TeXDict begin 1000 300 300 @start /Fa 32 120 df<78FCFCFCFC7806067D850D>46
D<00600001E0000FE000FFE000F3E00003E00003E00003E00003E00003E00003E00003E00003E0
0003E00003E00003E00003E00003E00003E00003E00003E00003E00003E00003E00003E0007FFF
807FFF80111B7D9A18>49 D<07F8001FFE00383F80780FC0FC07C0FC07E0FC03E0FC03E07803E0
0007E00007C00007C0000F80001F00001E0000380000700000E0000180600300600600600800E0
1FFFC03FFFC07FFFC0FFFFC0FFFFC0131B7E9A18>I<03F8001FFE003C1F003C0F807C07C07E07
C07C07C03807C0000F80000F80001E00003C0003F800001E00000F800007C00007C00007E03007
E07807E0FC07E0FC07E0FC07C0780F80781F001FFE0007F800131B7E9A18>I<00038000000380
000007C0000007C0000007C000000FE000000FE000001FF000001BF000001BF0000031F8000031
F8000061FC000060FC0000E0FE0000C07E0000C07E0001803F0001FFFF0003FFFF8003001F8003
001F8006000FC006000FC00E000FE00C0007E0FFC07FFEFFC07FFE1F1C7E9B24>65
D<001FE02000FFF8E003F80FE007C003E00F8001E01F0000E03E0000E03E0000607E0000607C00
0060FC000000FC000000FC000000FC000000FC000000FC000000FC000000FC0000007C0000607E
0000603E0000603E0000C01F0000C00F80018007C0030003F80E0000FFFC00001FE0001B1C7D9B
22>67 D<000FF008007FFE3801FC07F807E001F80F8000781F0000783F0000383E0000387E0000
187C000018FC000000FC000000FC000000FC000000FC000000FC000000FC007FFFFC007FFF7C00
01F87E0001F83E0001F83F0001F81F0001F80F8001F807E001F801FC07F8007FFE78000FF81820
1C7D9B26>71 D<FFFC3FFFFFFC3FFF0FC003F00FC003F00FC003F00FC003F00FC003F00FC003F0
0FC003F00FC003F00FC003F00FC003F00FFFFFF00FFFFFF00FC003F00FC003F00FC003F00FC003
F00FC003F00FC003F00FC003F00FC003F00FC003F00FC003F00FC003F00FC003F0FFFC3FFFFFFC
3FFF201C7E9B25>I<FFFFFFFF07E007E007E007E007E007E007E007E007E007E007E007E007E0
07E007E007E007E007E007E007E007E007E007E007E0FFFFFFFF101C7F9B12>I<FFFF00FFFF00
0FC0000FC0000FC0000FC0000FC0000FC0000FC0000FC0000FC0000FC0000FC0000FC0000FC000
0FC0000FC0000FC0030FC0030FC0030FC0070FC0070FC0060FC00E0FC01E0FC07EFFFFFEFFFFFE
181C7E9B1D>76 D<7FFFFFE07FFFFFE0781F81E0701F80E0601F8060E01F8070C01F8030C01F80
30C01F8030C01F8030001F8000001F8000001F8000001F8000001F8000001F8000001F8000001F
8000001F8000001F8000001F8000001F8000001F8000001F8000001F8000001F800007FFFE0007
FFFE001C1C7E9B21>84 D<0FF8001C1E003E0F803E07803E07C01C07C00007C0007FC007E7C01F
07C03C07C07C07C0F807C0F807C0F807C0780BC03E13F80FE1F815127F9117>97
D<FF0000FF00001F00001F00001F00001F00001F00001F00001F00001F00001F00001F3F801FE1
E01F80701F00781F003C1F003C1F003E1F003E1F003E1F003E1F003E1F003E1F003C1F003C1F00
781F80701EC1E01C3F00171D7F9C1B>I<03FC000E0E001C1F003C1F00781F00780E00F80000F8
0000F80000F80000F80000F800007800007801803C01801C03000E0E0003F80011127E9115>I<
000FF0000FF00001F00001F00001F00001F00001F00001F00001F00001F00001F001F9F00F07F0
1C03F03C01F07801F07801F0F801F0F801F0F801F0F801F0F801F0F801F07801F07801F03C01F0
1C03F00F0FFE03F9FE171D7E9C1B>I<01FC000F07001C03803C01C07801C07801E0F801E0F801
E0FFFFE0F80000F80000F800007800007C00603C00601E00C00F038001FC0013127F9116>I<00
7F0001E38003C7C00787C00F87C00F83800F80000F80000F80000F80000F8000FFF800FFF8000F
80000F80000F80000F80000F80000F80000F80000F80000F80000F80000F80000F80000F80000F
80007FF8007FF800121D809C0F>I<03F8F00E0F381E0F381C07303C07803C07803C07803C0780
1C07001E0F000E0E001BF8001000001800001800001FFF001FFFC00FFFE01FFFF07801F8F00078
F00078F000787000707800F01E03C007FF00151B7F9118>I<FF0000FF00001F00001F00001F00
001F00001F00001F00001F00001F00001F00001F0FC01F31E01F40F01F80F81F80F81F00F81F00
F81F00F81F00F81F00F81F00F81F00F81F00F81F00F81F00F81F00F8FFE7FFFFE7FF181D7F9C1B
>I<1E003F003F003F003F001E00000000000000000000000000FF00FF001F001F001F001F001F
001F001F001F001F001F001F001F001F001F00FFE0FFE00B1E7F9D0E>I<FF0000FF00001F0000
1F00001F00001F00001F00001F00001F00001F00001F00001F0FF81F0FF81F03801F07001F0C00
1F18001F70001FF8001FFC001FBC001F3E001F1F001F0F001F0F801F07C01F03E0FFC7FCFFC7FC
161D7F9C19>107 D<FF00FF001F001F001F001F001F001F001F001F001F001F001F001F001F00
1F001F001F001F001F001F001F001F001F001F001F001F00FFE0FFE00B1D7F9C0E>I<FF0FC07E
00FF31E18F001F40F207801F80FC07C01F80FC07C01F00F807C01F00F807C01F00F807C01F00F8
07C01F00F807C01F00F807C01F00F807C01F00F807C01F00F807C01F00F807C01F00F807C0FFE7
FF3FF8FFE7FF3FF825127F9128>I<FF0FC0FF31E01F40F01F80F81F80F81F00F81F00F81F00F8
1F00F81F00F81F00F81F00F81F00F81F00F81F00F81F00F8FFE7FFFFE7FF18127F911B>I<01FC
000F07801C01C03C01E07800F07800F0F800F8F800F8F800F8F800F8F800F8F800F87800F07800
F03C01E01E03C00F078001FC0015127F9118>I<FF3F80FFE1E01F80F01F00781F007C1F003C1F
003E1F003E1F003E1F003E1F003E1F003E1F003C1F007C1F00781F80F01FC1E01F3F001F00001F
00001F00001F00001F00001F0000FFE000FFE000171A7F911B>I<FE3E00FE47001E8F801E8F80
1E8F801F07001F00001F00001F00001F00001F00001F00001F00001F00001F00001F0000FFF000
FFF00011127F9114>114 D<1FD830786018E018E018F000FF807FE07FF01FF807FC007CC01CC0
1CE01CE018F830CFC00E127E9113>I<0300030003000300070007000F000F003FFCFFFC1F001F
001F001F001F001F001F001F001F001F0C1F0C1F0C1F0C0F08079803F00E1A7F9913>I<FF07F8
FF07F81F00F81F00F81F00F81F00F81F00F81F00F81F00F81F00F81F00F81F00F81F00F81F00F8
1F01F80F01F80786FF01F8FF18127F911B>I<FFC1FCFFC1FC1F00601F80E00F80C00FC0C007C1
8007C18003E30003E30001F60001F60001FE0000FC0000FC0000780000780000300016127F9119
>I<FF8FF8FEFF8FF8FE1F03E0301F03E0301F83E0700F83F0600F86F06007C6F0C007CEF8C007
EC79C003EC7D8003F83D8001F83F0001F83F0001F01F0000F01E0000E00E0000E00E001F127F91
22>I E /Fb 2 3 df<FFFFC0FFFFC012027D871A>0 D<8002C006600C301818300C6006C00380
038006C00C6018303018600CC00680020F107B8E1A>2 D E /Fc 10 117
df<01FF001C0038003800380038007000700070007000E000E000E000E001C071C0F1C0E380C7
007C0010147E9312>74 D<07F000FE00F000F0017001E0017002E0017002E0017004E0027009C0
023809C0023811C0023821C0043823800438438004388380041C8380081D0700081E0700081E07
00081C070018180E00FE187FC01F147F9320>77 D<07E01FC000E0060001700400017004000138
040001380400021C0800021C0800020E0800020E08000407100004071000040390000403900008
01E0000801E0000800E0000800E00018004000FE0040001A147F931A>I<7C000C001800180018
00180030003700388030C060C060C060C060C0C180C180C1004300660038000A147E930F>98
D<07800C401020304060407F8060004000C0004020604021801E000B0D7E8C10>101
D<06070600000000384C4C8C98181830326262643808147F930C>105 D<30F87C00590C86004E
0D06009C0E0600980C0600180C0600180C060030180C0030180C80301818803018188060301900
60300E00190D7F8C1D>109 D<30F8590C4E0C9C0C980C180C180C30183019303130316032601C
100D7F8C15>I<0700188019C0318038001E000F0003804180E180C10082007C000A0D7E8C10>
115 D<02000600060006000C00FF800C000C001800180018001800300031003100320032001C00
09127F910D>I E /Fd 1 95 df<00400000E00000E00001B00001B000031800031800060C0006
0C000C06000C06001803001803003001803001806000C06000C0C00060C0002013137E9218>94
D E /Fe 4 69 df<0000C00000C00001C00001C00003C00005C00005E00008E00008E00010E000
20E00020E00040E000C0E00080E001FFF0010070020070040070040070080070180070FE03FE17
177F961A>65 D<07FFF800E00E00E00700E00300E00301C00301C00701C00701C00E03803C03FF
F003FFF003803C07001C07000E07000E07000E0E001C0E001C0E00380E00701C01E0FFFF001817
7F961B>I<001F8200E04403802C07001C0C001C1C0008380008300008700008600000E00000E0
0000E00000C00000C00020C00020C00040E000406000806001003002001C1C0007E00017177E96
19>I<07FFF80000E00E0000E0030000E0038000E0018001C001C001C001C001C000C001C000C0
038001C0038001C0038001C0038001C0070003800700038007000300070007000E000E000E000C
000E0018000E0070001C01C000FFFF00001A177F961D>I E /Ff 19 118
df<0102040C1818303070606060E0E0E0E0E0E0E0E0E0E060606070303018180C04020108227D
980E>40 D<8040203018180C0C0E060606070707070707070707070606060E0C0C181830204080
08227E980E>I<60F0F06004047D830A>46 D<001000003800003800003800005C00005C00005C
00008E00008E00008E0001070001070003078002038002038007FFC00401C00401C00800E00800
E01800E03800F0FE03FE17177F961A>65 D<1FC0386038301038003803F81E3830387038E039E0
39E07970FF1F1E100E7F8D12>97 D<FC00001C00001C00001C00001C00001C00001C00001C0000
1C00001CF8001F06001C03001C03801C01801C01C01C01C01C01C01C01C01C01801C03801C0300
1B0E0010F8001217809614>I<0FC0186030307038E018FFF8E000E000E0006000700830101830
07C00D0E7F8D10>101 D<03E006700E701C201C001C001C001C001C00FF801C001C001C001C00
1C001C001C001C001C001C001C001C00FF800C1780960B>I<0F9E18E330607070707070703060
18C02F80200060003FE03FF83FFC600EC006C006C006600C38380FE010157F8D12>I<FC00001C
00001C00001C00001C00001C00001C00001C00001C00001C7C001D8E001E07001C07001C07001C
07001C07001C07001C07001C07001C07001C07001C0700FF9FE01317809614>I<183C3C180000
0000007C1C1C1C1C1C1C1C1C1C1C1C1CFF081780960A>I<FC001C001C001C001C001C001C001C
001C001C001C001C001C001C001C001C001C001C001C001C001C001C00FF80091780960A>108
D<FC7C1F001D8E63801E0781C01C0701C01C0701C01C0701C01C0701C01C0701C01C0701C01C07
01C01C0701C01C0701C01C0701C0FF9FE7F81D0E808D1E>I<FC7C001D8E001E07001C07001C07
001C07001C07001C07001C07001C07001C07001C07001C0700FF9FE0130E808D14>I<FCF8001F
0E001C03001C03801C01801C01C01C01C01C01C01C01C01C01801C03801C07001F0E001CF8001C
00001C00001C00001C00001C0000FF80001214808D14>112 D<FCF01D381E381C101C001C001C
001C001C001C001C001C001C00FF800D0E808D0E>114 D<1F4060C0C040C040E000FF007F801F
C001E080608060C060E0C09F000B0E7F8D0E>I<080008000800180018003800FF803800380038
00380038003800380038403840384038401C800F000A147F930E>I<FC3F001C07001C07001C07
001C07001C07001C07001C07001C07001C07001C07001C0F000E170003E7E0130E808D14>I
E /Fg 1 50 df<0C003C00CC000C000C000C000C000C000C000C000C000C000C000C000C00FF80
09107E8F0F>49 D E /Fh 11 58 df<01020408103020606040C0C0C0C0C0C0C0C0C0C0406060
20301008040201081E7E950D>40 D<80402010080C040606020303030303030303030302060604
0C0810204080081E7E950D>I<0C001C00EC000C000C000C000C000C000C000C000C000C000C00
0C000C000C000C000C00FFC00A137D9211>49 D<1F0060C06060F070F030603000700070006000
C001C00180020004000810101020207FE0FFE00C137E9211>I<0FC03070703870387038003800
3000E00FC0007000380018001C601CF01CF018E03860701FC00E137F9211>I<006000E000E001
60026006600C600860106020606060C060FFFC0060006000600060006003FC0E137F9211>I<60
607FC07F8044004000400040004F0070C040E0006000700070E070E070E06040E021C01F000C13
7E9211>I<07C00C201070207060006000C000CF00D0C0E060C020C030C030C030403060202060
10C00F000C137E9211>I<40007FFC7FF840108010802000400080010001000300020006000600
0E000E000E000E000E0004000E147E9311>I<0FC0107020186018601870183C303F600F800FE0
31F06078C01CC00CC00CC00C601830300FC00E137F9211>I<0F00308060404060C020C030C030
C0304030607030B00F30003000200060E040E08041003E000C137E9211>I
E /Fi 9 107 df<FFFFFF80FFFFFF8019027D8A20>0 D<400020C000606000C03001801803000C
0600060C0003180001B00000E00000E00001B000031800060C000C06001803003001806000C0C0
006040002013147A9320>2 D<03C00FF01FF83FFC7FFE7FFEFFFFFFFFFFFFFFFF7FFE7FFE3FFC
1FF80FF003C010107E9115>15 D<02000000000400000000040000000008000000001000000000
2000000000FFFFFFFFF0FFFFFFFFF0200000000010000000000800000000040000000004000000
000200000000240E7D902A>32 D<001000003800003800006C00006C00006C0000C60000C60001
83000183000301800301800600C00600C00600C00C00600C006018003018003030001830001830
001860000C60000CC00006C00002171A7E981C>94 D<C00002C0000660000C60000C3000183000
183000181800301800300C00600C00600600C00600C00600C003018003018001830001830000C6
0000C600006C00006C00006C00003800003800001000171A7E981C>I<003C00E001C001800380
038003800380038003800380038003800380038003800380030007001C00F0001C000700030003
80038003800380038003800380038003800380038003800380018001C000E0003C0E297D9E15>
102 D<F0001C000700030003800380038003800380038003800380038003800380038003800180
01C000E0003C00E001C00180038003800380038003800380038003800380038003800380038003
0007001C00F0000E297D9E15>I<C0C0C0C0C0C0C0C0C0C0C0C0C0C0C0C0C0C0C0C0C0C0C0C0C0
C0C0C0C0C0C0C0C0C0C0C0C0C0C0C0C002297B9E0C>106 D E /Fj 49 122
df<60F0F06004047C830C>58 D<60F0F0701010101020204080040C7C830C>I<0000038000000F
0000003C000000F0000003C000000F0000003C000000F0000003C000000F0000003C000000F000
0000F00000003C0000000F00000003C0000000F00000003C0000000F00000003C0000000F00000
003C0000000F000000038019187D9520>I<E0000000780000001E0000000780000001E0000000
780000001E0000000780000001E0000000780000001E00000007800000078000001E0000007800
0001E00000078000001E00000078000001E00000078000001E00000078000000E000000019187D
9520>62 D<00000C0000000C0000001C0000001C0000003C0000007C0000005C0000009C000000
8E0000010E0000010E0000020E0000040E0000040E0000080E0000080E0000100E0000200E0000
3FFE0000400700004007000080070001000700010007000200070002000700060007001E000700
FF807FF01C1D7F9C1F>65 D<01FFFF00003C01C0003800E0003800F00038007000380070007000
70007000F0007000F0007001E000E003C000E0078000E01F0000FFFC0001C00F0001C0078001C0
03C001C003C0038003C0038003C0038003C0038003C0070007800700070007000E0007001C000E
007800FFFFC0001C1C7E9B1F>I<0001F808000E061800380138006000F001C000700380007007
0000300F0000200E0000201C0000203C0000203C000000780000007800000078000000F0000000
F0000000F0000000F0000000F0000100F0000100F0000100700002007000020030000400380008
001C0010000E0060000701800000FE00001D1E7E9C1E>I<01FFFF80003C01E000380070003800
380038001C0038001C0070001C0070001E0070001E0070001E00E0001E00E0001E00E0001E00E0
001E01C0003C01C0003C01C0003C01C000380380007803800070038000F0038000E0070001C007
0003800700070007001C000E007800FFFFC0001F1C7E9B22>I<01FFFFF8003C00780038001800
38001000380010003800100070001000700010007010100070100000E0200000E0200000E06000
00FFE00001C0400001C0400001C0400001C0400003808040038000400380008003800080070001
000700010007000300070006000E003E00FFFFFC001D1C7E9B1F>I<01FFFFF0003C00F0003800
300038002000380020003800200070002000700020007010200070100000E0200000E0200000E0
600000FFE00001C0400001C0400001C0400001C040000380800003800000038000000380000007
0000000700000007000000070000000F000000FFF000001C1C7E9B1B>I<0001F808000E061800
380138006000F001C0007003800070070000300F0000200E0000201C0000203C0000203C000000
780000007800000078000000F0000000F0000000F0007FF0F0000780F0000700F0000700F00007
007000070070000E0030000E0038000E001C001E000E0064000701840000FE00001D1E7E9C21>
I<01FFC3FF80003C0078000038007000003800700000380070000038007000007000E000007000
E000007000E000007000E00000E001C00000E001C00000E001C00000FFFFC00001C003800001C0
03800001C003800001C0038000038007000003800700000380070000038007000007000E000007
000E000007000E000007000E00000F001E0000FFE1FFC000211C7E9B23>I<03FFC0003C000038
0000380000380000380000700000700000700000700000E00000E00000E00000E00001C00001C0
0001C00001C0000380000380000380000380000700000700000700000700000F0000FFF000121C
7E9B12>I<007FF80003C0000380000380000380000380000700000700000700000700000E0000
0E00000E00000E00001C00001C00001C00001C00003800003800003800203800707000F07000E0
600080E00081C0004380003E0000151D7D9B17>I<01FFC07F80003C001E000038001800003800
200000380040000038008000007002000000700400000070080000007010000000E040000000E0
C0000000E1E0000000E2E0000001C470000001D070000001E038000001C0380000038038000003
801C000003801C000003800E000007000E000007000E0000070007000007000700000F00078000
FFE03FF000211C7E9B23>I<01FFE0003C00003800003800003800003800007000007000007000
00700000E00000E00000E00000E00001C00001C00001C00001C000038002038002038002038004
07000407000C0700180700380E00F0FFFFF0171C7E9B1C>I<01FE0000FF003E0000F0002E0001
E0002E0002E0002E0002E0002E0004E0004E0009C0004E0009C000470011C000470011C0008700
238000870043800087004380008700838001070107000107010700010382070001038207000203
840E000203880E000203880E000203900E000403A01C000403A01C000401C01C000C01C01C001C
01803C00FF8103FF80281C7E9B28>I<01FC00FF80001C001C00002E001800002E001000002E00
1000002700100000470020000043002000004380200000438020000081C040000081C040000081
C040000080E040000100E080000100708000010070800001007080000200390000020039000002
0039000002001D000004001E000004000E000004000E00000C000E00001C00040000FF80040000
211C7E9B21>I<0003F800000E0E000038038000E001C001C001C0038000E0070000E00F0000F0
1E0000F01C0000F03C0000F03C0000F0780000F0780000F0780000F0F00001E0F00001E0F00001
E0F00003C0F00003C0F0000780F0000780F0000F0070000E0070001C00380038003C0070001C01
C0000707800001FC00001C1E7E9C20>I<01FFFF00003C03C0003800E0003800F0003800700038
0070007000F0007000F0007000F0007000E000E001E000E003C000E0078000E01E0001FFF00001
C0000001C0000001C0000003800000038000000380000003800000070000000700000007000000
070000000F000000FFE000001C1C7E9B1B>I<0003F800000E0E000038038000E001C001C001C0
038000E0070000E00F0000F01E0000F01C0000F03C0000F03C0000F0780000F0780000F0780000
F0F00001E0F00001E0F00001E0F00003C0F00003C0F0000380F0000780F0000F00703C0E007042
1C0038823800388370001C83C0000787810001FF8100000383000003820000038E000003FC0000
03F8000001F8000001E0001C257E9C21>I<01FFFE00003C03C0003800E0003800F00038007000
380070007000F0007000F0007000F0007001E000E001C000E0078000E01E0000FFF00001C03000
01C0180001C01C0001C01C0003801C0003801C0003801C0003801C0007003C0007003C0807003C
0807003C100F001E10FFE00E20000007C01D1D7E9B20>I<000FC100303300400F008006018006
03000603000606000406000407000007000007800003F00001FF0000FFC0003FE00003E00000F0
0000700000300000302000302000306000606000606000C0600080F00300CC060083F800181E7E
9C19>I<1FFFFFF01C03807030070030200700206007002040070020400E0020800E0020800E00
20000E0000001C0000001C0000001C0000001C0000003800000038000000380000003800000070
000000700000007000000070000000E0000000E0000000E0000000E0000001E000007FFF00001C
1C7F9B18>I<FFC00FF01E0003801C0003001C0002001C0004001E0004000E0008000E0008000E
0010000E0020000E0020000E0040000E0080000E0080000F010000070100000702000007040000
0704000007080000071800000710000007A0000003A0000003C000000380000003800000030000
00030000001C1D7D9B18>86 D<FFC1FFC1FF1C003C003C1C001C00101C001C00201C003C00201C
007C00401C005C00401C009C00801C009C00801C011C01001C011C01001C021C02001C021C0400
1C041C04001C081C08001E081C08000E101C10000E101C10000E200E20000E200E60000E400E40
000E400E80000E800E80000F000F00000F000F00000E000E00000E000E00000C000C00000C0008
0000281D7D9B27>I<FFE007F80F0001E00F0001800700010007000200078004000380080003C0
100001C0300001C0200001E0400000E0800000F100000072000000760000007C00000038000000
3800000070000000700000007000000070000000E0000000E0000000E0000000E0000001C00000
1FFC00001D1C7F9B18>89 D<01E3000717000C0F00180F00380E00300E00700E00700E00E01C00
E01C00E01C00E01C00E03880E03880E038806078803199001E0E0011127E9116>97
D<3F00070007000E000E000E000E001C001C001C001C0039E03A303C1838187018701C701C701C
E038E038E038E030E070E060E0C061C023001E000E1D7E9C12>I<01F0030C0E0C1C1E383C3018
70007000E000E000E000E000E000E0046008601030601F800F127E9112>I<0007E00000E00000
E00001C00001C00001C00001C000038000038000038000038001E7000717000C0F00180F00380E
00300E00700E00700E00E01C00E01C00E01C00E01C00E03880E03880E038806078803199001E0E
00131D7E9C16>I<01F007080C0818043808300870307FC0E000E000E000E000E000E004600860
1030600F800E127E9113>I<0001E0000630000E78000CF0001C60001C00001C00001C00003C00
00380000380003FFC000380000380000700000700000700000700000700000E00000E00000E000
00E00000E00001C00001C00001C00001C00001C000018000038000038000630000F30000F60000
E4000078000015257E9C14>I<007180018B800307800607800E07000C07001C07001C0700380E
00380E00380E00380E00381C00381C00381C00183C0008F8000738000038000038000070006070
00F06000F0E000E180007E0000111A7F9114>I<0FC00001C00001C00003800003800003800003
80000700000700000700000700000E3E000EC3000F03800E03801E03801C03801C03801C038038
0700380700380700380E00700E20700E20701C20701C40E00C80600700131D7E9C18>I<01C003
C003C001800000000000000000000000001C00270047004700870087000E000E001C001C001C00
3800388038807080710032001C000A1C7E9B0E>I<0FC00001C00001C000038000038000038000
0380000700000700000700000700000E07000E18800E21C00E23C01C47801C83001D00001E0000
3F800039C00038E00038E00070E10070E10070E10070E200E06200603C00121D7E9C16>107
D<1F800380038007000700070007000E000E000E000E001C001C001C001C003800380038003800
7000700070007000E400E400E400E40064003800091D7E9C0C>I<381F81F04E20C6184640E81C
4680F01C8F00F01C8E00E01C0E00E01C0E00E01C1C01C0381C01C0381C01C0381C01C070380380
7138038071380380E1380380E2700700643003003820127E9124>I<381F004E61804681C04701
C08F01C08E01C00E01C00E01C01C03801C03801C03801C0700380710380710380E10380E207006
4030038014127E9119>I<00F800030C000E06001C0300180300300300700380700380E00700E0
0700E00700E00E00E00E00E01C0060180060300030E0000F800011127E9114>I<07078009C860
08D03008E03011C03011C03801C03801C0380380700380700380700380600700E00700C0070180
0783000E86000E78000E00000E00001C00001C00001C00001C00003C0000FF8000151A819115>
I<383C4E424687470F8E1E8E0C0E000E001C001C001C001C003800380038003800700030001012
7E9113>114 D<01F0060C04040C0E180C1C001F000FE00FF003F80038201C7018F018F0108030
60601F800F127E9113>I<00C001C001C001C00380038003800380FFF00700070007000E000E00
0E000E001C001C001C001C00382038203840384018800F000C1A80990F>I<1C00C02701C04701
C04701C08703808703800E03800E03801C07001C07001C07001C0700180E20180E20180E201C1E
200C264007C38013127E9118>I<1C00C0802701C1C04701C1C04701C0C087038040870380400E
0380400E0380401C0700801C0700801C0700801C07010018060100180602001C0E02001C0F0400
0E13080003E1F0001A127E911E>119 D<07878008C84010F0C020F1E020E3C040E18000E00000
E00001C00001C00001C00001C000638080F38080F38100E5810084C60078780013127E9118>I<
1C00C02701C04701C04701C08703808703800E03800E03801C07001C07001C07001C0700180E00
180E00180E001C1E000C3C0007DC00001C00001800603800F03000F06000E0C0004180003E0000
121A7E9114>I E /Fk 41 120 df<387CFEFEFE7C3807077C8610>46 D<00180000780001F800
FFF800FFF80001F80001F80001F80001F80001F80001F80001F80001F80001F80001F80001F800
01F80001F80001F80001F80001F80001F80001F80001F80001F80001F80001F80001F80001F800
01F8007FFFE07FFFE013207C9F1C>49 D<03FC000FFF003C1FC07007E07C07F0FE03F0FE03F8FE
03F8FE01F87C01F83803F80003F80003F00003F00007E00007C0000F80001F00003E0000380000
700000E01801C0180380180700180E00380FFFF01FFFF03FFFF07FFFF0FFFFF0FFFFF015207D9F
1C>I<00FE0007FFC00F07E01E03F03F03F03F81F83F81F83F81F81F03F81F03F00003F00003E0
0007C0001F8001FE0001FF000007C00001F00001F80000FC0000FC3C00FE7E00FEFF00FEFF00FE
FF00FEFF00FC7E01FC7801F81E07F00FFFC001FE0017207E9F1C>I<0000E00001E00003E00003
E00007E0000FE0001FE0001FE00037E00077E000E7E001C7E00187E00307E00707E00E07E00C07
E01807E03807E07007E0E007E0FFFFFEFFFFFE0007E00007E00007E00007E00007E00007E00007
E000FFFE00FFFE17207E9F1C>I<000070000000007000000000F800000000F800000000F80000
0001FC00000001FC00000003FE00000003FE00000003FE00000006FF000000067F0000000E7F80
00000C3F8000000C3F800000183FC00000181FC00000381FE00000300FE00000300FE00000600F
F000006007F00000E007F80000FFFFF80000FFFFF800018001FC00018001FC00038001FE000300
00FE00030000FE000600007F000600007F00FFE00FFFF8FFE00FFFF825227EA12A>65
D<0003FE0080001FFF818000FF01E38001F8003F8003E0001F8007C0000F800F800007801F8000
07803F000003803F000003807F000001807E000001807E00000180FE00000000FE00000000FE00
000000FE00000000FE00000000FE00000000FE00000000FE000000007E000000007E000001807F
000001803F000001803F000003801F800003000F8000030007C000060003F0000C0001F8003800
00FF00F000001FFFC0000003FE000021227DA128>67 D<FFFFFF8000FFFFFFF00007F003FC0007
F0007E0007F0003F0007F0001F8007F0000FC007F00007E007F00007E007F00007F007F00003F0
07F00003F007F00003F007F00003F807F00003F807F00003F807F00003F807F00003F807F00003
F807F00003F807F00003F807F00003F807F00003F007F00003F007F00003F007F00007E007F000
07E007F0000FC007F0001F8007F0003F0007F0007E0007F003FC00FFFFFFF000FFFFFF80002522
7EA12B>I<FFFFFFF8FFFFFFF807F001F807F0007807F0003807F0001807F0001C07F0001C07F0
000C07F0000C07F0180C07F0180C07F0180007F0180007F0380007F0780007FFF80007FFF80007
F0780007F0380007F0180007F0180007F0180007F0180007F0000007F0000007F0000007F00000
07F0000007F0000007F0000007F00000FFFFE000FFFFE0001E227EA123>70
D<0003FE0040001FFFC0C0007F00F1C001F8003FC003F0000FC007C00007C00FC00003C01F8000
03C03F000001C03F000001C07F000000C07E000000C07E000000C0FE00000000FE00000000FE00
000000FE00000000FE00000000FE00000000FE00000000FE000FFFFC7E000FFFFC7F00001FC07F
00001FC03F00001FC03F00001FC01F80001FC00FC0001FC007E0001FC003F0001FC001FC003FC0
007F80E7C0001FFFC3C00003FF00C026227DA12C>I<FFFF83FFFEFFFF83FFFE07F0001FC007F0
001FC007F0001FC007F0001FC007F0001FC007F0001FC007F0001FC007F0001FC007F0001FC007
F0001FC007F0001FC007F0001FC007F0001FC007FFFFFFC007FFFFFFC007F0001FC007F0001FC0
07F0001FC007F0001FC007F0001FC007F0001FC007F0001FC007F0001FC007F0001FC007F0001F
C007F0001FC007F0001FC007F0001FC007F0001FC007F0001FC0FFFF83FFFEFFFF83FFFE27227E
A12C>I<FFFFE0FFFFE003F80003F80003F80003F80003F80003F80003F80003F80003F80003F8
0003F80003F80003F80003F80003F80003F80003F80003F80003F80003F80003F80003F80003F8
0003F80003F80003F80003F80003F80003F80003F800FFFFE0FFFFE013227FA115>I<FFFFE000
FFFFE00007F0000007F0000007F0000007F0000007F0000007F0000007F0000007F0000007F000
0007F0000007F0000007F0000007F0000007F0000007F0000007F0000007F0000007F0000007F0
000007F0001807F0001807F0001807F0001807F0003807F0003807F0007007F0007007F000F007
F001F007F007F0FFFFFFF0FFFFFFF01D227EA122>76 D<FFF000000FFFFFF800001FFF07F80000
1FE006FC000037E006FC000037E006FC000037E0067E000067E0067E000067E0063F0000C7E006
3F0000C7E0061F800187E0061F800187E0060FC00307E0060FC00307E0060FC00307E00607E006
07E00607E00607E00603F00C07E00603F00C07E00601F81807E00601F81807E00601F81807E006
00FC3007E00600FC3007E006007E6007E006007E6007E006003FC007E006003FC007E006001F80
07E006001F8007E006001F8007E006000F0007E0FFF00F00FFFFFFF00600FFFF30227EA135>I<
0007FC0000003FFF800000FC07E00003F001F80007E000FC000FC0007E001F80003F001F80003F
003F00001F803F00001F807F00001FC07E00000FC07E00000FC0FE00000FE0FE00000FE0FE0000
0FE0FE00000FE0FE00000FE0FE00000FE0FE00000FE0FE00000FE0FE00000FE07E00000FC07F00
001FC07F00001FC03F00001F803F80003F801F80003F000FC0007E0007E000FC0003F001F80000
FC07E000003FFF80000007FC000023227DA12A>79 D<FFFFFF00FFFFFFE007F007F007F001FC07
F000FC07F0007E07F0007E07F0007F07F0007F07F0007F07F0007F07F0007F07F0007E07F0007E
07F000FC07F001FC07F007F007FFFFE007FFFF0007F0000007F0000007F0000007F0000007F000
0007F0000007F0000007F0000007F0000007F0000007F0000007F0000007F00000FFFF8000FFFF
800020227EA126>I<FFFFFE0000FFFFFFC00007F007F00007F001F80007F000FC0007F0007E00
07F0007F0007F0007F0007F0007F0007F0007F0007F0007F0007F0007F0007F0007E0007F000FC
0007F001F80007F007F00007FFFFC00007FFFF800007F00FE00007F007F00007F003F80007F001
FC0007F001FC0007F001FC0007F001FC0007F001FC0007F001FC0007F001FC0007F001FC0007F0
01FC0607F000FE0607F000FF0CFFFF803FF8FFFF800FF027227EA12A>82
D<01FC0407FF8C1F03FC3C007C7C003C78001C78001CF8000CF8000CFC000CFC0000FF0000FFE0
007FFF007FFFC03FFFF01FFFF80FFFFC03FFFE003FFE0003FF00007F00003F00003FC0001FC000
1FC0001FE0001EE0001EF0003CFC003CFF00F8C7FFE080FF8018227DA11F>I<7FFFFFFF807FFF
FFFF807E03F80F807803F807807003F803806003F80180E003F801C0E003F801C0C003F800C0C0
03F800C0C003F800C0C003F800C00003F800000003F800000003F800000003F800000003F80000
0003F800000003F800000003F800000003F800000003F800000003F800000003F800000003F800
000003F800000003F800000003F800000003F800000003F800000003F800000003F8000003FFFF
F80003FFFFF80022227EA127>I<07FC001FFF803F07C03F03E03F01E03F01F01E01F00001F000
01F0003FF003FDF01FC1F03F01F07E01F0FC01F0FC01F0FC01F0FC01F07E02F07E0CF81FF87F07
E03F18167E951B>97 D<FF000000FF0000001F0000001F0000001F0000001F0000001F0000001F
0000001F0000001F0000001F0000001F0000001F0000001F0FE0001F3FF8001FF07C001F801E00
1F001F001F000F801F000F801F000FC01F000FC01F000FC01F000FC01F000FC01F000FC01F000F
C01F000FC01F000F801F001F801F801F001FC03E001EE07C001C3FF800180FC0001A237EA21F>
I<00FF8007FFE00F83F01F03F03E03F07E03F07C01E07C0000FC0000FC0000FC0000FC0000FC00
00FC00007C00007E00007E00003E00301F00600FC0E007FF8000FE0014167E9519>I<0001FE00
0001FE0000003E0000003E0000003E0000003E0000003E0000003E0000003E0000003E0000003E
0000003E0000003E0001FC3E0007FFBE000F81FE001F007E003E003E007E003E007C003E00FC00
3E00FC003E00FC003E00FC003E00FC003E00FC003E00FC003E00FC003E007C003E007C003E003E
007E001E00FE000F83BE0007FF3FC001FC3FC01A237EA21F>I<00FE0007FF800F87C01E01E03E
01F07C00F07C00F8FC00F8FC00F8FFFFF8FFFFF8FC0000FC0000FC00007C00007C00007E00003E
00181F00300FC07003FFC000FF0015167E951A>I<003F8000FFC001E3E003C7E007C7E00F87E0
0F83C00F80000F80000F80000F80000F80000F8000FFFC00FFFC000F80000F80000F80000F8000
0F80000F80000F80000F80000F80000F80000F80000F80000F80000F80000F80000F80000F8000
0F80007FF8007FF80013237FA211>I<03FC1E0FFF7F1F0F8F3E07CF3C03C07C03E07C03E07C03
E07C03E07C03E03C03C03E07C01F0F801FFF0013FC003000003000003800003FFF801FFFF00FFF
F81FFFFC3800FC70003EF0001EF0001EF0001EF0001E78003C7C007C3F01F80FFFE001FF001821
7E951C>I<FF000000FF0000001F0000001F0000001F0000001F0000001F0000001F0000001F00
00001F0000001F0000001F0000001F0000001F07E0001F1FF8001F307C001F403C001F803E001F
803E001F003E001F003E001F003E001F003E001F003E001F003E001F003E001F003E001F003E00
1F003E001F003E001F003E001F003E001F003E00FFE1FFC0FFE1FFC01A237EA21F>I<1C003E00
7F007F007F003E001C000000000000000000000000000000FF00FF001F001F001F001F001F001F
001F001F001F001F001F001F001F001F001F001F001F001F00FFE0FFE00B247EA310>I<003800
7C00FE00FE00FE007C0038000000000000000000000000000003FE03FE003E003E003E003E003E
003E003E003E003E003E003E003E003E003E003E003E003E003E003E003E003E003E003E783EFC
3EFC3CFC7C78F87FE01F800F2E83A311>I<FF00FF001F001F001F001F001F001F001F001F001F
001F001F001F001F001F001F001F001F001F001F001F001F001F001F001F001F001F001F001F00
1F001F001F00FFE0FFE00B237EA210>108 D<FF07F007F000FF1FFC1FFC001F303E303E001F40
3E403E001F801F801F001F801F801F001F001F001F001F001F001F001F001F001F001F001F001F
001F001F001F001F001F001F001F001F001F001F001F001F001F001F001F001F001F001F001F00
1F001F001F001F001F001F001F001F001F001F001F00FFE0FFE0FFE0FFE0FFE0FFE02B167E9530
>I<FF07E000FF1FF8001F307C001F403C001F803E001F803E001F003E001F003E001F003E001F
003E001F003E001F003E001F003E001F003E001F003E001F003E001F003E001F003E001F003E00
1F003E00FFE1FFC0FFE1FFC01A167E951F>I<00FE0007FFC00F83E01E00F03E00F87C007C7C00
7C7C007CFC007EFC007EFC007EFC007EFC007EFC007EFC007E7C007C7C007C3E00F81F01F00F83
E007FFC000FE0017167E951C>I<FF0FE000FF3FF8001FF07C001F803E001F001F001F001F801F
001F801F000FC01F000FC01F000FC01F000FC01F000FC01F000FC01F000FC01F000FC01F001F80
1F001F801F803F001FC03E001FE0FC001F3FF8001F0FC0001F0000001F0000001F0000001F0000
001F0000001F0000001F0000001F000000FFE00000FFE000001A207E951F>I<00FE030007FF87
000FC1C7001F006F003F003F007E003F007E001F007C001F00FC001F00FC001F00FC001F00FC00
1F00FC001F00FC001F00FC001F007E001F007E001F003E003F001F007F000FC1DF0007FF9F0001
FC1F0000001F0000001F0000001F0000001F0000001F0000001F0000001F0000001F000000FFE0
0000FFE01B207E951E>I<FE1F00FE3FC01E67E01EC7E01E87E01E87E01F83C01F00001F00001F
00001F00001F00001F00001F00001F00001F00001F00001F00001F00001F0000FFF000FFF00013
167E9517>I<0FF3003FFF00781F00600700E00300E00300F00300FC00007FE0007FF8003FFE00
0FFF0001FF00000F80C00780C00380E00380E00380F00700FC0E00EFFC00C7F00011167E9516>
I<0180000180000180000180000380000380000780000780000F80003F8000FFFF00FFFF000F80
000F80000F80000F80000F80000F80000F80000F80000F80000F80000F80000F81800F81800F81
800F81800F81800F830007C30003FE0000F80011207F9F16>I<FF01FE00FF01FE001F003E001F
003E001F003E001F003E001F003E001F003E001F003E001F003E001F003E001F003E001F003E00
1F003E001F003E001F003E001F003E001F007E001F00FE000F81BE0007FF3FC001FC3FC01A167E
951F>I<FFE01FE0FFE01FE00F8006000F8006000FC00E0007C00C0007E01C0003E0180003E018
0001F0300001F0300000F8600000F86000007CC000007CC000007FC000003F8000003F8000001F
0000001F0000000E0000000E00001B167F951E>I<FFE7FF07F8FFE7FF07F81F007800C00F8078
01800F807C01800F807C018007C07E030007C0DE030007E0DE070003E0DF060003E18F060001F1
8F0C0001F38F8C0001FB079C0000FB07D80000FE03D800007E03F000007E03F000007C01F00000
3C01E000003800E000001800C00025167F9528>I E /Fl 37 122 df<000E00001E00007E0007
FE00FFFE00FFFE00F8FE0000FE0000FE0000FE0000FE0000FE0000FE0000FE0000FE0000FE0000
FE0000FE0000FE0000FE0000FE0000FE0000FE0000FE0000FE0000FE0000FE0000FE0000FE0000
FE0000FE0000FE0000FE0000FE0000FE0000FE007FFFFE7FFFFE7FFFFE17277BA622>49
D<00FF800003FFF0000FFFFC001F03FE003800FF007C007F80FE003FC0FF003FC0FF003FE0FF00
1FE0FF001FE07E001FE03C003FE000003FE000003FC000003FC000007F8000007F000000FE0000
00FC000001F8000003F0000003E00000078000000F0000001E0000003C00E0007000E000E000E0
01C001C0038001C0070001C00FFFFFC01FFFFFC03FFFFFC07FFFFFC0FFFFFF80FFFFFF80FFFFFF
801B277DA622>I<007F800003FFF00007FFFC000F81FE001F00FF003F80FF003F807F803F807F
803F807F801F807F800F007F800000FF000000FF000000FE000001FC000001F8000007F00000FF
C00000FFF0000001FC0000007E0000007F0000007F8000003FC000003FC000003FE000003FE03C
003FE07E003FE0FF003FE0FF003FE0FF003FC0FF007FC07E007F807C007F003F01FE001FFFFC00
07FFF00000FF80001B277DA622>I<00000E0000001E0000003E0000007E000000FE000000FE00
0001FE000003FE0000077E00000E7E00000E7E00001C7E0000387E0000707E0000E07E0000E07E
0001C07E0003807E0007007E000E007E000E007E001C007E0038007E0070007E00E0007E00FFFF
FFF8FFFFFFF8FFFFFFF80000FE000000FE000000FE000000FE000000FE000000FE000000FE0000
00FE00007FFFF8007FFFF8007FFFF81D277EA622>I<0C0003000F803F000FFFFE000FFFFC000F
FFF8000FFFF0000FFFE0000FFFC0000FFE00000E0000000E0000000E0000000E0000000E000000
0E0000000E7FC0000FFFF8000F80FC000E003E000C003F0000001F8000001FC000001FC000001F
E000001FE018001FE07C001FE0FE001FE0FE001FE0FE001FE0FE001FC0FC001FC078003F807800
3F803C007F001F01FE000FFFF80003FFF00000FF80001B277DA622>I<0007F000003FFC0000FF
FE0001FC0F0003F01F8007E03F800FC03F801FC03F801F803F803F801F003F8000007F0000007F
0000007F000000FF000000FF0FC000FF3FF800FF707C00FFC03E00FFC03F00FF801F80FF801FC0
FF001FC0FF001FE0FF001FE0FF001FE07F001FE07F001FE07F001FE07F001FE03F001FE03F001F
C01F801FC01F803F800FC03F0007E07E0003FFFC0000FFF000003FC0001B277DA622>I<380000
003E0000003FFFFFF03FFFFFF03FFFFFF07FFFFFE07FFFFFC07FFFFF807FFFFF0070000E007000
0E0070001C00E0003800E0007000E000E0000000E0000001C00000038000000780000007800000
0F0000000F0000001F0000001F0000003F0000003E0000003E0000007E0000007E0000007E0000
007E000000FE000000FE000000FE000000FE000000FE000000FE000000FE000000FE0000007C00
00003800001C297CA822>I<000003800000000007C00000000007C0000000000FE0000000000F
E0000000000FE0000000001FF0000000001FF0000000003FF8000000003FF8000000003FF80000
000073FC0000000073FC00000000F3FE00000000E1FE00000000E1FE00000001C0FF00000001C0
FF00000003C0FF80000003807F80000007807FC0000007003FC0000007003FC000000E003FE000
000E001FE000001E001FF000001C000FF000001FFFFFF000003FFFFFF800003FFFFFF800007800
07FC0000700003FC0000700003FC0000E00001FE0000E00001FE0001E00001FF0001C00000FF00
01C00000FF00FFFE001FFFFEFFFE001FFFFEFFFE001FFFFE2F297EA834>65
D<00003FF001800003FFFE0380000FFFFF8780003FF007DF8000FF8001FF8001FE00007F8003FC
00003F8007F000001F800FF000000F801FE0000007801FE0000007803FC0000007803FC0000003
807FC0000003807F80000003807F8000000000FF8000000000FF8000000000FF8000000000FF80
00000000FF8000000000FF8000000000FF8000000000FF8000000000FF80000000007F80000000
007F80000000007FC0000003803FC0000003803FC0000003801FE0000003801FE0000007000FF0
0000070007F000000E0003FC00001E0001FE00003C0000FF8000F800003FF007E000000FFFFFC0
000003FFFF000000003FF8000029297CA832>67 D<FFFFFFF80000FFFFFFFF8000FFFFFFFFE000
03FC001FF80003FC0007FC0003FC0001FE0003FC0000FF0003FC00007F8003FC00003FC003FC00
001FC003FC00001FE003FC00001FE003FC00000FF003FC00000FF003FC00000FF003FC00000FF0
03FC00000FF803FC00000FF803FC00000FF803FC00000FF803FC00000FF803FC00000FF803FC00
000FF803FC00000FF803FC00000FF803FC00000FF803FC00000FF003FC00000FF003FC00000FF0
03FC00001FE003FC00001FE003FC00001FC003FC00003FC003FC00007F8003FC00007F0003FC00
01FE0003FC0003FC0003FC001FF800FFFFFFFFE000FFFFFFFF8000FFFFFFFC00002D297DA835>
I<00007FE003000003FFFC0700001FFFFF0F00003FF00FFF0000FF8001FF0001FE0000FF0003F8
00003F0007F000003F000FF000001F001FE000000F001FE000000F003FC000000F003FC0000007
007FC0000007007F80000007007F8000000000FF8000000000FF8000000000FF8000000000FF80
00000000FF8000000000FF8000000000FF8000000000FF8000000000FF8001FFFFF87F8001FFFF
F87F8001FFFFF87FC00000FF003FC00000FF003FC00000FF001FE00000FF001FE00000FF000FF0
0000FF0007F00000FF0003F80000FF0001FE0000FF0000FF8001FF00003FF007BF00001FFFFF1F
000003FFFE0F0000007FF003002D297CA836>71 D<FFFFFCFFFFFCFFFFFC01FE0001FE0001FE00
01FE0001FE0001FE0001FE0001FE0001FE0001FE0001FE0001FE0001FE0001FE0001FE0001FE00
01FE0001FE0001FE0001FE0001FE0001FE0001FE0001FE0001FE0001FE0001FE0001FE0001FE00
01FE0001FE0001FE0001FE0001FE0001FE00FFFFFCFFFFFCFFFFFC16297EA81A>73
D<FFFFFC0000FFFFFC0000FFFFFC000003FC00000003FC00000003FC00000003FC00000003FC00
000003FC00000003FC00000003FC00000003FC00000003FC00000003FC00000003FC00000003FC
00000003FC00000003FC00000003FC00000003FC00000003FC00000003FC00000003FC00000003
FC00000003FC0001C003FC0001C003FC0001C003FC0001C003FC0003C003FC00038003FC000380
03FC00078003FC00078003FC000F8003FC000F8003FC001F8003FC007F8003FC01FF00FFFFFFFF
00FFFFFFFF00FFFFFFFF0022297DA829>76 D<FFFE0000001FFFC0FFFE0000001FFFC0FFFF0000
003FFFC003FF0000003FF00003FF0000003FF00003BF80000077F00003BF80000077F000039FC0
0000E7F000039FC00000E7F000038FE00001C7F000038FE00001C7F0000387F0000387F0000387
F0000387F0000387F0000387F0000383F8000707F0000383F8000707F0000381FC000E07F00003
81FC000E07F0000380FE001C07F0000380FE001C07F0000380FF003807F00003807F003807F000
03807F003807F00003803F807007F00003803F807007F00003801FC0E007F00003801FC0E007F0
0003800FE1C007F00003800FE1C007F00003800FE1C007F000038007F38007F000038007F38007
F000038003FF0007F000038003FF0007F000038001FE0007F000038001FE0007F000038000FC00
07F000038000FC0007F000FFFE00FC01FFFFC0FFFE007801FFFFC0FFFE007801FFFFC03A297DA8
41>I<FFFFFFF800FFFFFFFF00FFFFFFFFC003FC003FE003FC000FF003FC0007F803FC0007FC03
FC0003FC03FC0003FE03FC0003FE03FC0003FE03FC0003FE03FC0003FE03FC0003FE03FC0003FE
03FC0003FC03FC0007FC03FC0007F803FC000FF003FC003FE003FFFFFF8003FFFFFE0003FC0000
0003FC00000003FC00000003FC00000003FC00000003FC00000003FC00000003FC00000003FC00
000003FC00000003FC00000003FC00000003FC00000003FC00000003FC00000003FC000000FFFF
F00000FFFFF00000FFFFF0000027297DA82F>80 D<FFFFFFE00000FFFFFFFE0000FFFFFFFF8000
03FC007FE00003FC000FF00003FC0007F80003FC0007FC0003FC0003FC0003FC0003FE0003FC00
03FE0003FC0003FE0003FC0003FE0003FC0003FE0003FC0003FE0003FC0003FC0003FC0007F800
03FC0007F80003FC001FE00003FC007FC00003FFFFFE000003FFFFF0000003FC00FC000003FC00
7F000003FC003F800003FC003F800003FC001FC00003FC001FE00003FC001FE00003FC001FE000
03FC001FE00003FC001FE00003FC001FF00003FC001FF00003FC001FF00003FC001FF00703FC00
1FF80703FC000FF80703FC0007F80EFFFFF003FE1CFFFFF001FFF8FFFFF0003FF030297DA834>
82 D<7FFFFFFFFFC07FFFFFFFFFC07FFFFFFFFFC07F803FC03FC07E003FC007C078003FC003C0
78003FC003C070003FC001C0F0003FC001E0F0003FC001E0E0003FC000E0E0003FC000E0E0003F
C000E0E0003FC000E0E0003FC000E000003FC0000000003FC0000000003FC0000000003FC00000
00003FC0000000003FC0000000003FC0000000003FC0000000003FC0000000003FC0000000003F
C0000000003FC0000000003FC0000000003FC0000000003FC0000000003FC0000000003FC00000
00003FC0000000003FC0000000003FC0000000003FC0000000003FC00000007FFFFFE000007FFF
FFE000007FFFFFE0002B287EA730>84 D<01FF800007FFF0000F81F8001FC07E001FC07E001FC0
3F000F803F8007003F8000003F8000003F8000003F80000FFF8000FFFF8007FC3F800FE03F803F
803F803F003F807F003F80FE003F80FE003F80FE003F80FE003F807E007F807F00DF803F839FFC
0FFF0FFC01FC03FC1E1B7E9A21>97 D<001FF80000FFFE0003F01F0007E03F800FC03F801F803F
803F801F007F800E007F0000007F000000FF000000FF000000FF000000FF000000FF000000FF00
0000FF0000007F0000007F0000007F8000003F8001C01F8001C00FC0038007E0070003F01E0000
FFFC00001FE0001A1B7E9A1F>99 D<00003FF80000003FF80000003FF800000003F800000003F8
00000003F800000003F800000003F800000003F800000003F800000003F800000003F800000003
F800000003F800000003F800001FE3F80000FFFBF80003F03FF80007E00FF8000FC007F8001F80
03F8003F8003F8007F0003F8007F0003F8007F0003F800FF0003F800FF0003F800FF0003F800FF
0003F800FF0003F800FF0003F800FF0003F8007F0003F8007F0003F8007F0003F8003F8003F800
1F8003F8000F8007F80007C00FF80003F03BFF8000FFF3FF80003FC3FF80212A7EA926>I<003F
E00001FFF80003F07E0007C01F000F801F801F800F803F800FC07F000FC07F0007C07F0007E0FF
0007E0FF0007E0FFFFFFE0FFFFFFE0FF000000FF000000FF0000007F0000007F0000007F000000
3F8000E01F8000E00FC001C007E0038003F81F0000FFFE00001FF0001B1B7E9A20>I<0007F000
3FFC00FE3E01F87F03F87F03F07F07F07F07F03E07F00007F00007F00007F00007F00007F00007
F000FFFFC0FFFFC0FFFFC007F00007F00007F00007F00007F00007F00007F00007F00007F00007
F00007F00007F00007F00007F00007F00007F00007F00007F00007F00007F00007F0007FFF807F
FF807FFF80182A7EA915>I<00FF81F003FFE7F80FC1FE7C1F80FC7C1F007C383F007E107F007F
007F007F007F007F007F007F007F007F007F007F003F007E001F007C001F80FC000FC1F8001FFF
E00018FF800038000000380000003C0000003E0000003FFFF8001FFFFF001FFFFF800FFFFFC007
FFFFE01FFFFFF03E0007F07C0001F8F80000F8F80000F8F80000F8F80000F87C0001F03C0001E0
1F0007C00FC01F8003FFFE00007FF0001E287E9A22>I<FFE0000000FFE0000000FFE00000000F
E00000000FE00000000FE00000000FE00000000FE00000000FE00000000FE00000000FE0000000
0FE00000000FE00000000FE00000000FE00000000FE07F00000FE1FFC0000FE787E0000FEE03F0
000FF803F0000FF803F8000FF003F8000FF003F8000FE003F8000FE003F8000FE003F8000FE003
F8000FE003F8000FE003F8000FE003F8000FE003F8000FE003F8000FE003F8000FE003F8000FE0
03F8000FE003F8000FE003F8000FE003F8000FE003F800FFFE3FFF80FFFE3FFF80FFFE3FFF8021
2A7DA926>I<07000F801FC03FE03FE03FE01FC00F8007000000000000000000000000000000FF
E0FFE0FFE00FE00FE00FE00FE00FE00FE00FE00FE00FE00FE00FE00FE00FE00FE00FE00FE00FE0
0FE00FE00FE00FE0FFFEFFFEFFFE0F2B7DAA14>I<FFE00000FFE00000FFE000000FE000000FE0
00000FE000000FE000000FE000000FE000000FE000000FE000000FE000000FE000000FE000000F
E000000FE01FFC0FE01FFC0FE01FFC0FE007800FE00F000FE01E000FE03C000FE078000FE0E000
0FE3C0000FE7C0000FEFE0000FFFE0000FFFF0000FF3F8000FE3F8000FC1FC000FC0FE000FC07F
000FC07F000FC03F800FC01FC00FC00FC00FC00FE0FFFC3FFEFFFC3FFEFFFC3FFE1F2A7EA924>
107 D<FFE0FFE0FFE00FE00FE00FE00FE00FE00FE00FE00FE00FE00FE00FE00FE00FE00FE00FE0
0FE00FE00FE00FE00FE00FE00FE00FE00FE00FE00FE00FE00FE00FE00FE00FE00FE00FE00FE00F
E00FE0FFFEFFFEFFFE0F2A7DA914>I<FFC07F800FF000FFC1FFE03FFC00FFC383F0707E000FC6
03F8C07F000FCC01F9803F000FD801FF003F800FF001FE003F800FF001FE003F800FE001FC003F
800FE001FC003F800FE001FC003F800FE001FC003F800FE001FC003F800FE001FC003F800FE001
FC003F800FE001FC003F800FE001FC003F800FE001FC003F800FE001FC003F800FE001FC003F80
0FE001FC003F800FE001FC003F800FE001FC003F800FE001FC003F80FFFE1FFFC3FFF8FFFE1FFF
C3FFF8FFFE1FFFC3FFF8351B7D9A3A>I<FFC07F0000FFC1FFC000FFC787E0000FCE03F0000FD8
03F0000FD803F8000FF003F8000FF003F8000FE003F8000FE003F8000FE003F8000FE003F8000F
E003F8000FE003F8000FE003F8000FE003F8000FE003F8000FE003F8000FE003F8000FE003F800
0FE003F8000FE003F8000FE003F8000FE003F800FFFE3FFF80FFFE3FFF80FFFE3FFF80211B7D9A
26>I<003FE00001FFFC0003F07E000FC01F801F800FC03F800FE03F0007E07F0007F07F0007F0
7F0007F0FF0007F8FF0007F8FF0007F8FF0007F8FF0007F8FF0007F8FF0007F8FF0007F87F0007
F07F0007F03F800FE03F800FE01F800FC00FC01F8007F07F0001FFFC00003FE0001D1B7E9A22>
I<FFE1FE0000FFE7FF8000FFFE07E0000FF803F0000FF001F8000FE000FC000FE000FE000FE000
FF000FE0007F000FE0007F000FE0007F800FE0007F800FE0007F800FE0007F800FE0007F800FE0
007F800FE0007F800FE0007F000FE000FF000FE000FF000FE000FE000FE001FC000FF001F8000F
F803F0000FFE0FE0000FE7FF80000FE1FC00000FE00000000FE00000000FE00000000FE0000000
0FE00000000FE00000000FE00000000FE00000000FE0000000FFFE000000FFFE000000FFFE0000
0021277E9A26>I<FFC1F0FFC7FCFFCE3E0FD87F0FD87F0FF07F0FF03E0FF01C0FE0000FE0000F
E0000FE0000FE0000FE0000FE0000FE0000FE0000FE0000FE0000FE0000FE0000FE0000FE0000F
E000FFFF00FFFF00FFFF00181B7E9A1C>114 D<03FE300FFFF01E03F03800F0700070F00070F0
0070F80070FC0000FFE0007FFE007FFF803FFFE01FFFF007FFF800FFF80003FC0000FC60007CE0
003CF0003CF00038F80038FC0070FF01E0F7FFC0C1FF00161B7E9A1B>I<007000007000007000
00700000F00000F00000F00001F00003F00003F00007F0001FFFF0FFFFF0FFFFF007F00007F000
07F00007F00007F00007F00007F00007F00007F00007F00007F00007F00007F00007F03807F038
07F03807F03807F03807F03803F03803F87001F86000FFC0001F8015267FA51B>I<FFE03FF800
FFE03FF800FFE03FF8000FE003F8000FE003F8000FE003F8000FE003F8000FE003F8000FE003F8
000FE003F8000FE003F8000FE003F8000FE003F8000FE003F8000FE003F8000FE003F8000FE003
F8000FE003F8000FE003F8000FE003F8000FE003F8000FE007F80007E007F80007E00FF80003F0
3BFF8001FFF3FF80003FC3FF80211B7D9A26>I<FFFE7FFC0FFEFFFE7FFC0FFEFFFE7FFC0FFE0F
E007E000E007F003F001C007F003F001C007F807F803C003F807F8038003F807F8038001FC0EFC
070001FC0EFC070001FE1EFC0F0000FE1C7E0E0000FE1C7E0E0000FF383F1E00007F383F1C0000
7F783F3C00003FF01FB800003FF01FB800003FF01FF800001FE00FF000001FE00FF000000FC007
E000000FC007E000000FC007E00000078003C00000078003C0002F1B7F9A32>119
D<FFFE03FF80FFFE03FF80FFFE03FF8007F000700007F000700007F800F00003F800E00003FC01
E00001FC01C00001FC01C00000FE03800000FE038000007F070000007F070000007F8F0000003F
8E0000003FDE0000001FDC0000001FDC0000000FF80000000FF80000000FF800000007F0000000
07F000000003E000000003E000000001C000000001C00000000380000000038000003807800000
7C07000000FE0F000000FE0E000000FE1E000000FE3C0000007C780000003FE00000000FC00000
0021277F9A24>121 D E /Fm 50 125 df<0003FE000E03001C07001806003800003800007000
00700000700000700007FFFC00E01C00E03800E03800E03800E03801C07001C07001C07001C070
01C0E403C0E40380E40380E4038068038030030000070000070000660000E60000CC0000780000
1821819916>12 D<000400180030006000C0008001800300030006000E000C001C001800180038
003000300070007000600060006000E000E000E000C000C000C000C000C0006000600060002000
3000100008000E267B9B10>40 D<00400060002000300010001800180018001800180018001800
18001800180018003800380030003000700070006000E000C000C001C001800380030006000600
0C00180010002000400080000D267F9B10>I<1838783808101020204080050B7D830C>44
D<FF80FF80FF0009037D880E>I<3078F06005047C830C>I<000800180030007001F00E7000E000
E000E000E001C001C001C001C0038003800380038007000700070007000F00FFF00D187C9714>
49 D<007C000186000203000403800483800883801083801083801083801107001207000C0E00
001C000030000060000180000200000C00001001002001003C060067FE00C1FC0080F00011187D
9714>I<03018003FF0003FC0002200004000004000004000004000008000009E0000E18000818
00001C00001C00001C00001C00201C00701C00E0380080300040700040E0002180001E00001118
7C9714>53 D<001F000060800180800303800603800E00001C000018000038000039F000721800
740C00780E00700E00F00E00E00E00E00E00E00E00E01C00E01C0060380060700030C0001F8000
11187C9714>I<003E0000C1000100800200C00600C00600C00E018007030007860003CC0001F0
0001F800067C000C3E00180E00300700600700600700C00600C00600600C006018003070000FC0
0012187D9714>56 D<007C000186000703000E03000C03801C0380380380380380380380380780
380700380F001817000C270007CE00000E00000C00001C00001800E03000E0600080C000C38000
3E000011187C9714>I<0000200000600000600000E00001E00001E00002700002700004700008
7000087000107000107000207000207000407000807000FFF00100380100380200380400380400
380C00381C0038FF01FF181A7E991D>65 D<03FFF800700E00700600700700E00700E00700E007
00E00701C00E01C01C01C03801C07003FFE003807003803803801C07001C07001C07001C07001C
0E00380E00380E00700E00E01C03C0FFFF00181A7D991B>I<000F8200706200C01603801E0700
0C0E000C1C000C18000C380008300008700000700000E00000E00000E00000E00000E00020E000
20E00020E000406000406000803001001006000C180003E000171A7A991B>I<03FFF80000700E
00007007000070030000E0018000E0018000E0018000E001C001C001C001C001C001C001C001C0
01C003800380038003800380038003800300070007000700070007000E0007000C000E001C000E
0038000E0070000E00E0001C038000FFFE00001A1A7D991D>I<03FFFF00700700700300700100
E00100E00100E00100E00101C08001C08001C08001C18003FF0003810003810003810007020007
00040700040700080E00080E00180E00100E00301C00E0FFFFE0181A7D991A>I<000FC1003021
00C01301800F0700060E00060C0006180006380004300004700000700000E00000E00000E00000
E007FEE00070E00070E00070E000706000E06000E03000E01801E00C064003F840181A7A991E>
71 D<03FF1FF800700380007003800070038000E0070000E0070000E0070000E0070001C00E00
01C00E0001C00E0001C00E0003FFFC0003801C0003801C0003801C000700380007003800070038
00070038000E0070000E0070000E0070000E0070001C00E000FFC7FE001D1A7D991D>I<01FF80
00380000380000380000700000700000700000700000E00000E00000E00000E00001C00001C000
01C00001C0000380000380000380000380000700000700000700000700000E0000FFE000111A7E
990F>I<00FFC0000E00000E00000E00001C00001C00001C00001C000038000038000038000038
0000700000700000700000700000E00000E00000E00000E00061C000E1C000E180008380004700
003C0000121A7C9914>I<03FF8000700000700000700000E00000E00000E00000E00001C00001
C00001C00001C0000380000380000380000380000700000700100700100700200E00200E00600E
00400E00C01C0380FFFF80141A7D9918>76 D<03F8001FC00078003C000078003C000078005C00
00B800B80000B800B800009C013800009C013800011C027000011C027000011C047000011C0870
00021C08E000021C10E000021C10E000021C20E000041C41C000041C41C000041C81C000041C81
C000080F038000080F038000080E038000180C038000380C070000FF083FF000221A7D9922>I<
03FFF800701C00700600700700E00700E00700E00700E00701C00E01C00E01C01C01C038038070
03FF800380000380000700000700000700000700000E00000E00000E00000E00001C0000FFC000
181A7D991A>80 D<03FFF000701C00700E00700700E00700E00700E00700E00701C00E01C01C01
C03801C0E003FF800380C00380600380700700700700700700700700700E00E00E00E00E00E10E
00E21C0062FFC03C181A7D991C>82 D<003F100060900180700100700300200600200600200600
2006000007000007C00003F80001FE00007F00000F800003800001800001802001802001806003
00600300600600700C00C8180087E000141A7D9916>I<3FFFFC381C0C201C04401C0440380480
380480380480380400700000700000700000700000E00000E00000E00000E00001C00001C00001
C00001C000038000038000038000038000078000FFF800161A79991B>I<FF87FC3FC03C00E006
001C00E004001C00E004001C01E008001C03E008001C02E010001C04E030001C04E020001C08E0
40001C08E040001C10E080001C10E080001C20E100001C20E100001C40E200001C40E200001C80
E400001D80E400001D00E800001E00F800001E00F000001C00E000001C00E000001800C0000018
00C00000221A789926>87 D<03CC0E2E181C381C301C701CE038E038E038E038C072C072C07260
F261341E180F107C8F14>97 D<01F006080C181838301070006000E000E000E000E000E008E010
602030C01F000D107C8F12>99 D<001F8000038000038000038000070000070000070000070000
0E00000E0003CE000E2E00181C00381C00301C00701C00E03800E03800E03800E03800C07200C0
7200C0720060F2006134001E1800111A7C9914>I<01E006181C08380870087010FFE0E000E000
E000E000E0086010602030C01F000D107C8F12>I<000700001980001B80003B00003000003000
00700000700000700000700007FF0000E00000E00000E00000E00000E00001C00001C00001C000
01C00001C000038000038000038000038000038000070000070000070000660000E40000CC0000
700000112181990C>I<00F300038B800607000E07000C07001C0700380E00380E00380E00380E
00301C00301C00301C00183C0018780007B800003800003800007000607000E0E000C1C0007F00
0011177E8F12>I<1F80000380000380000380000700000700000700000700000E00000E00000E
7C000F86001E07001E07001C07001C0700380E00380E00380E00381C00701C80701C8070388070
3900E01900600E00111A7E9914>I<030706000000000000384C4E8E9C9C1C3838707272E2E464
3808197C980C>I<1F8003800380038007000700070007000E000E000E0E0E131C271C431C801F
003C003F8039C038E070E270E270E270E4E0646038101A7E9912>107 D<3F0707070E0E0E0E1C
1C1C1C3838383870707070E4E4E4E46830081A7D990A>I<307C1E00598663009E0783809E0703
809C0703809C070380380E0700380E0700380E0700380E0E00701C0E40701C0E40701C1C40701C
1C80E0380C80601807001A107C8F1F>I<307C005986009E07009E07009C07009C0700380E0038
0E00380E00381C00701C80701C80703880703900E01900600E0011107C8F16>I<01F006180C0C
180E300E700E600EE00EE00EE00CE01CE018E030606030C01F000F107C8F14>I<030F000590C0
09E0C009C06009C06009C0600380E00380E00380E00380E00701C00701800703800703000E8E00
0E78000E00000E00001C00001C00001C00001C0000FF00001317808F14>I<30F059189E389C18
9C009C0038003800380038007000700070007000E00060000D107C8F10>114
D<03E004300830187018601C001F801FC00FE000E00060E060E06080C041803E000C107D8F10>
I<06000E000E000E000E001C001C00FFC01C0038003800380038007000700070007000E100E100
E100E200640038000A177C960D>I<38064C074E0E8E0E9C0E9C0E1C1C381C381C381C70397039
70393079389A0F0C10107C8F15>I<38184C1C4E1C8E0C9C0C9C0C1C0838083808380870107010
7020304018C00F000E107C8F12>I<380C304C0E384E1C388E1C189C1C189C1C181C3810383810
38381038381070702070702070704030704018B8800F0F0015107C8F19>I<38064C074E0E8E0E
9C0E9C0E1C1C381C381C381C703870387038307838F00F700070006060E0E1C0C18047003C0010
177C8F13>121 D<FFFFFFFFC022017C8927>124 D E /Fn 71 124 df<00FC7C0183C607078E06
07040E07000E07000E07000E07000E07000E0700FFFFF00E07000E07000E07000E07000E07000E
07000E07000E07000E07000E07000E07000E07000E07000E07007F0FF0171A809916>11
D<00FC000182000703000607000E02000E00000E00000E00000E00000E0000FFFF000E07000E07
000E07000E07000E07000E07000E07000E07000E07000E07000E07000E07000E07000E07007F0F
E0131A809915>I<60F0F868080808101020C0050B7D990B>39 D<00800100020004000C000800
18003000300030006000600060006000E000E000E000E000E000E000E000E000E000E000600060
0060006000300030003000180008000C00040002000100008009267D9B0F>I<80004000200010
00180008000C000600060006000300030003000300038003800380038003800380038003800380
038003000300030003000600060006000C0008001800100020004000800009267E9B0F>I<60F0
F07010101020204080040B7D830B>44 D<FFC0FFC00A0280880D>I<60F0F06004047D830B>I<07
8018603030303060186018E01CE01CE01CE01CE01CE01CE01CE01CE01CE01CE01CE01C60186018
70383030186007800E187E9713>48 D<03000700FF000700070007000700070007000700070007
0007000700070007000700070007000700070007000700FFF00C187D9713>I<0F801060203040
38803CC01CE01C401C003C003800380070006000C001800100020004040804100430083FF87FF8
FFF80E187E9713>I<0F8010E02070607870382038007800700070006000C00F8000E000700038
003C003CE03CE03CC03C4038407030E00F800E187E9713>I<00300030007000F000F001700370
027004700C7008701070307020704070C070FFFF00700070007000700070007007FF10187F9713
>I<30183FF03FE03FC02000200020002000200027C03860203000380018001C001C401CE01CE0
1C80184038403030E00F800E187E9713>I<01E006100C1818383038300070006000E000E7C0E8
60F030F018E018E01CE01CE01C601C601C701830183030186007C00E187E9713>I<40007FFE7F
FC7FFC400880108010802000400040008001800180010003000300030003000700070007000700
0700070002000F197E9813>I<078018603030201860186018601870103C303E600F8007C019F0
30F86038401CC00CC00CC00CC00C6008201018600FC00E187E9713>I<07801860303070306018
E018E018E01CE01CE01C601C603C303C185C0F9C001C00180018003870307060604021801F000E
187E9713>I<60F0F060000000000000000060F0F06004107D8F0B>I<000C0000000C0000000C00
00001E0000001E0000003F000000270000002700000043800000438000004380000081C0000081
C0000081C0000100E0000100E00001FFE000020070000200700006007800040038000400380008
001C0008001C001C001E00FF00FFC01A1A7F991D>65 D<FFFF000E01C00E00E00E00700E00780E
00780E00780E00780E00780E00F00E00E00E03C00FFF800E01E00E00700E00780E003C0E003C0E
003C0E003C0E003C0E00380E00780E00F00E01E0FFFF80161A7E991B>I<003F0201C0C603002E
0E001E1C000E1C0006380006780002700002700002F00000F00000F00000F00000F00000F00000
7000027000027800023800041C00041C00080E000803003001C0C0003F00171A7E991C>I<FFFF
000E01C00E00E00E00300E00380E001C0E001C0E000E0E000E0E000F0E000F0E000F0E000F0E00
0F0E000F0E000F0E000F0E000E0E000E0E001E0E001C0E00380E00380E00700E01C0FFFF00181A
7E991D>I<FFFFF00E00700E00300E00100E00180E00080E00080E00080E04000E04000E04000E
0C000FFC000E0C000E04000E04000E04000E00040E00040E00080E00080E00080E00180E00380E
0070FFFFF0161A7E991A>I<FFFFE00E00E00E00600E00200E00300E00100E00100E00100E0400
0E04000E04000E0C000FFC000E0C000E04000E04000E04000E00000E00000E00000E00000E0000
0E00000E00000E0000FFF000141A7E9919>I<003F020001C0C60003002E000E001E001C000E00
1C00060038000600780002007000020070000200F0000000F0000000F0000000F0000000F00000
00F001FFC070000E0070000E0078000E0038000E001C000E001C000E000E000E000300160001C0
6600003F82001A1A7E991E>I<FFE7FF0E00700E00700E00700E00700E00700E00700E00700E00
700E00700E00700E00700FFFF00E00700E00700E00700E00700E00700E00700E00700E00700E00
700E00700E00700E0070FFE7FF181A7E991D>I<FFE00E000E000E000E000E000E000E000E000E
000E000E000E000E000E000E000E000E000E000E000E000E000E000E000E00FFE00B1A7F990E>
I<1FFC00E000E000E000E000E000E000E000E000E000E000E000E000E000E000E000E000E000E0
00E040E0E0E0E0E041C061801E000E1A7D9914>I<FFE07F800E001E000E0018000E0010000E00
20000E0040000E0080000E0100000E0200000E0400000E0800000E1C00000E2E00000E4E00000E
8700000F0380000E0380000E01C0000E00E0000E00E0000E0070000E0070000E0038000E001C00
0E003E00FFE0FF80191A7E991E>I<FFF0000E00000E00000E00000E00000E00000E00000E0000
0E00000E00000E00000E00000E00000E00000E00000E00000E00000E00200E00200E00200E0060
0E00400E00400E00C00E03C0FFFFC0131A7E9918>I<FF0003FC0F0003C00F0003C00B8005C00B
8005C00B8005C009C009C009C009C009C009C008E011C008E011C008E011C0087021C0087021C0
083841C0083841C0083841C0081C81C0081C81C0081C81C0080F01C0080F01C0080F01C0080601
C01C0601C0FF861FFC1E1A7E9923>I<007F000001C1C000070070000E0038001C001C003C001E
0038000E0078000F0070000700F0000780F0000780F0000780F0000780F0000780F0000780F000
0780F000078078000F0078000F0038000E003C001E001C001C000E0038000700700001C1C00000
7F0000191A7E991E>79 D<FFFF000E03C00E00E00E00700E00700E00780E00780E00780E00780E
00700E00700E00E00E03C00FFF000E00000E00000E00000E00000E00000E00000E00000E00000E
00000E00000E0000FFE000151A7E991A>I<007F000001C1C000070070000E0038001C001C003C
001E0038000E0078000F0070000700F0000780F0000780F0000780F0000780F0000780F0000780
F0000780F00007807000070078000F0038000E003C1C1E001C221C000E4138000741F00001E1C0
00007F80800001C0800000C0800000E1800000FF0000007F0000003E0000001C0019217E991E>
I<FFFC00000E0780000E01C0000E00E0000E00F0000E00F0000E00F0000E00F0000E00F0000E00
E0000E01C0000E0780000FFC00000E0600000E0300000E0180000E01C0000E01C0000E01C0000E
01E0000E01E0000E01E0000E01E0800E00F0800E007100FFE03E00191A7E991C>I<0FC2183620
0E6006C006C002C002C002E00070007E003FE01FF807FC003E000E00070003800380038003C002
C006E004D81887E0101A7E9915>I<7FFFFF00701C0700401C0100401C0100C01C0180801C0080
801C0080801C0080001C0000001C0000001C0000001C0000001C0000001C0000001C0000001C00
00001C0000001C0000001C0000001C0000001C0000001C0000001C0000001C0000001C000003FF
E000191A7F991C>I<FFE1FF0E00380E00100E00100E00100E00100E00100E00100E00100E0010
0E00100E00100E00100E00100E00100E00100E00100E00100E00100E0010060020070020030040
01804000C180003E00181A7E991D>I<FF801FC01E000F001C0006000E0004000E000400070008
000700080007000800038010000380100003C0300001C0200001C0200000E0400000E0400000E0
40000070800000708000003900000039000000390000001E0000001E0000001E0000000C000000
0C00001A1A7F991D>I<FF83FF0FF03C007801C01C007800801C007800800E007801000E007801
000E009C010007009C020007009C020007010E020007010E020003810E04000382070400038207
040001C207080001C403880001C403880000E403900000E403900000E801D000007801E0000078
01E000007000E000007000E000003000C0000020004000241A7F9927>I<FF801FE01E0007000E
0006000F000400070008000780080003C0100001C0300001E0200000F040000070400000788000
00388000001D0000001F0000000E0000000E0000000E0000000E0000000E0000000E0000000E00
00000E0000000E0000000E000000FFE0001B1A7F991D>89 D<FEFEC0C0C0C0C0C0C0C0C0C0C0C0
C0C0C0C0C0C0C0C0C0C0C0C0C0C0C0C0C0C0C0C0C0FEFE07257D9B0B>91
D<FEFE060606060606060606060606060606060606060606060606060606060606060606FEFE07
25809B0B>93 D<3F8070C070E020700070007007F01C7030707070E070E071E071E0F171FB1E3C
10107E8F13>97 D<FC00001C00001C00001C00001C00001C00001C00001C00001C00001C00001C
F8001F0E001E07001C03801C01801C01C01C01C01C01C01C01C01C01C01C01C01C03801C03001E
07001B0C0010F000121A7F9915>I<07F80C1C381C30087000E000E000E000E000E000E0007000
300438080C1807E00E107F8F11>I<007E00000E00000E00000E00000E00000E00000E00000E00
000E00000E0003CE000C3E00380E00300E00700E00E00E00E00E00E00E00E00E00E00E00E00E00
600E00700E00381E001C2E0007CFC0121A7F9915>I<07C01C3030187018600CE00CFFFCE000E0
00E000E0006000300438080C1807E00E107F8F11>I<01F0031807380E100E000E000E000E000E
000E00FFC00E000E000E000E000E000E000E000E000E000E000E000E000E000E007FE00D1A8099
0C>I<0FCE187330307038703870387038303018602FC02000600070003FF03FFC1FFE600FC003
C003C003C0036006381C07E010187F8F13>I<FC00001C00001C00001C00001C00001C00001C00
001C00001C00001C00001CF8001D0C001E0E001E0E001C0E001C0E001C0E001C0E001C0E001C0E
001C0E001C0E001C0E001C0E001C0E00FF9FC0121A7F9915>I<18003C003C0018000000000000
00000000000000FC001C001C001C001C001C001C001C001C001C001C001C001C001C001C00FF80
091A80990A>I<018003C003C001800000000000000000000000000FC001C001C001C001C001C0
01C001C001C001C001C001C001C001C001C001C001C001C001C041C0E180E3007E000A2182990C
>I<FC00001C00001C00001C00001C00001C00001C00001C00001C00001C00001C3F801C1E001C
18001C10001C20001C40001DC0001FE0001CE0001C70001C78001C38001C1C001C1E001C1F00FF
3FC0121A7F9914>I<FC001C001C001C001C001C001C001C001C001C001C001C001C001C001C00
1C001C001C001C001C001C001C001C001C001C00FF80091A80990A>I<FC7C1F001D8E63801E07
81C01E0781C01C0701C01C0701C01C0701C01C0701C01C0701C01C0701C01C0701C01C0701C01C
0701C01C0701C01C0701C0FF9FE7F81D107F8F20>I<FCF8001D0C001E0E001E0E001C0E001C0E
001C0E001C0E001C0E001C0E001C0E001C0E001C0E001C0E001C0E00FF9FC012107F8F15>I<07
E01C38300C700E6006E007E007E007E007E007E0076006700E381C1C3807E010107F8F13>I<FC
F8001F0E001E07001C03801C03801C01C01C01C01C01C01C01C01C01C01C01C01C03801C03001E
07001F0C001CF0001C00001C00001C00001C00001C00001C0000FF800012177F8F15>I<03C200
0C2600381E00300E00700E00E00E00E00E00E00E00E00E00E00E00E00E00700E00700E00381E00
1C2E0007CE00000E00000E00000E00000E00000E00000E00007FC012177F8F14>I<FCE01D701E
701E201C001C001C001C001C001C001C001C001C001C001C00FFC00C107F8F0F>I<1F2060E040
20C020C020F0007F003FC01FE000F080708030C030C020F0408F800C107F8F0F>I<0400040004
000C000C001C003C00FFC01C001C001C001C001C001C001C001C001C201C201C201C201C200E40
03800B177F960F>I<FC7E001C0E001C0E001C0E001C0E001C0E001C0E001C0E001C0E001C0E00
1C0E001C0E001C0E001C1E000C2E0007CFC012107F8F15>I<FF1F803C06001C04001C04001E0C
000E08000E080007100007100007900003A00003A00001C00001C00001C00000800011107F8F14
>I<FF3F9F803C0E0700380E06001C1604001C1704001E170C000E2308000E2388000F23980007
4190000741D00003C1E0000380E0000380E0000180C0000100400019107F8F1C>I<FF3F803C1C
001C18000E100007200007600003C00001C00001E00003E000027000043800083800181C00381E
00FC3FC012107F8F14>I<FF1F803C06001C04001C04001E0C000E08000E080007100007100007
900003A00003A00001C00001C00001C000008000008000010000010000E10000E20000E4000078
000011177F8F14>I<7FF86070407040E041C041C00380070007000E081C081C08381070107030
FFF00D107F8F11>I<FFFFC01201808913>I E /Fo 8 117 df<78FCFCFCFC78000000000078FC
FCFCFC7806117D900C>58 D<00030000000780000007800000078000000FC000000FC000001BE0
00001BE000001BE0000031F0000031F0000060F8000060F80000E0FC0000C07C0000C07C000180
3E0001FFFE0003FFFF0003001F0003001F0006000F8006000F800E000FC0FFC07FFCFFC07FFC1E
1A7F9921>65 D<0FF0001C3C003E1E003E0E003E0F001C0F00000F0000FF000FCF003E0F007C0F
00F80F00F80F00F80F00F817007C27E01FC3E013117F9015>97 D<FE0000FE00001E00001E0000
1E00001E00001E00001E00001E00001E7F001FC3C01F00E01E00F01E00781E00781E007C1E007C
1E007C1E007C1E007C1E00781E00781E00F01F00E01D83C0187F00161A7F9919>I<03FC000F0E
001C1F003C1F00781F00780E00F80000F80000F80000F80000F800007800007800003C01801C03
000F060003FC0011117F9014>I<FC78FC9C1D3E1D3E1E3E1E1C1E001E001E001E001E001E001E
001E001E00FFC0FFC00F117F9012>114 D<1FB020704030C030C030F000FF807FE03FF807F800
3CC00CC00CE00CE008F830CFE00E117F9011>I<06000600060006000E000E001E003FF0FFF01E
001E001E001E001E001E001E001E001E181E181E181E181E180F3003E00D187F9711>I
E /Fp 42 123 df<183878380808101020404080050C7D830D>44 D<00020006000C001C007C03
9C0038003800380038007000700070007000E000E000E000E001C001C001C001C0038003800380
03800780FFF00F1C7C9B15>49 D<003E0000C1800101800200C00400C00440C00841C00841C008
41C0088380070380000700000E0001F800003800000C00000C00000E00000E00000E00000E0070
0E00E01C00801C0080380080300040600021C0001F0000121D7C9B15>51
D<000F0000308000C0800183800383800300000600000E00000C00001C00001CF0003B18003C0C
00380C00780C00700E00700E00700E00601C00E01C00E01C00E01C00E03800E03800E070006060
0060C0002180001E0000111D7B9B15>54 D<001E000061000081800180800300C00300C0060180
06018006018007030007860003CC0003F00001F000037800063C00081E00180E00300E00600600
600600600600C00C00C00C00C0180060100060200030C0000F0000121D7C9B15>56
D<0000180000001800000038000000380000007800000078000000B8000001B800000138000002
380000023C0000041C0000041C0000081C0000181C0000101C0000201C0000201C00007FFC0000
401C0000801C0001801C0001001C0002001C0002001C0004000E000C000E001C001E00FF00FFC0
1A1D7E9C1F>65 D<0003F020001E0C60003002E000E003C001C001C0038001C0070000C00E0000
801E0000801C0000803C0000803C000000780000007800000078000000F0000000F0000000F000
0000F0000000F0000400F0000400F0000400F0000800700008007000100038002000180040000C
0180000706000001F800001B1E7A9C1E>67 D<01FFFE00003C0780003801C0003801C0003800E0
003800E0007000F00070007000700070007000F000E000F000E000F000E000F000E000F001C001
E001C001E001C001E001C001C0038003C003800380038007800380070007000E0007001C000700
3800070070000E01C000FFFF00001C1C7D9B1F>I<0003F020001E0C60003002E000E003C001C0
01C0038001C0070000C00E0000801E0000801C0000803C0000803C000000780000007800000078
000000F0000000F0000000F001FFC0F0001E00F0001C00F0001C00F0001C00F0001C0070003800
7000380038003800180078000C0090000707100001F800001B1E7A9C20>71
D<01FFC0003C0000380000380000380000380000700000700000700000700000E00000E00000E0
0000E00001C00001C00001C00001C0000380000380000380000380000700000700000700000700
000F0000FFE000121C7E9B10>73 D<007FF0000780000700000700000700000700000E00000E00
000E00000E00001C00001C00001C00001C00003800003800003800003800007000007000007000
00700060E000E0E000C0C00081C0008380004700003C0000141D7B9B16>I<01FFE0003C000038
0000380000380000380000700000700000700000700000E00000E00000E00000E00001C00001C0
0001C00001C0000380080380080380080380100700100700300700600700E00E03C0FFFFC0151C
7D9B1A>76 D<01FE0007F8003E000780002E000F00002E001700002E001700002E002700004E00
2E00004E004E00004E004E00004E008E00008E011C00008E011C00008E021C00008E021C000107
043800010704380001070838000107103800020710700002072070000207207000020740700004
0740E000040780E000040700E0000C0700E0001C0601E000FF861FFC00251C7D9B25>I<01FFFC
00003C070000380380003801C0003801C0003801C0007003C0007003C0007003C00070038000E0
078000E0070000E00E0000E0380001FFE00001C0000001C0000001C00000038000000380000003
80000003800000070000000700000007000000070000000F000000FFE000001A1C7D9B1C>80
D<01FFF800003C0E00003807000038038000380380003803800070078000700780007007800070
0F0000E00E0000E01C0000E0700000FFC00001C0C00001C0600001C0700001C070000380700003
80700003807000038070000700F0000700F0400700F0400700F0800F007880FFE0790000001E00
1A1D7D9B1E>82 D<000F8400304C00403C00801801001803001803001806001006001006000007
000007000003E00003FC0001FF00007F800007C00001C00001C00000C00000C02000C02000C060
0180600180600300600200F00400CC180083E000161E7D9C17>I<1FFFFFC01C0701C0300E00C0
200E0080600E0080400E0080401C0080801C0080801C0080001C00000038000000380000003800
00003800000070000000700000007000000070000000E0000000E0000000E0000000E0000001C0
000001C0000001C0000001C0000003C000007FFE00001A1C799B1E>I<7FF0FF800F001C000E00
18000E0010000E0010000E0010001C0020001C0020001C0020001C002000380040003800400038
0040003800400070008000700080007000800070008000E0010000E0010000E0010000E0020000
E0020000E0040000E00400006008000030300000104000000F800000191D779B1F>I<FF803FC0
1C000F001C0004001C0008001C0008001C0010001C0010001C0020001C0040001C0040001E0080
000E0080000E0100000E0200000E0200000E0400000E0400000E0800000E1800000E1000000E20
0000072000000740000007C0000007800000070000000700000006000000060000001A1D779B1F
>I<03CC063C0C3C181C3838303870387038E070E070E070E070E0E2C0E2C0E261E462643C380F
127B9115>97 D<3F00070007000E000E000E000E001C001C001C001C0039C03E60383038307038
703870387038E070E070E070E060E0E0C0C0C1C0618063003C000D1D7B9C13>I<01F007080C08
181C3838300070007000E000E000E000E000E000E008E010602030C01F000E127B9113>I<001F
80000380000380000700000700000700000700000E00000E00000E00000E0003DC00063C000C3C
00181C00383800303800703800703800E07000E07000E07000E07000E0E200C0E200C0E20061E4
006264003C3800111D7B9C15>I<01E007100C1018083810701070607F80E000E000E000E000E0
00E0086010602030C01F000D127B9113>I<0003C0000670000C70001C60001C00001C00003800
00380000380000380000380003FF8000700000700000700000700000700000E00000E00000E000
00E00000E00001C00001C00001C00001C00001C000038000038000038000030000030000070000
C60000E60000CC00007800001425819C0D>I<00F3018F030F06070E0E0C0E1C0E1C0E381C381C
381C381C383830383038187818F00F700070007000E000E0C0C0E1C0C3007E00101A7D9113>I<
0FC00001C00001C0000380000380000380000380000700000700000700000700000E78000E8C00
0F0E000E0E001C0E001C0E001C0E001C0E00381C00381C00381C00383800703880703880707080
707100E03200601C00111D7D9C15>I<01800380010000000000000000000000000000001C0026
00470047008E008E000E001C001C001C0038003800710071007100720072003C00091C7C9B0D>
I<1F800380038007000700070007000E000E000E000E001C001C001C001C003800380038003800
7000700070007000E400E400E400E40068003800091D7C9C0B>108 D<3C1E0780266318C04683
A0E04703C0E08E0380E08E0380E00E0380E00E0380E01C0701C01C0701C01C0701C01C07038038
0E0388380E0388380E0708380E0710701C0320300C01C01D127C9122>I<3C3C00264600468700
4707008E07008E07000E07000E07001C0E001C0E001C0E001C1C00381C40381C40383840383880
701900300E0012127C9117>I<01E007180C0C180C380C300E700E700EE01CE01CE01CE018E038
E030E06060C031801E000F127B9115>I<07870004D98008E0C008E0C011C0E011C0E001C0E001
C0E00381C00381C00381C00381800703800703000707000706000E8C000E70000E00000E00001C
00001C00001C00001C00003C0000FF8000131A7F9115>I<3C3C26C2468747078E068E000E000E
001C001C001C001C0038003800380038007000300010127C9112>114 D<01F006080C080C1C18
181C001F001FC00FF007F0007800386030E030C030806060C01F000E127D9111>I<00C001C001
C001C00380038003800380FFE00700070007000E000E000E000E001C001C001C001C0038403840
3840388019000E000B1A7D990E>I<1E0300270700470700470700870E00870E000E0E000E0E00
1C1C001C1C001C1C001C1C003838803838801838801839001C5900078E0011127C9116>I<1E06
270E470E4706870287020E020E021C041C041C041C0818083808181018200C4007800F127C9113
>I<1E01832703874703874703838707018707010E07010E07011C0E021C0E021C0E021C0E0418
0C04181C04181C081C1C100C263007C3C018127C911C>I<070E0019910010E38020E38041C300
41C00001C00001C000038000038000038000038000070200670200E70400CB04008B080070F000
11127D9113>I<1E03270747074707870E870E0E0E0E0E1C1C1C1C1C1C1C1C3838383818381838
1C7007F00070007000E0E0C0E1C0818047003C00101A7C9114>I<038207C20FEC083810080010
00200040008001000200040008081008383067F043E081C00F127D9111>I
E /Fq 19 125 df<0000000C000000000000001E000000000000001E000000000000001E000000
000000003F000000000000003F000000000000003F000000000000007F800000000000007F8000
00000000007F80000000000000FFC0000000000000FFC0000000000000FFC00000000000019FE0
0000000000019FE00000000000039FF00000000000030FF00000000000030FF00000000000070F
F800000000000607F800000000000607F800000000000C07FC00000000000C03FC00000000000C
03FC00000000001803FE00000000001801FE00000000001801FE00000000003000FF0000000000
3000FF00000000003000FF000000000060007F800000000060007F8000000000E0007F80000000
00C0003FC000000000C0003FC000000001C0003FE00000000180001FE00000000180001FE00000
000380001FF000000003FFFFFFF000000003FFFFFFF000000007FFFFFFF800000006000007F800
000006000007F80000000C000007FC0000000C000003FC0000000C000003FC00000018000001FE
00000018000001FE00000018000001FE00000030000000FF00000030000000FF00000070000000
FF800000600000007F800000600000007F800000F00000007FC00003F80000007FC0000FFC0000
01FFE000FFFFC0003FFFFFC0FFFFC0003FFFFFC0FFFFC0003FFFFFC03A3D7DBC41>65
D<FFFFFFFFF8000000FFFFFFFFFF000000FFFFFFFFFFC0000000FFC0003FF00000007F800007FC
0000007F800001FE0000007F8000007F0000007F8000003F8000007F8000001FC000007F800000
0FE000007F80000007F000007F80000007F800007F80000003F800007F80000003FC00007F8000
0001FC00007F80000001FE00007F80000000FE00007F80000000FF00007F80000000FF00007F80
000000FF00007F800000007F80007F800000007F80007F800000007F80007F800000007F80007F
800000007FC0007F800000007FC0007F800000007FC0007F800000007FC0007F800000007FC000
7F800000007FC0007F800000007FC0007F800000007FC0007F800000007FC0007F800000007FC0
007F800000007FC0007F800000007FC0007F800000007F80007F800000007F80007F800000007F
80007F800000007F80007F80000000FF00007F80000000FF00007F80000000FF00007F80000001
FE00007F80000001FE00007F80000001FC00007F80000003F800007F80000003F800007F800000
07F000007F8000000FE000007F8000001FC000007F8000003FC000007F8000007F0000007F8000
01FE0000007F800007FC000000FFC0003FF00000FFFFFFFFFFE00000FFFFFFFFFF000000FFFFFF
FFF80000003A3B7EBA42>68 D<FFFFFFFFFFFF80FFFFFFFFFFFF80FFFFFFFFFFFF8000FFC00001
FF80007F8000003F80007F8000000FC0007F80000007C0007F80000003C0007F80000003C0007F
80000001C0007F80000001C0007F80000000C0007F80000000C0007F80000000C0007F80000000
C0007F80000000E0007F8000000060007F8000300060007F8000300060007F8000300060007F80
00300000007F8000300000007F8000300000007F8000700000007F8000700000007F8000F00000
007F8003F00000007FFFFFF00000007FFFFFF00000007FFFFFF00000007F8003F00000007F8000
F00000007F8000700000007F8000700000007F8000300000007F8000300000007F800030000C00
7F800030000C007F800030000C007F8000300018007F8000000018007F8000000018007F800000
0018007F8000000038007F8000000038007F8000000030007F8000000030007F8000000070007F
8000000070007F80000000F0007F80000000E0007F80000001E0007F80000003E0007F8000000F
E0007F8000003FE000FFC00001FFE0FFFFFFFFFFFFC0FFFFFFFFFFFFC0FFFFFFFFFFFFC0363B7E
BA3B>I<000000FFC0006000000007FFF800600000003FFFFE00E0000000FFC01F01E0000003FE
000783E0000007F80001E3E000000FE0000077E000001F8000003FE000007F0000001FE00000FE
0000000FE00000FC00000007E00001FC00000007E00003F800000003E00007F800000003E00007
F000000001E0000FF000000001E0001FE000000000E0001FE000000000E0003FE000000000E000
3FC000000000E0003FC00000000060007FC00000000060007FC00000000060007F800000000060
007F80000000000000FF80000000000000FF80000000000000FF80000000000000FF8000000000
0000FF80000000000000FF80000000000000FF80000000000000FF80000000000000FF80000000
000000FF80000000000000FF800000000000007F800000FFFFFF807F800000FFFFFF807FC00000
FFFFFF807FC00000007FF0003FC00000001FE0003FC00000001FE0003FE00000001FE0001FE000
00001FE0001FE00000001FE0000FF00000001FE00007F00000001FE00007F80000001FE00003F8
0000001FE00001FC0000001FE00000FE0000001FE00000FE0000001FE000007F0000003FE00000
1FC000003FE000000FE0000067E0000007F80000E7E0000003FE0003C3E0000000FFC01F81E000
00003FFFFE00E000000007FFF8006000000000FFC0000000393D7BBB44>71
D<3FFFFFFFFFFFF83FFFFFFFFFFFF83FFFFFFFFFFFF83FE001FF8007F83F0000FF0001F87C0000
FF00007C780000FF00003C780000FF00003C700000FF00001C700000FF00001C600000FF00000C
600000FF00000C600000FF00000C600000FF00000C600000FF00000CE00000FF00000EC00000FF
000006C00000FF000006C00000FF000006C00000FF000006000000FF000000000000FF00000000
0000FF000000000000FF000000000000FF000000000000FF000000000000FF000000000000FF00
0000000000FF000000000000FF000000000000FF000000000000FF000000000000FF0000000000
00FF000000000000FF000000000000FF000000000000FF000000000000FF000000000000FF0000
00000000FF000000000000FF000000000000FF000000000000FF000000000000FF000000000000
FF000000000000FF000000000000FF000000000000FF000000000000FF000000000000FF000000
000000FF000000000000FF000000000000FF000000000000FF000000000000FF000000000003FF
C00000001FFFFFFFF800001FFFFFFFF800001FFFFFFFF800373B7DBA3E>84
D<003FC0000001FFF8000007C07E00000E001F00001E000F80001F8007C0003FC003E0003FC003
F0003FC003F0003FC001F0001F8001F8000F0001F800000001F800000001F800000001F8000000
01F80000001FF8000007FFF800003FF9F80000FF01F80003F801F80007F001F8000FC001F8001F
8001F8003F8001F8007F0001F8007F0001F8007E0001F80CFE0001F80CFE0001F80CFE0001F80C
FE0003F80CFE0003F80C7E0006F80C7F0006F80C3F000C7C181F80187E380FE0703FF003FFE01F
E0007F800F8026287CA62B>97 D<0003FE00001FFFC0003E01F000F8003801F0003C03E000FC07
C001FE0FC001FE0F8001FE1F8001FE3F0000FC3F0000787F0000007F0000007E0000007E000000
FE000000FE000000FE000000FE000000FE000000FE000000FE000000FE000000FE0000007E0000
007F0000007F0000003F0000033F0000031F8000031F8000060FC0000607C0000C03E0001801F0
003000F800E0007E03C0001FFF000003FC0020287DA626>99 D<0003FC0000001FFF0000007E07
C00000F801E00001E000F00003E000780007C0007C000F80003E001F80003E001F00003F003F00
001F003F00001F007F00001F007E00001F807E00001F80FE00001F80FE00001F80FFFFFFFF80FF
FFFFFF80FE00000000FE00000000FE00000000FE00000000FE000000007E000000007E00000000
7F000000007F000000003F000001803F000001801F800001800F800003000FC000030007C00006
0003E0000C0001F00018000078007000003F01E000000FFF80000001FE000021287EA626>101
D<00003F000001FFC00003E0E0000781F0000F83F8001F07F8003E07F8007E07F8007E03F0007C
01E000FC000000FC000000FC000000FC000000FC000000FC000000FC000000FC000000FC000000
FC000000FC000000FC000000FC000000FC0000FFFFFC00FFFFFC00FFFFFC0000FC000000FC0000
00FC000000FC000000FC000000FC000000FC000000FC000000FC000000FC000000FC000000FC00
0000FC000000FC000000FC000000FC000000FC000000FC000000FC000000FC000000FC000000FC
000000FC000000FC000000FC000000FC000000FC000000FC000000FC000000FC000001FE00007F
FFFC007FFFFC007FFFFC001D3D7FBC1A>I<01F800000000FFF800000000FFF800000000FFF800
00000007F80000000001F80000000001F80000000001F80000000001F80000000001F800000000
01F80000000001F80000000001F80000000001F80000000001F80000000001F80000000001F800
00000001F80000000001F80000000001F80000000001F80000000001F80000000001F807F80000
01F81FFE000001F8781F000001F8E00F800001F98007C00001FB0007E00001FB0003E00001FE00
03F00001FC0003F00001FC0003F00001FC0003F00001F80003F00001F80003F00001F80003F000
01F80003F00001F80003F00001F80003F00001F80003F00001F80003F00001F80003F00001F800
03F00001F80003F00001F80003F00001F80003F00001F80003F00001F80003F00001F80003F000
01F80003F00001F80003F00001F80003F00001F80003F00001F80003F00001F80003F00001F800
03F00003FC0007F800FFFFF1FFFFE0FFFFF1FFFFE0FFFFF1FFFFE02B3C7EBB30>104
D<01C00003E00007F0000FF8000FF8000FF80007F00003E00001C0000000000000000000000000
0000000000000000000000000000000000000000000001F8007FF8007FF8007FF80007F80001F8
0001F80001F80001F80001F80001F80001F80001F80001F80001F80001F80001F80001F80001F8
0001F80001F80001F80001F80001F80001F80001F80001F80001F80001F80001F80001F80001F8
0001F80001F80003FC00FFFFE0FFFFE0FFFFE0133A7FB917>I<01F807F80000FFF81FFE0000FF
F8781F0000FFF8E00F800007F98007C00001FB0007E00001FB0003E00001FE0003F00001FC0003
F00001FC0003F00001FC0003F00001F80003F00001F80003F00001F80003F00001F80003F00001
F80003F00001F80003F00001F80003F00001F80003F00001F80003F00001F80003F00001F80003
F00001F80003F00001F80003F00001F80003F00001F80003F00001F80003F00001F80003F00001
F80003F00001F80003F00001F80003F00001F80003F00001F80003F00001F80003F00003FC0007
F800FFFFF1FFFFE0FFFFF1FFFFE0FFFFF1FFFFE02B267EA530>110 D<0001FE0000000FFFC000
003F03F00000F8007C0001F0003E0003E0001F0007C0000F800F800007C00F800007C01F000003
E03F000003F03F000003F03F000003F07E000001F87E000001F87E000001F8FE000001FCFE0000
01FCFE000001FCFE000001FCFE000001FCFE000001FCFE000001FCFE000001FCFE000001FC7E00
0001F87E000001F87F000003F83F000003F03F000003F01F000003E01F800007E00F800007C007
C0000F8003E0001F0001F0003E0000F8007C00003F03F000000FFFC0000001FE000026287EA62B
>I<01F80FF00000FFF83FFE0000FFF8F01F0000FFF9C007C00003FB0003E00001FE0001F00001
FC0000F80001FC0000FC0001F800007E0001F800007E0001F800007F0001F800003F0001F80000
3F8001F800003F8001F800001F8001F800001FC001F800001FC001F800001FC001F800001FC001
F800001FC001F800001FC001F800001FC001F800001FC001F800001FC001F800001F8001F80000
3F8001F800003F8001F800003F0001F800007F0001F800007E0001F80000FC0001FC0000FC0001
FC0001F80001FE0003F00001FB0007E00001F9C00FC00001F8F03F000001F83FFC000001F80FE0
000001F80000000001F80000000001F80000000001F80000000001F80000000001F80000000001
F80000000001F80000000001F80000000001F80000000001F80000000001F80000000003FC0000
0000FFFFF0000000FFFFF0000000FFFFF00000002A377EA530>I<03F00F80FFF03FE0FFF070F0
FFF0C1F807F183F801F303F801F603F801F601F001F6004001FC000001FC000001FC000001FC00
0001F8000001F8000001F8000001F8000001F8000001F8000001F8000001F8000001F8000001F8
000001F8000001F8000001F8000001F8000001F8000001F8000001F8000001F8000001F8000001
F8000001F8000003FC0000FFFFF800FFFFF800FFFFF8001D267EA522>114
D<007F818003FFE3800F807F801E001F8038000780380007807000038070000380F0000180F000
0180F0000180F8000180F8000180FE0000007F8000007FFC00003FFFC0001FFFF0000FFFFC0003
FFFE0001FFFF00001FFF800000FF8000001FC040000FC0C00007E0C00003E0E00001E0E00001E0
E00001E0E00001E0F00001E0F00001C0F80003C0FC000380FC000700F7000E00E3C03C00C0FFF8
00C03FC0001B287DA622>I<001800000018000000180000001800000018000000380000003800
000038000000380000007800000078000000F8000000F8000001F8000003F8000007F800001FFF
FF00FFFFFF00FFFFFF0001F8000001F8000001F8000001F8000001F8000001F8000001F8000001
F8000001F8000001F8000001F8000001F8000001F8000001F8000001F8000001F8000001F80000
01F8000001F8018001F8018001F8018001F8018001F8018001F8018001F8018001F8018001F801
8000F8018000F8030000FC0300007C0300003E0600001F0C00000FF8000003F00019367EB421>
I<FFFFC07FFF80FFFFC07FFF80FFFFC07FFF8003FF001FF00000FE000FC000007E000F0000007F
000E0000003F001C0000001F80180000001FC0300000000FC07000000007E0E000000003F0C000
000003F98000000001FB8000000000FF00000000007E00000000007F00000000003F0000000000
3F80000000007FC0000000006FE000000000C7E000000001C3F00000000381F80000000301FC00
00000600FC0000000E007E0000001C007F00000018003F00000038001F80000070000FC00001F8
000FE0000FFC001FF000FFFE007FFFC0FFFE007FFFC0FFFE007FFFC02A257FA42D>120
D<FFFFFFFFFFFFFFFFFFFFF8FFFFFFFFFFFFFFFFFFFFF85502809756>124
D E /Fr 76 125 df<007E1F0001C1B1800303E3C00703C3C00E03C1800E01C0000E01C0000E01
C0000E01C0000E01C0000E01C000FFFFFC000E01C0000E01C0000E01C0000E01C0000E01C0000E
01C0000E01C0000E01C0000E01C0000E01C0000E01C0000E01C0000E01C0000E01C0000E01C000
0E01C0007F87FC001A1D809C18>11 D<007E0001C1800301800703C00E03C00E01800E00000E00
000E00000E00000E0000FFFFC00E01C00E01C00E01C00E01C00E01C00E01C00E01C00E01C00E01
C00E01C00E01C00E01C00E01C00E01C00E01C00E01C07F87F8151D809C17>I<003F07E00001C0
9C18000380F018000701F03C000E01E03C000E00E018000E00E000000E00E000000E00E000000E
00E000000E00E00000FFFFFFFC000E00E01C000E00E01C000E00E01C000E00E01C000E00E01C00
0E00E01C000E00E01C000E00E01C000E00E01C000E00E01C000E00E01C000E00E01C000E00E01C
000E00E01C000E00E01C000E00E01C007FC7FCFF80211D809C23>14 D<6060F0F0F8F868680808
08080808101010102020404080800D0C7F9C15>34 D<0F0000C0188000C0306003807038070060
27FB00E0100600E0100C00E0100C00E0101800E0101800E0103000E0106000602060007020C000
30418000188180000F0303C00006062000060C10000C1C08001818080018380400303804006038
040060380400C0380400C03804018038040300180803001C0806000C100C000620040003C01E21
7E9E23>37 D<60F0F8680808081010204080050C7C9C0C>39 D<004000800100020006000C000C
0018001800300030007000600060006000E000E000E000E000E000E000E000E000E000E000E000
E000600060006000700030003000180018000C000C00060002000100008000400A2A7D9E10>I<
800040002000100018000C000C000600060003000300038001800180018001C001C001C001C001
C001C001C001C001C001C001C001C0018001800180038003000300060006000C000C0018001000
2000400080000A2A7E9E10>I<60F0F0701010101020204080040C7C830C>44
D<FFE0FFE00B0280890E>I<60F0F06004047C830C>I<03C00C301818300C300C700E60066006E0
07E007E007E007E007E007E007E007E007E007E007E007E00760066006700E300C300C18180C30
07E0101D7E9B15>48 D<030007003F00C700070007000700070007000700070007000700070007
00070007000700070007000700070007000700070007000F80FFF80D1C7C9B15>I<07C0183020
1C400C400EF00FF80FF807F8077007000F000E000E001C001C00380070006000C0018003000601
0C01180110023FFE7FFEFFFE101C7E9B15>I<07E01830201C201C781E780E781E381E001C001C
00180030006007E00030001C001C000E000F000F700FF80FF80FF80FF00E401C201C183007E010
1D7E9B15>I<000C00000C00001C00003C00003C00005C0000DC00009C00011C00031C00021C00
041C000C1C00081C00101C00301C00201C00401C00C01C00FFFFC0001C00001C00001C00001C00
001C00001C00001C0001FFC0121C7F9B15>I<300C3FF83FF03FC0200020002000200020002000
23E024302818301C200E000E000F000F000F600FF00FF00FF00F800E401E401C2038187007C010
1D7E9B15>I<00F0030C06040C0E181E301E300C700070006000E3E0E430E818F00CF00EE006E0
07E007E007E007E007600760077006300E300C18180C3003E0101D7E9B15>I<4000007FFF807F
FF007FFF0040020080040080040080080000100000100000200000600000400000C00000C00001
C00001800001800003800003800003800003800007800007800007800007800007800007800003
0000111D7E9B15>I<03E00C301008200C20066006600660067006780C3E083FB01FE007F007F8
18FC307E601E600FC007C003C003C003C00360026004300C1C1007E0101D7E9B15>I<03C00C30
1818300C700C600EE006E006E007E007E007E007E0076007700F300F18170C2707C70006000600
0E300C780C78187010203030C00F80101D7E9B15>I<60F0F0600000000000000000000060F0F0
6004127C910C>I<7FFFFFC0FFFFFFE00000000000000000000000000000000000000000000000
000000000000000000FFFFFFE07FFFFFC01B0C7E8F20>61 D<003F800000C06000030018000400
04000800020010000100201F00802070808040E0404040C0384041C03840818038208380382083
8038208380382083803820838038208180382041C0382040C0384040E0784020709880201F0F00
100000000800000004000000030001E000C01F80003FF0001B1D7E9C20>64
D<000600000006000000060000000F0000000F0000000F00000017800000178000001780000023
C0000023C0000023C0000041E0000041E0000041E0000080F0000080F0000180F8000100780001
FFF80003007C0002003C0002003C0006003E0004001E0004001E000C001F001E001F00FF80FFF0
1C1D7F9C1F>I<FFFFC00F00F00F00380F003C0F001C0F001E0F001E0F001E0F001E0F001C0F00
3C0F00780F01F00FFFE00F00780F003C0F001E0F000E0F000F0F000F0F000F0F000F0F000F0F00
1E0F001E0F003C0F0078FFFFE0181C7E9B1D>I<001F808000E0618001801980070007800E0003
801C0003801C00018038000180780000807800008070000080F0000000F0000000F0000000F000
0000F0000000F0000000F0000000F0000000700000807800008078000080380000801C0001001C
0001000E000200070004000180080000E03000001FC000191E7E9C1E>I<FFFFC0000F00F0000F
003C000F000E000F0007000F0007000F0003800F0003C00F0001C00F0001C00F0001E00F0001E0
0F0001E00F0001E00F0001E00F0001E00F0001E00F0001E00F0001C00F0001C00F0003C00F0003
800F0007800F0007000F000E000F001C000F007000FFFFC0001B1C7E9B20>I<FFFFFC0F003C0F
000C0F00040F00040F00060F00020F00020F02020F02000F02000F02000F06000FFE000F06000F
02000F02000F02000F02010F00010F00020F00020F00020F00060F00060F000C0F003CFFFFFC18
1C7E9B1C>I<FFFFF80F00780F00180F00080F00080F000C0F00040F00040F02040F02000F0200
0F02000F06000FFE000F06000F02000F02000F02000F02000F00000F00000F00000F00000F0000
0F00000F00000F8000FFF800161C7E9B1B>I<001F808000E0618001801980070007800E000380
1C0003801C00018038000180780000807800008070000080F0000000F0000000F0000000F00000
00F0000000F0000000F000FFF0F0000F80700007807800078078000780380007801C0007801C00
07800E00078007000B800180118000E06080001F80001C1E7E9C21>I<FFF3FFC00F003C000F00
3C000F003C000F003C000F003C000F003C000F003C000F003C000F003C000F003C000F003C000F
003C000FFFFC000F003C000F003C000F003C000F003C000F003C000F003C000F003C000F003C00
0F003C000F003C000F003C000F003C000F003C00FFF3FFC01A1C7E9B1F>I<FFF00F000F000F00
0F000F000F000F000F000F000F000F000F000F000F000F000F000F000F000F000F000F000F000F
000F000F000F00FFF00C1C7F9B0F>I<1FFF00F800780078007800780078007800780078007800
780078007800780078007800780078007800787078F878F878F878F0F040E021C01F00101D7F9B
15>I<FFF8000F80000F00000F00000F00000F00000F00000F00000F00000F00000F00000F0000
0F00000F00000F00000F00000F00000F00000F00080F00080F00080F00180F00180F00100F0030
0F00700F01F0FFFFF0151C7E9B1A>76 D<FF8000FF800F8000F8000F8000F8000BC00178000BC0
0178000BC001780009E002780009E002780008F004780008F004780008F0047800087808780008
780878000878087800083C107800083C107800083C107800081E207800081E207800081E207800
080F407800080F40780008078078000807807800080780780008030078001C03007800FF8307FF
80211C7E9B26>I<FF007FC00F800E000F8004000BC0040009E0040009E0040008F0040008F804
0008780400083C0400083C0400081E0400080F0400080F0400080784000807C4000803C4000801
E4000801E4000800F40008007C0008007C0008003C0008003C0008001C0008000C001C000C00FF
8004001A1C7E9B1F>I<003F800000E0E0000380380007001C000E000E001C0007003C00078038
000380780003C0780003C0700001C0F00001E0F00001E0F00001E0F00001E0F00001E0F00001E0
F00001E0F00001E0700001C0780003C0780003C0380003803C0007801C0007000E000E0007001C
000380380000E0E000003F80001B1E7E9C20>I<FFFF800F00E00F00780F003C0F001C0F001E0F
001E0F001E0F001E0F001E0F001C0F003C0F00780F00E00FFF800F00000F00000F00000F00000F
00000F00000F00000F00000F00000F00000F00000F0000FFF000171C7E9B1C>I<003F800000E0
E0000380380007001C000E000E001C0007003C00078038000380780003C0780003C0700001C0F0
0001E0F00001E0F00001E0F00001E0F00001E0F00001E0F00001E0F00001E0700001C0780003C0
780003C0380003803C0E07801C1107000E208E000720DC0003A0F80000F0E020003FE020000060
2000007060000078E000003FC000003FC000001F8000000F001B257E9C20>I<FFFF00000F01E0
000F0078000F003C000F001C000F001E000F001E000F001E000F001E000F001C000F003C000F00
78000F01E0000FFF00000F03C0000F00E0000F00F0000F0078000F0078000F0078000F0078000F
0078000F0078000F0078100F0078100F0038100F003C20FFF01C20000007C01C1D7E9B1F>I<07
E0801C1980300580700380600180E00180E00080E00080E00080F00000F800007C00007FC0003F
F8001FFE0007FF0000FF80000F800007C00003C00001C08001C08001C08001C0C00180C00180E0
0300D00200CC0C0083F800121E7E9C17>I<7FFFFFC0700F01C0600F00C0400F0040400F0040C0
0F0020800F0020800F0020800F0020000F0000000F0000000F0000000F0000000F0000000F0000
000F0000000F0000000F0000000F0000000F0000000F0000000F0000000F0000000F0000000F00
00000F0000001F800003FFFC001B1C7F9B1E>I<FFE00FF01F0003C00F0001800F0001000F8003
00078002000780020003C0040003C0040003C0040001E0080001E0080001F0080000F0100000F0
100000F830000078200000782000003C4000003C4000003C4000001E8000001E8000001F800000
0F0000000F00000006000000060000000600001C1D7F9B1F>86 D<FFE0FFE0FF1F001F003C1E00
1E00180F001F00100F001F00100F001F001007801F00200780278020078027802003C027804003
C043C04003C043C04003E043C04001E081E08001E081E08001E081E08000F100F10000F100F100
00F100F100007900FA00007A007A00007A007A00003E007C00003C003C00003C003C00003C003C
00001800180000180018000018001800281D7F9B2B>I<7FFFF07C01F07001E06003C06003C040
0780400F80400F00401E00001E00003C00007C0000780000F00000F00001E00003E00003C01007
80100780100F00101F00301E00203C00203C00607800E0F803E0FFFFE0141C7E9B19>90
D<FEFEC0C0C0C0C0C0C0C0C0C0C0C0C0C0C0C0C0C0C0C0C0C0C0C0C0C0C0C0C0C0C0C0C0C0C0C0
C0FEFE07297C9E0C>I<08081010202040404040808080808080B0B0F8F8787830300D0C7A9C15>
I<FEFE060606060606060606060606060606060606060606060606060606060606060606060606
06FEFE0729809E0C>I<1FC000307000783800781C00301C00001C00001C0001FC000F1C00381C
00701C00601C00E01C40E01C40E01C40603C40304E801F870012127E9115>97
D<FC00001C00001C00001C00001C00001C00001C00001C00001C00001C00001C00001C7C001D86
001E03001C01801C01C01C00C01C00E01C00E01C00E01C00E01C00E01C00E01C00C01C01C01C01
801E030019060010F800131D7F9C17>I<07E00C301878307870306000E000E000E000E000E000
E00060007004300418080C3007C00E127E9112>I<003F00000700000700000700000700000700
00070000070000070000070000070003E7000C1700180F00300700700700600700E00700E00700
E00700E00700E00700E00700600700700700300700180F000C370007C7E0131D7E9C17>I<03E0
0C301818300C700E6006E006FFFEE000E000E000E00060007002300218040C1803E00F127F9112
>I<00F8018C071E061E0E0C0E000E000E000E000E000E00FFE00E000E000E000E000E000E000E
000E000E000E000E000E000E000E000E000E007FE00F1D809C0D>I<00038003C4C00C38C01C38
80181800381C00381C00381C00381C001818001C38000C300013C0001000003000001800001FF8
001FFF001FFF803003806001C0C000C0C000C0C000C06001803003001C0E0007F800121C7F9215
>I<FC00001C00001C00001C00001C00001C00001C00001C00001C00001C00001C00001C7C001C
87001D03001E03801C03801C03801C03801C03801C03801C03801C03801C03801C03801C03801C
03801C03801C0380FF9FF0141D7F9C17>I<18003C003C00180000000000000000000000000000
00FC001C001C001C001C001C001C001C001C001C001C001C001C001C001C001C001C00FF80091D
7F9C0C>I<00C001E001E000C000000000000000000000000000000FE000E000E000E000E000E0
00E000E000E000E000E000E000E000E000E000E000E000E000E000E000E060E0F0C0F1C061803E
000B25839C0D>I<FC00001C00001C00001C00001C00001C00001C00001C00001C00001C00001C
00001C3FC01C0F001C0C001C08001C10001C20001C40001CE0001DE0001E70001C78001C38001C
3C001C1C001C0E001C0F001C0F80FF9FE0131D7F9C16>I<FC001C001C001C001C001C001C001C
001C001C001C001C001C001C001C001C001C001C001C001C001C001C001C001C001C001C001C00
1C00FF80091D7F9C0C>I<FC7E07E0001C838838001D019018001E01E01C001C01C01C001C01C0
1C001C01C01C001C01C01C001C01C01C001C01C01C001C01C01C001C01C01C001C01C01C001C01
C01C001C01C01C001C01C01C001C01C01C00FF8FF8FF8021127F9124>I<FC7C001C87001D0300
1E03801C03801C03801C03801C03801C03801C03801C03801C03801C03801C03801C03801C0380
1C0380FF9FF014127F9117>I<03F0000E1C00180600300300700380600180E001C0E001C0E001
C0E001C0E001C0E001C06001807003803003001806000E1C0003F00012127F9115>I<FC7C001D
86001E03001C01801C01C01C00C01C00E01C00E01C00E01C00E01C00E01C00E01C01C01C01C01C
01801E03001D06001CF8001C00001C00001C00001C00001C00001C00001C0000FF8000131A7F91
17>I<03C1000C3300180B00300F00700700700700E00700E00700E00700E00700E00700E00700
600700700700300F00180F000C370007C700000700000700000700000700000700000700000700
003FE0131A7E9116>I<FCE01D301E781E781C301C001C001C001C001C001C001C001C001C001C
001C001C00FFC00D127F9110>I<1F9030704030C010C010E010F8007F803FE00FF000F8803880
18C018C018E010D0608FC00D127F9110>I<04000400040004000C000C001C003C00FFE01C001C
001C001C001C001C001C001C001C001C101C101C101C101C100C100E2003C00C1A7F9910>I<FC
1F801C03801C03801C03801C03801C03801C03801C03801C03801C03801C03801C03801C03801C
03801C07800C07800E1B8003E3F014127F9117>I<FF07E03C03801C01001C01000E02000E0200
07040007040007040003880003880003D80001D00001D00000E00000E00000E00000400013127F
9116>I<FF3FCFE03C0F03801C0701801C0701001C0B01000E0B82000E0B82000E1182000711C4
000711C4000720C40003A0E80003A0E80003C0680001C0700001C0700001803000008020001B12
7F911E>I<7F8FF00F03800F030007020003840001C80001D80000F00000700000780000F80000
9C00010E00020E000607000403801E07C0FF0FF81512809116>I<FF07E03C03801C01001C0100
0E02000E020007040007040007040003880003880003D80001D00001D00000E00000E00000E000
004000004000008000008000F08000F10000F300006600003C0000131A7F9116>I<7FFC703860
38407040F040E041C003C0038007000F040E041C043C0C380870087038FFF80E127F9112>I<FF
FFFFFFFF802901808B2A>124 D E end
%%EndProlog
%%BeginSetup
%%Feature: *Resolution 300
TeXDict begin @a4
%%EndSetup
%%Page: 1 1
bop 735 77 a Fr(DRAFT)13 b(|)h(15th)f(Dec)i(1992)742 127 y(\(C\))f(Jonathan)g
(Oliv)o(er)f(1992)454 177 y(Shortened)i(v)o(ersion)f(to)g(app)q(ear)g(in)g
(AI)f(and)h(Statistics)h(1993[14)n(])3 327 y Fq(Decision)31
b(Graphs)c(|)i(An)f(Extension)i(of)f(Decision)i(T)-7 b(rees)0
438 y Fr(JONA)m(THAN)15 b(J.)e(OLIVER)924 b(\(jono@molly)m(.)o(cs.m)o
(onash.edu.au\))0 488 y Fp(Dep)n(artment)15 b(of)g(Computer)f(Scienc)n(e)0
538 y(Monash)i(University)0 588 y(Clayton,)f(Victoria,)e(3168,)j(A)o
(USTRALIA)0 700 y Fo(Abstract:)38 b Fn(In)13 b(this)h(pap)q(er,)f(w)o(e)f
(examine)27 b Fm(De)n(cision)11 b(Gr)n(aphs)p Fn(,)g(a)i(generalization)j(of)
d(decision)i(trees.)i(W)m(e)c(presen)o(t)g(an)h(inference)0
750 y(sc)o(heme)j(to)g(construct)h(decision)h(graphs)f(using)h(the)e(Minim)o
(um)i(Message)f(Length)g(Principle.)31 b(Empirical)20 b(tests)d(demonstrate)0
799 y(that)e(this)h(sc)o(heme)g(compares)g(fa)o(v)o(ourably)h(with)f(other)f
(decision)j(tree)d(inference)h(sc)o(hemes.)24 b(This)16 b(w)o(ork)f(pro)o
(vides)i(a)e(metric)h(for)0 849 y(comparing)f(the)e(relativ)o(e)i(merit)e(of)
g(the)g(decision)i(tree)e(and)h(decision)h(graph)f(formalisms)h(for)d(a)h
(particular)j(domain.)0 985 y Fl(1)69 b(In)n(tro)r(duction)0
1076 y Fr(In)12 b(this)h(pap)q(er,)g(w)o(e)f(examine)f(the)i(problem)e(of)h
(inferring)g(a)g(decision)g(pro)q(cedure)i(from)d(a)h(set)h(of)f(examples.)k
(W)m(e)c(examine)0 1126 y(the)k(decision)g(graph)g([5)o(,)f(1,)g(16)o(,)g
(15,)g(14],)g(a)g(generalization)g(of)g(the)h(decision)g(tree)h([3)o(,)e
(18],)g(and)g(prop)q(ose)i(a)e(metho)q(d)g(to)0 1175 y(construct)i(decision)e
(graphs)h(based)g(up)q(on)f(W)m(allace's)f(Minim)o(um)d(Message)17
b(Length)e(Principle)h(\(MMLP\))f([23)o(,)g(10,)f(24].)0 1225
y(The)e(MMLP)g(is)g(related)g(to)g(Rissanen's)g(Minim)o(um)c(Description)k
(Length)g(Principle)g(\(MDLP\))f([21)o(,)h(20)o(].)17 b(F)m(or)11
b(the)i(reader)0 1275 y(unfamiliar)e(with)i(minim)n(um)d(enco)q(ding)k(metho)
q(ds)f(\(MML)h(and)g(MDL\),)f(a)g(go)q(o)q(d)h(in)o(tro)q(duction)f(to)h(the)
g(area)g(is)g(giv)o(en)f(b)o(y)0 1325 y(George\013)h([10)o(].)62
1375 y(W)m(e)20 b(formalize)d(the)k(problem)d(of)i(inferring)f(a)g(decision)h
(pro)q(cedure)i(from)c(a)i(set)g(of)g(examples)e(as)i(follo)o(ws.)35
b(The)0 1424 y(giv)o(en)17 b(data)g(represen)o(ts)j(a)d(set)h(of)f(ob)r
(jects.)29 b(Eac)o(h)18 b(ob)r(ject)g(is)f(describ)q(ed)i(in)e(terms)g(of)g
(the)h(indep)q(enden)o(t)g(v)n(ariables)f(or)0 1474 y(\\attributes".)h(Eac)o
(h)11 b(ob)r(ject)h(has)f(a)g(class)h(or)f(\\dep)q(enden)o(t)h(v)n(ariable")e
(asso)q(ciated)i(with)f(it.)17 b(The)11 b(data)g(consists)h(of)f(v)o(ectors)0
1524 y(that)j(giv)o(e)f(v)n(alues)h(for)f(the)i(attributes)g(and)e(class)i
(of)e(eac)o(h)h(ob)r(ject.)62 1574 y(The)j(ob)r(ject)g(of)f(sup)q(ervised)i
(learning)e(is)g(to)h(\014nd,)g(within)e(a)h(sp)q(eci\014ed)i(family)c(of)i
(functions,)g(the)h(function)g(of)e(the)0 1624 y(attributes)h(that)e(b)q(est)
i(predicts)g(the)g(class)f(of)f(an)g(ob)r(ject.)22 b(W)m(e)14
b(will)f(consider)j(the)f(giv)o(en)f(data)h(as)g(a)29 b Fp(tr)n(aining)15
b(set)30 b Fr(and)0 1673 y(from)12 b(this)j(data)e(determine)h(the)h
(function)f(that)g(has)h(the)f(highest)h(c)o(hance)g(of)e(accurately)i
(predicting)g(the)f(class)h(of)f(new)0 1723 y(ob)r(jects.)23
b(The)16 b(functions)f(w)o(e)g(wish)h(to)f(consider)h(are)f(those)h(that)g
(partition)e(the)i(set)g(of)e(ob)r(jects)j(in)o(to)d(categories,)i(suc)o(h)0
1773 y(that,)d(as)h(nearly)g(as)g(p)q(ossible,)g(all)f(ob)r(jects)i(in)e(a)h
(category)g(ha)o(v)o(e)g(the)g(same)f(class.)62 1823 y(In)20
b(the)h(next)g(section,)h(w)o(e)e(presen)o(t)i(an)e(o)o(v)o(erview)g(of)f
(decision)h(trees)i(and)e(then)h(examine)e(the)h(decision)h(graph.)0
1873 y(W)m(e)c(argue)g(that)g(some)f(decision)h(functions)g(are)g(more)f
(simply)f(describ)q(ed)k(b)o(y)e(decision)g(graphs)g(than)g(decision)g
(trees.)0 1923 y(In)g(Section)g(2,)f(w)o(e)h(discuss)h(the)g(Minim)o(um)13
b(Description)k(Length)g(Principle)f(and)h(presen)o(t)h(a)f(hill)e(clim)o
(bing)f(inductiv)o(e)0 1972 y(inference)k(algorithm)c(based)j(on)f(the)i
(MMLP)m(.)e(In)g(Section)h(3,)g(w)o(e)f(adapt)h(the)g(hill)e(clim)o(bing)f
(algorithm)g(to)i(design)h(an)0 2022 y(algorithm)11 b(to)j(construct)h
(decision)f(graphs.)19 b(In)14 b(Section)g(4,)f(w)o(e)h(presen)o(t)i(some)d
(results)i(comparing)d(the)i(decision)g(graph)0 2072 y(sc)o(heme)h(with)g
(other)g(decision)g(tree)i(inference)f(sc)o(hemes.)22 b(In)15
b(Section)g(5,)f(w)o(e)i(describ)q(e)g(ho)o(w)f(w)o(e)g(can)g(decide)h
(whether)g(a)0 2122 y(decision)e(tree)h(or)f(a)g(decision)g(graph)f(is)h
(more)f(appropiate)h(for)f(a)h(particular)f(domain.)0 2236
y Fk(1.1)56 b(An)19 b(Ov)n(erview)e(of)i(Decision)f(T)-5 b(rees)0
2313 y Fr(A)15 b(decision)h(tree)g(for)f(the)h(prop)q(osition)f(\()p
Fj(A)25 b Fi(^)g Fj(B)r Fr(\))h Fi(_)f Fr(\()p Fj(C)j Fi(^)d
Fj(D)q Fr(\))16 b(is)f(depicted)h(in)f(Figure)h(1.)21 b(It)16
b(consists)g(of)30 b Fp(de)n(cision)0 2363 y(no)n(des)15 b
Fr([Dra)o(wn)e(as)h(o)o(v)n(als)f(in)g(Figure)i(1])e(and)28
b Fp(le)n(aves)14 b Fr([Dra)o(wn)f(as)h(rectangles)h(in)f(Figure)g(1].)k
(Decision)c(no)q(des)h(sp)q(ecify)f(an)0 2413 y(attribute)i(to)e(test)j(up)q
(on)e(an)g(ob)r(ject,)g(with)g(the)h(arcs)f(out)g(of)g(the)g(decision)h(no)q
(de)f(sp)q(ecifying)g(the)h(p)q(ossible)f(v)n(alues)g(that)0
2462 y(attribute)e(can)f(tak)o(e.)18 b(Eac)o(h)12 b(leaf)g(of)f(the)i
(decision)f(tree)i(sp)q(eci\014es)g(a)e(category)m(.)17 b(A)12
b(decision)h(tree)g(with)f Fj(c)g Fr(lea)o(v)o(es)g(partitions)0
2512 y(the)i(space)h(of)f(ob)r(jects)h(in)o(to)e Fj(c)h Fr(disjoin)o(t)f
(categories.)62 2562 y(An)o(y)f(ob)r(ject)h(is)f(categorized)h(b)o(y)e
(determining)g(the)i(unique)f(leaf)f(asso)q(ciated)i(with)e(that)h(ob)r
(ject.)18 b(The)13 b(leaf)e(asso)q(ciated)0 2612 y(with)16
b(an)f(ob)r(ject)i(is)f(de\014ned)h(b)o(y)e(follo)o(wing)e(the)k(path)f(do)o
(wn)f(the)i(tree)g(suc)o(h)f(that)g(the)h(arc)f(out)g(of)f(eac)o(h)h
(decision)h(no)q(de)0 2662 y(has)d(the)h(same)e(v)n(alue)g(as)h(that)g(ob)r
(ject's)g(v)n(alue)f(for)h(that)g(attribute.)62 2711 y(Eac)o(h)19
b(leaf)f(of)h(a)f(decision)h(tree)h(is)f(lab)q(elled)f(with)g(a)37
b Fp(default)20 b(class)p Fr(,)f(t)o(ypically)e(the)j(most)d(frequen)o(t)j
(class)f(of)f(the)0 2761 y(example)12 b(ob)r(jects)j(asso)q(ciated)f(with)f
(that)h(leaf.)j(A)d(new)g(ob)r(ject)g(is)g(classi\014ed)g(b)o(y)f
(determining)g(the)h(leaf)f(it)g(is)g(asso)q(ciated)0 2811
y(with,)g(and)h(classifying)f(it)g(as)h(the)h(default)e(class)h(of)g(that)g
(leaf.)965 2936 y(1)p eop
%%Page: 2 2
bop 457 751 a @beginspecial 26 @llx 467 @lly 478 @urx 757 @ury
2520 @rwi @setspecial
%%BeginDocument: ABCD.tree.ps
/MAV 300 dict def
MAV begin 
/useClip true def 
/top    0 def 
/left   1 def 
/bottom 2 def 
/right  3 def 
/CM     6 array def 
/CTM    6 array def 
/CTMR   6 array def 
/MTC    6 array def 
/blimit 1500 def 
/bcnt   0 def 
/rbox 8 array def 
/segbox 8 array def 
/bbox1 4 array def 
/c1 3 array def 
/c2 3 array def 
/d 3 array def    
/delta 3 array def 
/mycurrentrgbcolor 3 array def 
/ulx 0 def 
/uly 1 def 
/llx 2 def 
/lly 3 def 
/urx 4 def 
/ury 5 def 
/lrx 6 def 
/lry 7 def 
/sp [0 0] def 
/ep [0 0] def 
/bbox 4 array def 
/pbox 4 array def 
/scrnProc currentscreen 3 1 roll pop pop def
/currentcolorscreen where {
begin
currentcolorscreen
end
3 1 roll pop pop 
4 2 roll pop pop 
5 -2 roll pop pop 
6 -2 roll pop pop 
/kProc exch def 
/bProc exch def 
/gProc exch def 
/rProc exch def 
} if 
/Max {2 copy gt {pop}{exch pop} ifelse} bind def
/Min {2 copy lt {pop}{exch pop} ifelse} bind def
/cellPenW 72.0 /currentcolorscreen where
{begin currentcolorscreen end pop pop
10 1 roll pop pop 8 1 roll pop pop
 6 1 roll pop pop Max Max Max }
{currentscreen pop pop} ifelse div 2.0 div def
/rect { 
 /saveobj save def 
 R PC PF LC SS 
 saveobj restore 
} bind def 
/R { 
 newpath
 pbox astore pop
 0 792 translate 1 -1 scale CTMR currentmatrix pop exch translate
 /objectCord mstore def
 pbox right get 2 div
 dup pbox left get exch sub
 pbox left 3 -1 roll put 
 dup pbox right 3 -1 roll put
 pbox bottom get 2 div 
 dup pbox top get exch sub
 pbox top 3 -1 roll put
 dup pbox bottom 3 -1 roll put
 translate 
 CTM currentmatrix pop
 57.3 mul rotate
 RT
} bind def
 /SaveScreenBW {
 currentscreen
 /scrnProc exch def
 /scrnAngle exch def
 /scrnFreq exch def
 } bind def
 /RestoreScreenBW {
 scrnFreq scrnAngle MAV /scrnProc get setscreen
 } bind def
 /SetFreqAngleBW {
 currentscreen
 3 1 roll
 pop pop
 setscreen
 } bind def
 /SaveScreenColor {
 currentcolorscreen
 /grayProc exch def
 /grayAngle exch def
 /grayFreq exch def
 /bProc exch def
 /bAngle exch def
 /bFreq exch def
 /gProc exch def
 /gAngle exch def
 /gFreq exch def
 /rProc exch def
 /rAngle exch def
 /rFreq exch def
 } bind def
 /RestoreColorScreen {
 rFreq rAngle MAV /rProc get gFreq gAngle MAV /gProc get bFreq bAngle MAV /bProc get grayFreq grayAngle MAV /grayProc get setcolorscreen
 } bind def
 /SetFreqAngleColor { 
 currentcolorscreen 
 3 1 roll pop pop
 4 2 roll pop pop
 5 -2 roll pop pop
 6 -2 roll pop pop
 4 1 roll 
 6 1 roll 
 8 1 roll 
 10 1 roll 
 setcolorscreen 
 } bind def 
/initmsaverestore { 
userdict begin 
/mdict 10 dict def 
mdict begin 
/mindex -1 def 
/mstacksize 25 def 
/mstack mstacksize array def 
/incmindex { 
/mindex mindex 1 add def 
} bind def 
/decmindex { 
/mindex mindex 1 sub def 
} bind def 
/checkmindex { 
mindex 0 lt { 
(%ERROR: msave/mrestore stack underflow: Offending command 'mrestore'
) print flush 
stop 
} 
{ 
mindex mstacksize ge { 
(%ERROR: msave/mrestore stack overflow: Offending command 'msave'
) print flush 
stop 
} if 
} ifelse 
} bind def 
/mpush { 
incmindex 
checkmindex 
mstack mindex 
3 -1 roll put 
} bind def 
/mpop { 
checkmindex 
mstack mindex get 
decmindex 
} bind def 
end 
end 
} bind def 
/msave { 
mdict begin 
matrix currentmatrix mpush 
end 
} bind def 
/mrestore { 
mdict begin 
mpop setmatrix 
end 
} bind def 
/msavelevel { 
mdict begin 
mindex 1 add 
end 
} bind def 
/mstore {
matrix currentmatrix
} bind def
/AutoSizeY {
0 0 pl
dup 3 1 roll
4 -1 roll  
add
pl exch pop
exch sub
} bind def
/pl {  
transform
0.25 sub round 0.25 add exch
0.25 sub round 0.25 add exch
itransform
} bind def
/pll {
transform
round exch
round exch
itransform
} bind def
/pr { 
dtransform
round exch
round exch
idtransform
} bind def
/m { 
pl  moveto
} bind def
/l { 
pl lineto
} bind def
/c { 
pl curveto
} bind def
/rm { 
pr rmoveto
} bind def
/rl { 
pr rlineto
} bind def
/ar { 
5 -2 roll pl
5 2 roll
arc
} bind def
/an { 
5 -2 roll pl
5 2 roll
arcn
} bind def
/MakePatternFont {
/FontDict 20 dict def
FontDict begin
/FontName exch def
/Encoding exch def
/FontMatrix [1 0 0 1 0 0 ] def
/FontType 3 def
/FontBBox [ 0 0 1 1 ] def
/PatternDict exch def
/RenderPattern {
patternDict exch get
exec
} bind def
/BuildChar {
exch begin
1 0 0 0 1 1 setcachedevice
Encoding exch get RenderPattern
end
} bind def
FontName FontDict definefont pop
end
} bind def
/SnapToPattenGrid
	{
	exch
	dup 0 lt {
		1 index sub
	} if
	1 index
	div truncate
	mul
} bind def
/FillPatternString {
dup length
1 sub
0 1 3 -1 roll {
2 index
2 index
3 -2 roll
put
} for
pop pop
} bind def
/AutoSizeY {
	0.0 exch dtransform
	round
	idtransform exch pop
} bind def
 /AutoSizeX {
	0.0 dtransform
	exch
	round
	exch
	idtransform pop
} bind def 
/AutoCellSize {
	AutoSizeY
	exch
	AutoSizeX
	exch
} bind def
/CheckPath {
	false
	{ pop pop pop true exit}
	{ pop pop pop true exit}
	{ pop pop pop pop pop pop pop true exit}
	{ pop true exit}
	pathforall
} bind def
/PatternFill {					%		patternCharacter
	/patternString 1 string def
	/cm mstore def
	patternMatrix setmatrix
	1 1 AutoCellSize
	dup 0 eq { pop 1} if
	exch
	dup 0 eq { pop 1} if
	exch
	/patternSize exch 24.0 mul def
	/PatternSizeX exch 24.0 mul patternString length mul def
	/flaterror 0 def
	patternString FillPatternString
	gsave
		flaterror 1 add setflat
		flattenpath
		pathbbox
	grestore
	psy add flaterror add psy SnapToPattenGrid
	exch psx add flaterror add psx SnapToPattenGrid
	3 -1 roll flaterror sub psy SnapToPattenGrid
	4 -1 roll flaterror sub psx SnapToPattenGrid
	4 2 roll pll
	4 2 roll pll
	/llxsnap exch def
	/llysnap exch def
	/urxsnap exch def
	/urysnap exch def
	gsave
		useClip true eq {clip}{eoclip} ifelse newpath
		/PatternFont findfont [psx 0.0 0.0 psy 0.0 0.0] makefont setfont
		llysnap patternSize urysnap {
			llxsnap exch moveto
			llxsnap PatternSizeX urxsnap {
				pop
				patternString show
				%currentpoint am
			} for
		} bind for
	grestore
	cm setmatrix
} bind def				%		End 'PatternFill'
/DefaultPatternFont {
	/cm mstore def
	patternMatrix setmatrix
	1 1 AutoCellSize
	dup 0 eq { pop 1} if
	exch
	dup 0 eq { pop 1} if
	exch
	/psy exch iSizeY mul def
	/psx exch iSizeX mul def
	/patternDict 64 dict def
	patternDict begin
		/NotDef {} def
		/LiteDiagLines {
			iSizeX iSizeY false [iSizeX 0.0 0.0 iSizeY -1.0 mul  0.0 iSizeY]
			{pat}
			imagemask
		} bind def
	end
	/CustEncoding 256 array def
	0 255 1 {
		CustEncoding exch /NotDef put
	} bind for
	CustEncoding 65 /LiteDiagLines put
	patternDict CustEncoding /PatternFont MakePatternFont
	/pathSegProc {
		strokepath
		CheckPath {
			65 PatternFill newpath
		} if
	} bind def
	cm setmatrix
} bind def
/XRound {
	dup
	3 -1 roll
	exch mul round
	exch div
} bind def
/RoundMatrix {
	/i 0 def
	dup {
		100000.0 XRound
		1 index
		exch i exch put
		/i i 1 add def
	} forall
} bind def
/GetBoxesRatio {
3 -1 roll sub
7 1 roll
exch sub
6 1 roll
3 -1 roll sub
5 1 roll
exch sub
4 1 roll
3 -1 roll div
3 1 roll
exch div
exch
} bind def
/T {792 exch sub} bind def
/sx 0 def
/sy 0 def
/ex 0 def
/ey 0 def
/lw  0 def
/siz 0 def
/U {gsave 0 setlinecap
/lw siz 0.078125 mul def  /ey exch neg def /ex exch def /sy exch neg def /sx exch def
fontkind plain eq 
 {
  lw siz 0.0119444 mul sub setlinewidth sx sy moveto ex ey lineto stroke
 }
 {
   currentdict /outlineFontSize known outlineFontSize 0 gt and
     {
       fontkind outline eq
         {
           /sy sy 0.0119444 siz mul sub def
           /ey ey 0.0119444 siz mul sub def
           gsave 
           1 1 1 setrgbcolor lw siz 0.0119444 mul sub setlinewidth sx sy moveto ex ey lineto stroke
           grestore
           lw siz 0.0119444 mul sub setlinewidth sx sy moveto ex ey lineto
           strokepath 0.0119444 siz mul setlinewidth stroke
         } if
       fontkind shadow eq fontkind outlineshadow eq or
         {
           /sy sy 0.0358332 siz mul sub def
           /ey ey 0.0358332 siz mul sub def
           lw setlinewidth
           lw 2 div sx add sy
           lw 2 div sub moveto
           lw 2 div ex add ey
           lw 2 div sub lineto stroke 
           gsave
           1 1 1 setrgbcolor lw siz 0.0119444 mul sub setlinewidth sx sy moveto ex ey lineto stroke
           grestore
           lw siz 0.0119444 mul sub setlinewidth sx sy moveto ex ey lineto
           strokepath 0.0119444 siz mul setlinewidth stroke
         } if
      } if
 } ifelse
grestore} bind def
/plain 1 def
/outline 2 def
/shadow 3 def
/outlineshadow 4 def
/fess {
	currentdict /outlineFontSize known {
		/outlineFontSize 2 index def
	} if
	findfont exch dup /siz exch def scalefont setfont
} bind def
/SHDW {gsave siz oldfontname fess siz 0.055 mul x add y siz 0.05 mul sub moveto c show grestore} def
/NRML {gsave 1 1 1 setrgbcolor siz oldfontname fess x y moveto c show grestore siz /Outline fess  x y moveto c show} def
/S {
fontkind plain eq {neg moveto show} if
fontkind outline eq {neg /y exch def /x exch def /c exch def NRML} if
fontkind shadow eq {neg /y exch def /x exch def /c exch def SHDW NRML} if
fontkind outlineshadow eq {neg /y exch def /x exch def /c exch def SHDW NRML} if
} bind def
/F {
/fontkind exch def
fontkind plain eq {fess} if
fontkind outline eq {dup /oldfontname exch def exch dup /siz exch def exch OLF} if
fontkind shadow eq {dup /oldfontname exch def exch dup /siz exch def exch OLF} if
fontkind outlineshadow eq {dup /oldfontname exch def exch dup /siz exch def exch OLF} if
} bind def
/makeoutlinedict 15 dict def
/makeoutlinefont
 {
  makeoutlinedict begin
   /uniqueid exch def
   /strokewidth exch def
   /newfontname exch def
   /basefontname exch def
   FontDirectory basefontname known not {
    /basefontname /Times-Roman def
   } if
   /basefontdict basefontname findfont def
   /numentries basefontdict maxlength 1 add def
   basefontdict /UniqueID known not
   {/numentries numentries 1 add def} if
   /outfontdict numentries dict def
   basefontdict
   {
     exch dup /FID ne {exch outfontdict 3 1 roll put} {pop pop} ifelse
	  }forall
   outfontdict /FontName newfontname put
   outfontdict /PaintType 2 put
   outfontdict /StrokeWidth strokewidth put
   outfontdict /UniqueID uniqueid put
   newfontname outfontdict definefont pop
  end
  }def
/UID {
 findfont dup /UniqueID known
  {/UniqueID get 1 add}
  {pop 1}
  ifelse
} def
/OLF {
dup
/Outline
1000 62 div
4 -1 roll
UID
/outlineFontSize 5 index def
makeoutlinefont
/Outline findfont exch scalefont setfont
} def
/CopyEncoding {
findfont
/Encoding get
dup length array
/tarrayz exch def
tarrayz 0
3 -1 roll
putinterval
tarrayz
} bind def
/Re-encode {
dup length array copy
/eap 0 def
exch {
dup type /integertype eq {
/eap exch def
} {
1 index
exch
eap exch
put
/eap eap 1 add def
} ifelse
} forall
} bind def
/EncodeFont	{
findfont dup
length dict
begin
{	1 index /FID ne
{ def }
{ pop pop } ifelse
} forall
/FontName exch def
/Encoding exch def
FontName currentdict
end
definefont pop
} bind def
/clip2pathbbox {
	/magicNum linewidth 2 div 1 2 sqrt div mul def
	pathbbox
	/urymn exch magicNum add def
	/urxmn exch magicNum add def
	/llymn exch magicNum sub def
	/llxmn exch magicNum sub def
	newpath llxmn llymn moveto llxmn urymn lineto urxmn urymn lineto urxmn llymn lineto
	closepath clip newpath
} bind def
/Line {
MAV /LC get length 0 ne
{
	gsave
			newpath
			MAV /ArrowType get length 0 eq
			MAV /SD get length 0 eq and
			{2 setlinecap /UseClip {clip2pathbbox} def }
			{0 setlinecap /UseClip {} def } ifelse
			0 792 translate
			1 -1 scale
			CTM currentmatrix pop
			/yStart exch def /xStart exch def /yEnd exch def /xEnd exch def /linewidth exch def
			MAV /ArrowType get length 0 eq xStart xEnd ne yStart yEnd ne and and
			{xStart yStart moveto xEnd yEnd lineto UseClip xStart yStart moveto xEnd yEnd lineto}
			{xStart yStart moveto xEnd yEnd lineto} ifelse
			linewidth setlinewidth SD strokepath
			CheckPath {LC PF ArrowType} if
	grestore
}
{pop pop pop pop pop} ifelse
} bind def
/ZeroLine {
	gsave
		newpath
		MAV /ArrowType get length 0 ne {
			/UseClip {} def
			0 792 translate
			1 -1 scale
			pop pop pop pop pop
			CTM currentmatrix pop
			ArrowType
		} if
	grestore
} bind def
/CompensateForStroke {
	sin currentlinewidth mul
	exch
	cos currentlinewidth mul
	dup 0 translate
	4 -1 roll exch 2.0 mul sub
	3 1 roll
	2.0 mul sub
} bind def
/arrowdict 10 dict def
arrowdict begin
	/SwallowTail {
		newpath
		0.0 0.0 moveto
		1.0 -.5 lineto
		.666 0.0 lineto
		1.0 .5 lineto
		closepath
	} bind def
	/Triangular {
		newpath
		0.0 0.0 moveto
		1.0 -.5 lineto
		1.0 .5 lineto
		closepath
	} bind def
	/OpenTri {
		newpath
		1.0 0.5 moveto
		0.0 0.0 lineto
		1.0 -0.5 lineto
	} bind def
	/ClosedTri {
		newpath
		1.0 0.5 moveto
		0.0 0.0 lineto
		1.0 -0.5 lineto
		closepath
	} bind def
	/SlashBar {
		newpath
		0.5 -.5 moveto
		-.5 0.5 lineto
	} bind def
	/Dot {
		newpath
		0.5 0.0 moveto
		0 0 1 0 360 arc
		closepath
	} bind def
	/ExtSlashBar {
		newpath
		1.0 -.5 moveto
		0.0 0.5 lineto
	} bind def
end
/ScaleArrowHead {
	0 0 4 -2 roll
	0 0 1 1
	8 -4 roll GetBoxesRatio
	scale
} bind def
/DrawArrowHead {
	gsave
	[] 0 setdash
	currentpoint translate rotate
	{
		4 copy
		gsave
			initmatrix
			100 200 translate
			msave
				ScaleArrowHead pop
				arrowdict exch get exec
			mrestore
			strokepath
			0 0 3 index 3 index
			pathbbox 8 4 roll
			GetBoxesRatio
			4 2 roll
		grestore
		3 index 1.0 exch sub
		6 -1 roll
		{
			2 index mul
			0 translate
		}{
			pop
		} ifelse
		msave
			ScaleArrowHead scale
			arrowdict exch get exec
		mrestore
		strokepath
	} {
		msave
		ScaleArrowHead
		arrowdict exch get exec
		mrestore
	} ifelse
		CheckPath {
			LC PF
		} if
	grestore
} bind def
/SR { 
 pbox left get pbox top get moveto 
 pbox right get pbox top get lineto 
 pbox right get pbox bottom get lineto 
 pbox left get pbox bottom get lineto 
 closepath
} bind def 
/E {
1.415 setmiterlimit
CM currentmatrix pop
pbox right get pbox left get sub abs dup
pbox bottom get pbox top get sub abs dup 3 -1 roll
lt {exch dup 3 -1 roll exch div 1 exch}
{dup 3 -1 roll exch div 1} ifelse scale 
0 0 3 -1 roll 2 div 0 360 arc closepath
CM setmatrix
} bind def
/StripFromFront { 
dup length
2 index sub
3 1 roll
exch 3 -1 roll
getinterval
} bind def
/MakePathArray { 
 /k 0 def 
 {/k k 1 add def pop pop}{/k k 1 add def pop pop}{/k k 1 add def pop pop pop pop pop pop}{/k k 1 add def }pathforall 
 k array
 /k 0 def 
 {{moveto} 3 array astore 1 index k 3 -1 roll put /k k 1 add def} 
 {{lineto} 3 array astore 1 index k 3 -1 roll put /k k 1 add def} 
 {{curveto} 7 array astore 1 index k 3 -1 roll put /k k 1 add def} 
 {{closepath} 1 array astore 1 index k 3 -1 roll put /k k 1 add def} 
pathforall 
}bind def 
/MakeFlatPathArray { 
/k 0 def 
{/k k 1 add def pop pop}{/k k 1 add def pop pop}{pop pop pop pop pop pop}{}pathforall 
k array
/k 0 def 
{{moveto} 3 array astore 1 index k 3 -1 roll put /k k 1 add def} 
{{lineto} 3 array astore 1 index k 3 -1 roll put /k k 1 add def} 
{ pop pop pop pop pop pop} 
{} 
pathforall 
}bind def 
/FractionalLine {
2 index sub
.00001 mul
exch
3 index sub
.00001 mul
4 -1 roll add
3 1 roll
add
} bind def
/calcLineLength {
 exch
 4 -1 roll
 sub
 dup mul
 3 1 roll exch
 sub
 dup mul
 add sqrt
} bind def
/InitTotalLineLength {
 /oldY exch def
 /oldX exch def
 theDash aload pop currentLineLength add setdash
} bind def
/AccumeLineLength {
 3 copy pop
 2 copy
 oldX oldY
 4 2 roll calcLineLength
 /segmentLength exch def
 /currentLineLength currentLineLength segmentLength add def
 /oldY exch def
 /oldX exch def
} bind def
/DecumeLastLineLength {
 /currentLineLength currentLineLength segmentLength sub def
} bind def
/DrawFlattendSegment {
 /pointCount 2 def
 dup 0 lt { pop 0 } if
 fpc
 3 1 roll
 2 index
 1 index
 gt {
 2 copy get
 dup length
 dup 3 eq {
 pop
 dup 0 get
 exch 1 get
 2 copy InitTotalLineLength  
 m
 } {
 } ifelse
 } {
 pop 1 index
 } ifelse
 dup 1 add
 3 index
 exch sub
 dup 10 gt { pop 10} if
 {
 1 add
 2 copy
 get aload pop
 AccumeLineLength
 exec
 } repeat
 3 1 roll pop pop
 DecumeLastLineLength
} bind def
/IncFPC {
 fpc add
 /fpc exch def
} bind def
/DrawFlatPathArray {
 fpc
 0 { 
 dup 2 index
 1 sub
 lt { 
 flatPathArray exch
 newpath
 1 sub DrawFlattendSegment
 gsave
 pathSegProc
 grestore
 newpath
 }
 {
 pop pop
 exit
 } ifelse
 } loop
} bind def
/RecordFirstSubSegment {
 closepathArray 0 pathArray 0 get
 put
 closepathArray 1
 pathArray 0 get aload pop pop
 pathArray 1 get dup length 3 eq {
 aload pop pop
 } {
 newpath
 0 0 moveto
 aload pop exec
 /segmentArray flattenpath MakeFlatPathArray def
 segmentArray 1 get aload pop pop
 } ifelse
 FractionalLine {lineto} 3 array astore
 put
} bind def
/AppendClosePath {
 closepathArray 0 get 2 {lineto} put
 flatPathArray fpc closepathArray 0 get put
 1 IncFPC
 flatPathArray fpc closepathArray 1 get put
 1 IncFPC
} bind def
/RecordCurrentDash {
 /theDash
 currentdash 2 array astore def
 /currentLineLength 0 def
} bind def
/PatternStroke {
	0 setlinecap
 RecordCurrentDash
 /saveFlat currentflat def
 .5 setflat
 /pathArray MakePathArray def
 /closepathArray 2 array def
 /pathLength pathArray length def
 /flatPathArray 513 array def
 /currentLineLength 0 def
 /fpc 0 def
 pathArray pathLength 1 sub get
 length 1 eq {
 /usingClosepath true def
 RecordFirstSubSegment
 /pathLength pathLength 1 sub def
 } {
 /usingClosepath false def
 } ifelse
 0 1 pathLength 1 sub {
 pathArray exch get
 dup length 3 eq {
 fpc 1 add 512 ge {
 DrawFlatPathArray
 fpc 2 ge {
 flatPathArray flatPathArray fpc 2 sub get 0 put
 flatPathArray flatPathArray fpc 1 sub get 1 put
 /fpc 2 def
 }{
 /fpc 0 def
 } ifelse
 } if
 flatPathArray exch fpc exch put
 1 IncFPC
 } {
 dup length 7 eq {
 newpath
 /nToStrip 0 def
 fpc 1 gt {
 flatPathArray fpc 2 sub get aload pop pop m
 flatPathArray fpc 1 sub get aload pop exec
 /nToStrip 2 def
 } {
 fpc 1 eq {
 flatPathArray fpc 1 sub get aload pop exec
 /nToStrip 2 def
 } if
 } ifelse
 aload pop exec
 /segmentArray flattenpath MakeFlatPathArray def
 /segmentArray nToStrip segmentArray StripFromFront def
 segmentArray length fpc add 512 lt {
 flatPathArray fpc segmentArray putinterval
 segmentArray length IncFPC
 } {
 DrawFlatPathArray
 fpc 1 gt {
 flatPathArray flatPathArray fpc 2 sub get 0 exch put
 flatPathArray flatPathArray fpc 1 sub get 1 exch put
 /fpc 2 def
 }{
 /fpc 0 def
 } ifelse
 segmentArray length 512 lt {
 flatPathArray fpc segmentArray putinterval
 segmentArray length IncFPC
 } {
 segmentArray length
 /exitLoop false def
 0 
 {
 2 copy sub
 dup 500 gt {
 pop 500
 } { 
 /exitLoop true def
 } ifelse 
 segmentArray 2 index 2 index getinterval
 flatPathArray fpc 3 -1 roll putinterval
 dup IncFPC
 add 
 exitLoop {
 exit 
 } {
 DrawFlatPathArray
 fpc 1 gt {
 flatPathArray flatPathArray fpc 2 sub get 0 exch put
 flatPathArray flatPathArray fpc 1 sub get 1 exch put
 /fpc 2 def
 }{
 /fpc 0 def
 } ifelse
 } ifelse
 } loop
 } ifelse
 } ifelse
 } if
 } ifelse
 } for
 fpc 0 gt {
 usingClosepath {
 AppendClosePath
 } if
 DrawFlatPathArray
 } if
 saveFlat setflat
} bind def


initmsaverestore
/tctm matrix currentmatrix def
tctm RoundMatrix setmatrix
/patternMatrix mstore def
10 setmiterlimit
2 setlinecap
newpath
/RT {E} def
/SD {} def
/SS {setlinewidth SD stroke} def
/LC { /setcmykcolor where
 {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse 
} def
/PC { /setcmykcolor where
 {begin 0.000 0.000 0.000 0.000 setcmykcolor end} {1.000 1.000 1.000 setrgbcolor} ifelse 
} def
/PF {gsave fill grestore} def
1.000 0 36.000 207.000 0.000 0.000 36.000 89.999 rect
save
[ 39/quotesingle 96/grave 128/Adieresis/Aring/Ccedilla/Eacute/Ntilde/Odieresis
/Udieresis/aacute/agrave/acircumflex/adieresis/atilde/aring/ccedilla/eacute
/egrave/ecircumflex/edieresis/iacute/igrave/icircumflex/idieresis/ntilde
/oacute/ograve/ocircumflex/odieresis/otilde/uacute/ugrave/ucircumflex
/udieresis/dagger/degree/cent/sterling/section/bullet/paragraph/germandbls
/registered/copyright/trademark/acute/dieresis/.notdef/AE/Oslash
/.notdef/plusminus/.notdef/.notdef/yen/mu/.notdef/.notdef
/.notdef/.notdef/.notdef/ordfeminine/ordmasculine/.notdef/ae/oslash
/questiondown/exclamdown/logicalnot/.notdef/florin/.notdef/.notdef
/guillemotleft/guillemotright/ellipsis/.notdef/Agrave/Atilde/Otilde/OE/oe
/endash/emdash/quotedblleft/quotedblright/quoteleft/quoteright/divide
/.notdef/ydieresis/Ydieresis/fraction/currency/guilsinglleft/guilsinglright
/fi/fl/daggerdbl/periodcentered/quotesinglbase/quotedblbase/perthousand
/Acircumflex/Ecircumflex/Aacute/Edieresis/Egrave/Iacute/Icircumflex
/Idieresis/Igrave/Oacute/Ocircumflex/.notdef/Ograve/Uacute/Ucircumflex
/Ugrave/dotlessi/circumflex/tilde/macron/breve/dotaccent/ring/cedilla
/hungarumlaut/ogonek/caron]
StandardEncoding Re-encode /_Courier /Courier EncodeFont

/RT {SR} def
/LC {} def
/SS {pop} def
/PF {} def
/PC {} def
0.000 0 46.000 216.000 0.000 0.000 14.000 82.000 rect
gsave
257.000 53.000 T translate
0.0 rotate
1 1 scale
12.000 (_Courier) plain F
 /setcmykcolor where
 {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse 

(A) -40.488 3.000 S
(t) -33.488 3.000 S
(t) -26.488 3.000 S
(r) -19.488 3.000 S
(i) -12.488 3.000 S
(b) -5.488 3.000 S
(u) 1.511 3.000 S
(t) 8.511 3.000 S
(e) 15.511 3.000 S
( ) 22.511 3.000 S
(A) 29.511 3.000 S
grestore
/RT {E} def
/SD {} def
/SS {setlinewidth SD stroke} def
/LC { /setcmykcolor where
 {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse 
} def
/PC { /setcmykcolor where
 {begin 0.000 0.000 0.000 0.000 setcmykcolor end} {1.000 1.000 1.000 setrgbcolor} ifelse 
} def
/PF {gsave fill grestore} def
1.000 0 99.000 351.000 0.000 0.000 36.000 89.999 rect
/RT {SR} def
/LC {} def
/SS {pop} def
/PF {} def
/PC {} def
0.000 0 109.000 360.000 0.000 0.000 14.000 82.000 rect
gsave
401.000 116.000 T translate
0.0 rotate
1 1 scale
12.000 (_Courier) fess
 /setcmykcolor where
 {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse 

(A) -40.488 3.000 S
(t) -33.488 3.000 S
(t) -26.488 3.000 S
(r) -19.488 3.000 S
(i) -12.488 3.000 S
(b) -5.488 3.000 S
(u) 1.511 3.000 S
(t) 8.511 3.000 S
(e) 15.511 3.000 S
( ) 22.511 3.000 S
(B) 29.511 3.000 S
grestore
/RT {E} def
/SD {} def
/SS {setlinewidth SD stroke} def
/LC { /setcmykcolor where
 {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse 
} def
/PC { /setcmykcolor where
 {begin 0.000 0.000 0.000 0.000 setcmykcolor end} {1.000 1.000 1.000 setrgbcolor} ifelse 
} def
/PF {gsave fill grestore} def
1.000 0 99.000 63.000 0.000 0.000 36.000 89.999 rect
/RT {SR} def
/LC {} def
/SS {pop} def
/PF {} def
/PC {} def
0.000 0 109.000 72.000 0.000 0.000 14.000 82.000 rect
gsave
113.000 116.000 T translate
0.0 rotate
1 1 scale
12.000 (_Courier) fess
 /setcmykcolor where
 {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse 

(A) -40.488 3.000 S
(t) -33.488 3.000 S
(t) -26.488 3.000 S
(r) -19.488 3.000 S
(i) -12.488 3.000 S
(b) -5.488 3.000 S
(u) 1.511 3.000 S
(t) 8.511 3.000 S
(e) 15.511 3.000 S
( ) 22.511 3.000 S
(C) 29.511 3.000 S
grestore
/RT {E} def
/SD {} def
/SS {setlinewidth SD stroke} def
/LC { /setcmykcolor where
 {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse 
} def
/PC { /setcmykcolor where
 {begin 0.000 0.000 0.000 0.000 setcmykcolor end} {1.000 1.000 1.000 setrgbcolor} ifelse 
} def
/PF {gsave fill grestore} def
1.000 0 162.000 117.000 0.000 0.000 36.000 89.999 rect
/RT {SR} def
/LC {} def
/SS {pop} def
/PF {} def
/PC {} def
0.000 0 172.000 126.000 0.000 0.000 14.000 82.000 rect
gsave
167.000 179.000 T translate
0.0 rotate
1 1 scale
12.000 (_Courier) fess
 /setcmykcolor where
 {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse 

(A) -40.488 3.000 S
(t) -33.488 3.000 S
(t) -26.488 3.000 S
(r) -19.488 3.000 S
(i) -12.488 3.000 S
(b) -5.488 3.000 S
(u) 1.511 3.000 S
(t) 8.511 3.000 S
(e) 15.511 3.000 S
( ) 22.511 3.000 S
(D) 29.511 3.000 S
grestore
/RT {E} def
/SD {} def
/SS {setlinewidth SD stroke} def
/LC { /setcmykcolor where
 {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse 
} def
/PC { /setcmykcolor where
 {begin 0.000 0.000 0.000 0.000 setcmykcolor end} {1.000 1.000 1.000 setrgbcolor} ifelse 
} def
/PF {gsave fill grestore} def
1.000 0 162.000 297.000 0.000 0.000 36.000 89.999 rect
/RT {SR} def
/LC {} def
/SS {pop} def
/PF {} def
/PC {} def
0.000 0 172.000 306.000 0.000 0.000 14.000 82.000 rect
gsave
347.000 179.000 T translate
0.0 rotate
1 1 scale
12.000 (_Courier) fess
 /setcmykcolor where
 {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse 

(A) -40.488 3.000 S
(t) -33.488 3.000 S
(t) -26.488 3.000 S
(r) -19.488 3.000 S
(i) -12.488 3.000 S
(b) -5.488 3.000 S
(u) 1.511 3.000 S
(t) 8.511 3.000 S
(e) 15.511 3.000 S
( ) 22.511 3.000 S
(C) 29.511 3.000 S
grestore
/RT {E} def
/SD {} def
/SS {setlinewidth SD stroke} def
/LC { /setcmykcolor where
 {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse 
} def
/PC { /setcmykcolor where
 {begin 0.000 0.000 0.000 0.000 setcmykcolor end} {1.000 1.000 1.000 setrgbcolor} ifelse 
} def
/PF {gsave fill grestore} def
1.000 0 225.000 351.000 0.000 0.000 36.000 89.999 rect
/RT {SR} def
/LC {} def
/SS {pop} def
/PF {} def
/PC {} def
0.000 0 235.000 360.000 0.000 0.000 14.000 82.000 rect
gsave
401.000 242.000 T translate
0.0 rotate
1 1 scale
12.000 (_Courier) fess
 /setcmykcolor where
 {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse 

(A) -40.488 3.000 S
(t) -33.488 3.000 S
(t) -26.488 3.000 S
(r) -19.488 3.000 S
(i) -12.488 3.000 S
(b) -5.488 3.000 S
(u) 1.511 3.000 S
(t) 8.511 3.000 S
(e) 15.511 3.000 S
( ) 22.511 3.000 S
(D) 29.511 3.000 S
grestore
/RT {SR} def
/SD {} def
/SS {setlinewidth SD stroke} def
/LC { /setcmykcolor where
 {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse 
} def
/PC { /setcmykcolor where
 {begin 0.000 0.000 0.000 0.000 setcmykcolor end} {1.000 1.000 1.000 setrgbcolor} ifelse 
} def
/PF {gsave fill grestore} def
1.000 0 162.000 27.000 0.000 0.000 36.000 62.999 rect
/RT {SR} def
/SD {} def
/SS {setlinewidth SD stroke} def
/LC { /setcmykcolor where
 {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse 
} def
/PC { /setcmykcolor where
 {begin 0.000 0.000 0.000 0.000 setcmykcolor end} {1.000 1.000 1.000 setrgbcolor} ifelse 
} def
/PF {gsave fill grestore} def
1.000 0 225.000 81.000 0.000 0.000 36.000 62.999 rect
/RT {SR} def
/SD {} def
/SS {setlinewidth SD stroke} def
/LC { /setcmykcolor where
 {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse 
} def
/PC { /setcmykcolor where
 {begin 0.000 0.000 0.000 0.000 setcmykcolor end} {1.000 1.000 1.000 setrgbcolor} ifelse 
} def
/PF {gsave fill grestore} def
1.000 0 225.000 180.000 0.000 0.000 36.000 62.999 rect
/RT {SR} def
/SD {} def
/SS {setlinewidth SD stroke} def
/LC { /setcmykcolor where
 {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse 
} def
/PC { /setcmykcolor where
 {begin 0.000 0.000 0.000 0.000 setcmykcolor end} {1.000 1.000 1.000 setrgbcolor} ifelse 
} def
/PF {gsave fill grestore} def
1.000 0 225.000 261.000 0.000 0.000 36.000 62.999 rect
/RT {SR} def
/SD {} def
/SS {setlinewidth SD stroke} def
/LC { /setcmykcolor where
 {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse 
} def
/PC { /setcmykcolor where
 {begin 0.000 0.000 0.000 0.000 setcmykcolor end} {1.000 1.000 1.000 setrgbcolor} ifelse 
} def
/PF {gsave fill grestore} def
1.000 0 162.000 414.000 0.000 0.000 36.000 62.999 rect
/RT {SR} def
/SD {} def
/SS {setlinewidth SD stroke} def
/LC { /setcmykcolor where
 {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse 
} def
/PC { /setcmykcolor where
 {begin 0.000 0.000 0.000 0.000 setcmykcolor end} {1.000 1.000 1.000 setrgbcolor} ifelse 
} def
/PF {gsave fill grestore} def
1.000 0 288.000 315.000 0.000 0.000 36.000 62.999 rect
/RT {SR} def
/SD {} def
/SS {setlinewidth SD stroke} def
/LC { /setcmykcolor where
 {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse 
} def
/PC { /setcmykcolor where
 {begin 0.000 0.000 0.000 0.000 setcmykcolor end} {1.000 1.000 1.000 setrgbcolor} ifelse 
} def
/PF {gsave fill grestore} def
1.000 0 288.000 414.000 0.000 0.000 36.000 62.999 rect
/ArrowType{ 
1.000 setlinewidth
117.000 99.000 moveto
/Triangular 14.099 7.049 false 348.715 DrawArrowHead
} bind def
/SD {} def
/SS {setlinewidth SD stroke} def
/LC { /setcmykcolor where
 {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse 
} def
/PF {gsave fill grestore} def
/SS {setlinewidth SD stroke} def
1.000 118.961 98.607 252.000 72.000 Line
/ArrowType{ 
1.000 setlinewidth
387.000 99.000 moveto
/Triangular 14.099 7.049 false 191.323 DrawArrowHead
} bind def
/SD {} def
/SS {setlinewidth SD stroke} def
/LC { /setcmykcolor where
 {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse 
} def
/PF {gsave fill grestore} def
/SS {setlinewidth SD stroke} def
1.000 385.038 98.607 252.000 72.000 Line
/ArrowType{ 
1.000 setlinewidth
63.000 162.000 moveto
/Triangular 14.099 7.049 false 329.059 DrawArrowHead
} bind def
/SD {} def
/SS {setlinewidth SD stroke} def
/LC { /setcmykcolor where
 {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse 
} def
/PF {gsave fill grestore} def
/SS {setlinewidth SD stroke} def
1.000 64.714 160.970 108.000 135.000 Line
/ArrowType{ 
1.000 setlinewidth
153.000 162.000 moveto
/Triangular 14.099 7.049 false 210.979 DrawArrowHead
} bind def
/SD {} def
/SS {setlinewidth SD stroke} def
/LC { /setcmykcolor where
 {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse 
} def
/PF {gsave fill grestore} def
/SS {setlinewidth SD stroke} def
1.000 151.285 160.971 108.000 135.000 Line
/ArrowType{ 
1.000 setlinewidth
351.000 162.000 moveto
/Triangular 14.099 7.049 false 329.059 DrawArrowHead
} bind def
/SD {} def
/SS {setlinewidth SD stroke} def
/LC { /setcmykcolor where
 {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse 
} def
/PF {gsave fill grestore} def
/SS {setlinewidth SD stroke} def
1.000 352.714 160.970 396.000 135.000 Line
/ArrowType{ 
1.000 setlinewidth
441.000 162.000 moveto
/Triangular 14.099 7.049 false 210.979 DrawArrowHead
} bind def
/SD {} def
/SS {setlinewidth SD stroke} def
/LC { /setcmykcolor where
 {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse 
} def
/PF {gsave fill grestore} def
/SS {setlinewidth SD stroke} def
1.000 439.285 160.971 396.000 135.000 Line
/ArrowType{ 
1.000 setlinewidth
117.000 225.000 moveto
/Triangular 14.099 7.049 false 329.059 DrawArrowHead
} bind def
/SD {} def
/SS {setlinewidth SD stroke} def
/LC { /setcmykcolor where
 {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse 
} def
/PF {gsave fill grestore} def
/SS {setlinewidth SD stroke} def
1.000 118.714 223.970 162.000 198.000 Line
/ArrowType{ 
1.000 setlinewidth
207.000 225.000 moveto
/Triangular 14.099 7.049 false 210.979 DrawArrowHead
} bind def
/SD {} def
/SS {setlinewidth SD stroke} def
/LC { /setcmykcolor where
 {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse 
} def
/PF {gsave fill grestore} def
/SS {setlinewidth SD stroke} def
1.000 205.285 223.971 162.000 198.000 Line
/ArrowType{ 
1.000 setlinewidth
297.000 225.000 moveto
/Triangular 14.099 7.049 false 329.059 DrawArrowHead
} bind def
/SD {} def
/SS {setlinewidth SD stroke} def
/LC { /setcmykcolor where
 {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse 
} def
/PF {gsave fill grestore} def
/SS {setlinewidth SD stroke} def
1.000 298.714 223.970 342.000 198.000 Line
/ArrowType{ 
1.000 setlinewidth
387.000 225.000 moveto
/Triangular 14.099 7.049 false 210.979 DrawArrowHead
} bind def
/SD {} def
/SS {setlinewidth SD stroke} def
/LC { /setcmykcolor where
 {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse 
} def
/PF {gsave fill grestore} def
/SS {setlinewidth SD stroke} def
1.000 385.285 223.971 342.000 198.000 Line
/ArrowType{ 
1.000 setlinewidth
351.000 288.000 moveto
/Triangular 14.099 7.049 false 329.059 DrawArrowHead
} bind def
/SD {} def
/SS {setlinewidth SD stroke} def
/LC { /setcmykcolor where
 {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse 
} def
/PF {gsave fill grestore} def
/SS {setlinewidth SD stroke} def
1.000 352.714 286.970 396.000 261.000 Line
/ArrowType{ 
1.000 setlinewidth
441.000 288.000 moveto
/Triangular 14.099 7.049 false 210.979 DrawArrowHead
} bind def
/SD {} def
/SS {setlinewidth SD stroke} def
/LC { /setcmykcolor where
 {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse 
} def
/PF {gsave fill grestore} def
/SS {setlinewidth SD stroke} def
1.000 439.285 286.971 396.000 261.000 Line
/RT {SR} def
/LC {} def
/SS {pop} def
/PF {} def
/PC {} def
0.000 0 171.000 27.000 0.000 0.000 16.000 61.000 rect
gsave
57.500 179.000 T translate
0.0 rotate
1 1 scale
14.000 (_Courier) fess
 /setcmykcolor where
 {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse 

( ) -30.500 4.000 S
(C) -22.500 4.000 S
(l) -14.500 4.000 S
(a) -6.500 4.000 S
(s) 1.500 4.000 S
(s) 9.500 4.000 S
(-) 17.500 4.000 S
grestore
/RT {SR} def
/LC {} def
/SS {pop} def
/PF {} def
/PC {} def
0.000 0 234.000 81.000 0.000 0.000 16.000 61.000 rect
gsave
111.500 242.000 T translate
0.0 rotate
1 1 scale
14.000 (_Courier) fess
 /setcmykcolor where
 {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse 

( ) -30.500 4.000 S
(C) -22.500 4.000 S
(l) -14.500 4.000 S
(a) -6.500 4.000 S
(s) 1.500 4.000 S
(s) 9.500 4.000 S
(-) 17.500 4.000 S
grestore
/RT {SR} def
/LC {} def
/SS {pop} def
/PF {} def
/PC {} def
0.000 0 234.000 261.000 0.000 0.000 16.000 61.000 rect
gsave
291.500 242.000 T translate
0.0 rotate
1 1 scale
14.000 (_Courier) fess
 /setcmykcolor where
 {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse 

( ) -30.500 4.000 S
(C) -22.500 4.000 S
(l) -14.500 4.000 S
(a) -6.500 4.000 S
(s) 1.500 4.000 S
(s) 9.500 4.000 S
(-) 17.500 4.000 S
grestore
/RT {SR} def
/LC {} def
/SS {pop} def
/PF {} def
/PC {} def
0.000 0 297.000 315.000 0.000 0.000 16.000 61.000 rect
gsave
345.500 305.000 T translate
0.0 rotate
1 1 scale
14.000 (_Courier) fess
 /setcmykcolor where
 {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse 

( ) -30.500 4.000 S
(C) -22.500 4.000 S
(l) -14.500 4.000 S
(a) -6.500 4.000 S
(s) 1.500 4.000 S
(s) 9.500 4.000 S
(-) 17.500 4.000 S
grestore
/RT {SR} def
/LC {} def
/SS {pop} def
/PF {} def
/PC {} def
0.000 0 234.000 189.000 0.000 0.000 16.000 53.000 rect
gsave
215.500 242.000 T translate
0.0 rotate
1 1 scale
14.000 (_Courier) fess
 /setcmykcolor where
 {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse 

(C) -26.500 4.000 S
(l) -18.500 4.000 S
(a) -10.500 4.000 S
(s) -2.500 4.000 S
(s) 5.500 4.000 S
(+) 13.500 4.000 S
grestore
/RT {SR} def
/LC {} def
/SS {pop} def
/PF {} def
/PC {} def
0.000 0 171.000 423.000 0.000 0.000 16.000 53.000 rect
gsave
449.500 179.000 T translate
0.0 rotate
1 1 scale
14.000 (_Courier) fess
 /setcmykcolor where
 {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse 

(C) -26.500 4.000 S
(l) -18.500 4.000 S
(a) -10.500 4.000 S
(s) -2.500 4.000 S
(s) 5.500 4.000 S
(+) 13.500 4.000 S
grestore
/RT {SR} def
/LC {} def
/SS {pop} def
/PF {} def
/PC {} def
0.000 0 297.000 423.000 0.000 0.000 16.000 53.000 rect
gsave
449.500 305.000 T translate
0.0 rotate
1 1 scale
14.000 (_Courier) fess
 /setcmykcolor where
 {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse 

(C) -26.500 4.000 S
(l) -18.500 4.000 S
(a) -10.500 4.000 S
(s) -2.500 4.000 S
(s) 5.500 4.000 S
(+) 13.500 4.000 S
grestore
restore
end
%%EndDocument
 @endspecial 500 853 a Fr(Figure)14 b(1:)k(A)c(decision)g(tree)h(for)f(\()p
Fj(A)23 b Fi(^)g Fj(B)r Fr(\))h Fi(_)e Fr(\()p Fj(C)k Fi(^)d
Fj(D)q Fr(\))0 993 y Fk(1.2)56 b(The)18 b(Replication)f(Problem)0
1073 y Fr(The)d(decision)g(tree)i(sho)o(wn)d(in)h(Figure)g(1)f(giv)o(es)h(an)
g(ine\016cien)o(t)g(represen)o(tation)h(of)e(the)i(prop)q(osition)766
1168 y(\()p Fj(A)23 b Fi(^)g Fj(B)r Fr(\))g Fi(_)g Fr(\()p
Fj(C)j Fi(^)d Fj(D)q Fr(\))0 1264 y(While)15 b(the)h(term)f(\()p
Fj(A)26 b Fi(^)g Fj(B)r Fr(\))16 b(is)f(describ)q(ed)j(e\016cien)o(tly)m(,)d
(the)h(term)f(\()p Fj(C)29 b Fi(^)c Fj(D)q Fr(\))16 b(requires)h(t)o(w)o(o)e
(iden)o(tical)g(subtrees)j(to)d(b)q(e)0 1314 y(represen)o(ted.)24
b(The)16 b(reason)g(for)e(this)i(duplication)e(is)h(the)g(disjunction)g(in)g
(the)g(prop)q(osition.)21 b(In)15 b(general,)h(conjunctions)0
1364 y(can)21 b(b)q(e)g(describ)q(ed)h(e\016cien)o(tly)f(b)o(y)f(decision)h
(trees,)i(while)d(disjunctions)h(require)g(a)g(large)f(tree)i(to)e(describ)q
(e.)40 b(This)0 1413 y(represen)o(tational)11 b(shortcoming)e(of)h(decision)h
(trees)h(has)f(b)q(een)g(iden)o(ti\014ed)g(b)o(y)f([P)o(agallo)e(and)j
(Haussler])f([17)o(])g(and)h([Math)o(ues)0 1463 y(and)16 b(Rendell])e([13],)h
(and)g(has)h(b)q(een)h(termed)f(the)32 b Fp(r)n(eplic)n(ation)16
b(pr)n(oblem)p Fr(.)23 b([P)o(agallo)13 b(and)j(Haussler])g(demonstrate)g
(that)0 1513 y(man)o(y)9 b(b)q(o)q(olean)i(functions)g(with)f(small)f(DNF)i
(\(disjunctiv)o(e)g(normal)e(form\))g(descriptions)j(will)d(b)q(e)j
(ine\016cien)o(tly)e(describ)q(ed)0 1563 y(b)o(y)k(decision)g(trees)h([17)o
(].)62 1615 y(The)g(e\013ect)h(of)e(the)h(replication)f(problem)g(is)g(that)h
(decision)f(tree)i(learning)e(algorithms)e(require)j(a)g(large)f(amoun)o(t)f
(of)0 1665 y(data)g(to)g(learn)g(disjunctiv)o(e)g(functions.)18
b(F)m(or)13 b(example,)f(if)g(a)h(decision)g(tree)i(learning)d(algorithm)f
(requires)j Fj(D)h Fr(data)e(items)0 1714 y(to)g(learn)g(the)h(subterm)f(\()p
Fj(C)23 b Fi(^)e Fj(D)q Fr(\))13 b(\(in)g(Figure)g(1\),)g(then)h(the)g(same)e
(algorithm)e(will)i(require)i(at)f(least)g(2)8 b Fi(\002)g
Fj(D)14 b Fr(data)f(items)0 1764 y(to)j(learn)g(the)g(function)g(\()p
Fj(A)27 b Fi(^)f Fj(B)r Fr(\))h Fi(_)f Fr(\()p Fj(C)k Fi(^)c
Fj(D)q Fr(\).)e(This)16 b(follo)o(ws)f(since)h(there)i(are)e(t)o(w)o(o)g
(replications)f(of)h(the)g(subtree)0 1814 y(whic)o(h)e(describ)q(es)i(\()p
Fj(C)26 b Fi(^)c Fj(D)q Fr(\))469 1799 y Fh(1)489 1814 y Fr(.)62
1866 y(One)14 b(solution)e(to)h(the)h(replication)e(problem)g(is)h(to)f(allo)
o(w)g(decision)h(no)q(des)h(to)e(con)o(tain)h(features)h(that)f(are)h(a)e
(function)0 1916 y(of)g(one)h(or)g(more)e(attributes.)19 b(A)25
b Fp(fe)n(atur)n(e)h Fr(consists)14 b(of)e(a)h(conjunction)f(of)g(literals)h
(\(where)h(eac)o(h)26 b Fp(liter)n(al)e Fr(is)13 b(an)f(attribute)0
1965 y(or)i(a)f(negated)i(attribute\).)62 2017 y([P)o(agallo)c(and)i
(Haussler])h([17)o(])f(and)g([Math)o(ues)g(and)g(Rendell])f([13)o(])h
(construct)i(decision)e(trees,)i(and)e(analyse)g(the)h(tree)0
2067 y(to)19 b(determine)f(lik)o(ely)f(candidate)i(features.)34
b(They)19 b(then)g(add)g(these)h(features)g(to)e(the)h(list)g(of)f
(attributes)h(and)g(build)0 2117 y(another)f(tree.)32 b(Both)18
b(groups)h(rep)q(eat)g(this)f(pro)q(cess)i(un)o(til)d(no)h(more)f(features)i
(can)f(b)q(e)h(added.)30 b(There)20 b(is)d(a)h(need)h(to)0
2167 y(extend)d(these)h(results)f(for)f(those)h(cases)g(when)g(the)g(data)e
(has)i(signi\014can)o(t)e(noise,)h(and)g(when)h(the)g(data)f(has)g(more)f
(than)0 2217 y(t)o(w)o(o)f(classes.)62 2268 y(Other)k(attempts)f(to)g(resolv)
o(e)g(the)h(replication)e(problem)g(include)h(partitioning)e(an)i
(attribute's)g(v)n(alues)g(\(describ)q(ed)0 2318 y(in)d(Section)h(1.3\))f
(and)h(allo)o(wing)d(a)i(more)g(expressiv)o(e)i(structure,)h(namely)c
(decision)h(graphs)h(\(describ)q(ed)i(in)d(Section)h(1.4\).)0
2445 y Fk(1.3)56 b(The)18 b(F)-5 b(ragmen)n(tation)18 b(Problem)0
2526 y Fr(Another)f(asp)q(ect)h(of)e(the)h(replication)f(problem)f(can)h(o)q
(ccur)i(when)f(the)g(data)f(con)o(tains)g(attributes)h(with)f(more)g(than)g
(2)0 2576 y(v)n(alues.)24 b(If)16 b(a)g(tree)h(uses)g(high)f(arit)o(y)f
(attributes)i(\(sa)o(y)f(arit)o(y)g Fj(>)p Fr(=)32 b(10\),)15
b(then)i(it)f(will)e(quic)o(kly)i(fragmen)o(t)e(the)j(data)f(in)o(to)0
2626 y(man)o(y)c(partitions)h(\(see)j(Figure)e(2\).)62 2677
y(The)h(most)e(commonly)e(used)k(metho)q(d)e(to)h(a)o(v)o(oid)f(fragmen)o
(tation)f(of)i(the)g(training)g(data)g(is)g(to)g(construct)i(subsets)g(of)0
2727 y(the)e(attribute's)h(v)n(alues)e(\(see)j(Figure)e(3\))f([3,)g(11,)g(6,)
g(1,)g(9].)p 0 2773 780 2 v 46 2799 a Fg(1)64 2811 y Ff(A)f(similar)e
(argumen)o(t)e(applies)i(if)i(the)e(subterm)g(\()p Fe(C)22
b Fd(^)d Fe(D)q Ff(\))11 b(app)q(ears)f(higher)g(in)h(the)g(tree)f(than)g(\()
p Fe(A)20 b Fd(^)f Fe(B)r Ff(\).)965 2936 y Fr(2)p eop
%%Page: 3 3
bop 457 744 a @beginspecial 13 @llx 236 @lly 600 @urx 609 @ury
2520 @rwi @setspecial
%%BeginDocument: Fragment.ps

50 dict begin

/arrowHeight 8 def
/arrowWidth 4 def
/none null def
/numGraphicParameters 17 def
/stringLimit 65535 def

/Begin {
save
numGraphicParameters dict begin
} def

/End {
end
restore
} def

/SetB {
dup type /nulltype eq {
pop
false /brushRightArrow idef
false /brushLeftArrow idef
true /brushNone idef
} {
/brushDashOffset idef
/brushDashArray idef
0 ne /brushRightArrow idef
0 ne /brushLeftArrow idef
/brushWidth idef
false /brushNone idef
} ifelse
} def

/SetCFg {
/fgblue idef
/fggreen idef
/fgred idef
} def

/SetCBg {
/bgblue idef
/bggreen idef
/bgred idef
} def

/SetF {
/printSize idef
/printFont idef
} def

/SetP {
dup type /nulltype eq {
pop true /patternNone idef
} {
/patternGrayLevel idef
patternGrayLevel -1 eq {
/patternString idef
} if
false /patternNone idef
} ifelse
} def

/BSpl {
0 begin
storexyn
newpath
n 1 gt {
0 0 0 0 0 0 1 1 true subspline
n 2 gt {
0 0 0 0 1 1 2 2 false subspline
1 1 n 3 sub {
/i exch def
i 1 sub dup i dup i 1 add dup i 2 add dup false subspline
} for
n 3 sub dup n 2 sub dup n 1 sub dup 2 copy false subspline
} if
n 2 sub dup n 1 sub dup 2 copy 2 copy false subspline
patternNone not brushLeftArrow not brushRightArrow not and and { ifill } if
brushNone not { istroke } if
0 0 1 1 leftarrow
n 2 sub dup n 1 sub dup rightarrow
} if
end
} dup 0 4 dict put def

/Circ {
newpath
0 360 arc
patternNone not { ifill } if
brushNone not { istroke } if
} def

/CBSpl {
0 begin
dup 2 gt {
storexyn
newpath
n 1 sub dup 0 0 1 1 2 2 true subspline
1 1 n 3 sub {
/i exch def
i 1 sub dup i dup i 1 add dup i 2 add dup false subspline
} for
n 3 sub dup n 2 sub dup n 1 sub dup 0 0 false subspline
n 2 sub dup n 1 sub dup 0 0 1 1 false subspline
patternNone not { ifill } if
brushNone not { istroke } if
} {
Poly
} ifelse
end
} dup 0 4 dict put def

/Elli {
0 begin
newpath
4 2 roll
translate
scale
0 0 1 0 360 arc
patternNone not { ifill } if
brushNone not { istroke } if
end
} dup 0 1 dict put def

/Line {
0 begin
2 storexyn
newpath
x 0 get y 0 get moveto
x 1 get y 1 get lineto
brushNone not { istroke } if
0 0 1 1 leftarrow
0 0 1 1 rightarrow
end
} dup 0 4 dict put def

/MLine {
0 begin
storexyn
newpath
n 1 gt {
x 0 get y 0 get moveto
1 1 n 1 sub {
/i exch def
x i get y i get lineto
} for
patternNone not brushLeftArrow not brushRightArrow not and and { ifill } if
brushNone not { istroke } if
0 0 1 1 leftarrow
n 2 sub dup n 1 sub dup rightarrow
} if
end
} dup 0 4 dict put def

/Poly {
3 1 roll
newpath
moveto
-1 add
{ lineto } repeat
closepath
patternNone not { ifill } if
brushNone not { istroke } if
} def

/Rect {
0 begin
/t exch def
/r exch def
/b exch def
/l exch def
newpath
l b moveto
l t lineto
r t lineto
r b lineto
closepath
patternNone not { ifill } if
brushNone not { istroke } if
end
} dup 0 4 dict put def

/Text {
ishow
} def

/idef {
dup where { pop pop pop } { exch def } ifelse
} def

/ifill {
0 begin
gsave
patternGrayLevel -1 ne {
fgred bgred fgred sub patternGrayLevel mul add
fggreen bggreen fggreen sub patternGrayLevel mul add
fgblue bgblue fgblue sub patternGrayLevel mul add setrgbcolor
eofill
} {
eoclip
originalCTM setmatrix
pathbbox /t exch def /r exch def /b exch def /l exch def
/w r l sub ceiling cvi def
/h t b sub ceiling cvi def
/imageByteWidth w 8 div ceiling cvi def
/imageHeight h def
bgred bggreen bgblue setrgbcolor
eofill
fgred fggreen fgblue setrgbcolor
w 0 gt h 0 gt and {
l b translate w h scale
w h true [w 0 0 h neg 0 h] { patternproc } imagemask
} if
} ifelse
grestore
end
} dup 0 8 dict put def

/istroke {
gsave
brushDashOffset -1 eq {
[] 0 setdash
1 setgray
} {
brushDashArray brushDashOffset setdash
fgred fggreen fgblue setrgbcolor
} ifelse
brushWidth setlinewidth
originalCTM setmatrix
stroke
grestore
} def

/ishow {
0 begin
gsave
fgred fggreen fgblue setrgbcolor
/fontDict printFont findfont printSize scalefont dup setfont def
/descender fontDict begin 0 [FontBBox] 1 get FontMatrix end
transform exch pop def
/vertoffset 0 descender sub printSize sub printFont /Courier ne
printFont /Courier-Bold ne and { 1 add } if def {
0 vertoffset moveto show
/vertoffset vertoffset printSize sub def
} forall
grestore
end
} dup 0 3 dict put def

/patternproc {
0 begin
/patternByteLength patternString length def
/patternHeight patternByteLength 8 mul sqrt cvi def
/patternWidth patternHeight def
/patternByteWidth patternWidth 8 idiv def
/imageByteMaxLength imageByteWidth imageHeight mul
stringLimit patternByteWidth sub min def
/imageMaxHeight imageByteMaxLength imageByteWidth idiv patternHeight idiv
patternHeight mul patternHeight max def
/imageHeight imageHeight imageMaxHeight sub store
/imageString imageByteWidth imageMaxHeight mul patternByteWidth add string def
0 1 imageMaxHeight 1 sub {
/y exch def
/patternRow y patternByteWidth mul patternByteLength mod def
/patternRowString patternString patternRow patternByteWidth getinterval def
/imageRow y imageByteWidth mul def
0 patternByteWidth imageByteWidth 1 sub {
/x exch def
imageString imageRow x add patternRowString putinterval
} for
} for
imageString
end
} dup 0 12 dict put def

/min {
dup 3 2 roll dup 4 3 roll lt { exch } if pop
} def

/max {
dup 3 2 roll dup 4 3 roll gt { exch } if pop
} def

/arrowhead {
0 begin
transform originalCTM itransform
/taily exch def
/tailx exch def
transform originalCTM itransform
/tipy exch def
/tipx exch def
/dy tipy taily sub def
/dx tipx tailx sub def
/angle dx 0 ne dy 0 ne or { dy dx atan } { 90 } ifelse def
gsave
originalCTM setmatrix
tipx tipy translate
angle rotate
newpath
0 0 moveto
arrowHeight neg arrowWidth 2 div lineto
arrowHeight neg arrowWidth 2 div neg lineto
closepath
patternNone not {
originalCTM setmatrix
/padtip arrowHeight 2 exp 0.25 arrowWidth 2 exp mul add sqrt brushWidth mul
arrowWidth div def
/padtail brushWidth 2 div def
tipx tipy translate
angle rotate
padtip 0 translate
arrowHeight padtip add padtail add arrowHeight div dup scale
arrowheadpath
ifill
} if
brushNone not {
originalCTM setmatrix
tipx tipy translate
angle rotate
arrowheadpath
istroke
} if
grestore
end
} dup 0 9 dict put def

/arrowheadpath {
newpath
0 0 moveto
arrowHeight neg arrowWidth 2 div lineto
arrowHeight neg arrowWidth 2 div neg lineto
closepath
} def

/leftarrow {
0 begin
y exch get /taily exch def
x exch get /tailx exch def
y exch get /tipy exch def
x exch get /tipx exch def
brushLeftArrow { tipx tipy tailx taily arrowhead } if
end
} dup 0 4 dict put def

/rightarrow {
0 begin
y exch get /tipy exch def
x exch get /tipx exch def
y exch get /taily exch def
x exch get /tailx exch def
brushRightArrow { tipx tipy tailx taily arrowhead } if
end
} dup 0 4 dict put def

/midpoint {
0 begin
/y1 exch def
/x1 exch def
/y0 exch def
/x0 exch def
x0 x1 add 2 div
y0 y1 add 2 div
end
} dup 0 4 dict put def

/thirdpoint {
0 begin
/y1 exch def
/x1 exch def
/y0 exch def
/x0 exch def
x0 2 mul x1 add 3 div
y0 2 mul y1 add 3 div
end
} dup 0 4 dict put def

/subspline {
0 begin
/movetoNeeded exch def
y exch get /y3 exch def
x exch get /x3 exch def
y exch get /y2 exch def
x exch get /x2 exch def
y exch get /y1 exch def
x exch get /x1 exch def
y exch get /y0 exch def
x exch get /x0 exch def
x1 y1 x2 y2 thirdpoint
/p1y exch def
/p1x exch def
x2 y2 x1 y1 thirdpoint
/p2y exch def
/p2x exch def
x1 y1 x0 y0 thirdpoint
p1x p1y midpoint
/p0y exch def
/p0x exch def
x2 y2 x3 y3 thirdpoint
p2x p2y midpoint
/p3y exch def
/p3x exch def
movetoNeeded { p0x p0y moveto } if
p1x p1y p2x p2y p3x p3y curveto
end
} dup 0 17 dict put def

/storexyn {
/n exch def
/y n array def
/x n array def
n 1 sub -1 0 {
/i exch def
y i 3 2 roll put
x i 3 2 roll put
} for
} def




Begin
[ .8 0 0 .8 0 0 ] concat
/originalCTM matrix currentmatrix def

Begin %I Elli
1 0 0 [] 0 SetB
0 0 0 SetCFg
1 1 1 SetCBg
1 SetP
[ 1 0 0 1 228 148 ] concat
151 530 50 20 Elli
End

Begin %I Text
0 0 0 SetCFg
/Courier 10 SetF
[ 3.3 0 0 2.72727 369 693.545 ] concat
[
(A)
] Text
End

Begin %I Text
0 0 0 SetCFg
/Courier 10 SetF
[ 1.75343 0 0 3.00916 288.678 754.991 ] concat
[
(500 Training Items)
] Text
End

Begin %I Elli
1 0 0 [] 0 SetB
0 0 0 SetCFg
1 1 1 SetCBg
1 SetP
[ 1 0 0 1 18 -2 ] concat
151 530 50 20 Elli
End

Begin %I Text
0 0 0 SetCFg
/Courier 10 SetF
[ 3 0 0 2.72727 159 543.545 ] concat
[
(B)
] Text
End

Begin %I Elli
1 0 0 [] 0 SetB
0 0 0 SetCFg
1 1 1 SetCBg
1 SetP
[ 1 0 0 1 437 -2 ] concat
151 530 50 20 Elli
End

Begin %I Text
0 0 0 SetCFg
/Courier 10 SetF
[ 3.3 0 0 2.72727 578 543.545 ] concat
[
(K)
] Text
End

Begin %I Line
1 0 1 [] 0 SetB
0 0 0 SetCFg
0 0 0 SetCBg
none SetP %I p n
[ 1 0 0 1 148 197 ] concat
231 461 211 341 Line
End

Begin %I Line
1 0 1 [] 0 SetB
0 0 0 SetCFg
0 0 0 SetCBg
none SetP %I p n
[ 1 0 0 1 148 197 ] concat
241 451 340 341 Line
End

Begin %I Line
1 0 1 [] 0 SetB
0 0 0 SetCFg
0 0 0 SetCBg
none SetP %I p n
[ 1 0 0 1 148 197 ] concat
231 461 310 341 Line
End

Begin %I Line
1 0 1 [] 0 SetB
0 0 0 SetCFg
0 0 0 SetCBg
none SetP %I p n
[ 1 0 0 1 148 197 ] concat
231 461 280 341 Line
End

Begin %I Line
1 0 1 [] 0 SetB
0 0 0 SetCFg
0 0 0 SetCBg
none SetP %I p n
[ 1 0 0 1 148 197 ] concat
231 461 251 341 Line
End

Begin %I Line
1 0 1 [] 0 SetB
0 0 0 SetCFg
0 0 0 SetCBg
none SetP %I p n
[ 1 0 0 1 148 197 ] concat
231 461 181 341 Line
End

Begin %I Line
1 0 1 [] 0 SetB
0 0 0 SetCFg
0 0 0 SetCBg
none SetP %I p n
[ 1 0 0 1 148 197 ] concat
231 461 151 341 Line
End

Begin %I Line
1 0 1 [] 0 SetB
0 0 0 SetCFg
0 0 0 SetCBg
none SetP %I p n
[ 1 0 0 1 148 197 ] concat
231 461 121 341 Line
End

Begin %I Line
1 0 1 [] 0 SetB
0 0 0 SetCFg
0 0 0 SetCBg
none SetP %I p n
[ 1 0 0 1 -62 48 ] concat
231 461 211 341 Line
End

Begin %I Line
1 0 1 [] 0 SetB
0 0 0 SetCFg
0 0 0 SetCBg
none SetP %I p n
[ 1 0 0 1 -62 48 ] concat
241 451 340 341 Line
End

Begin %I Line
1 0 1 [] 0 SetB
0 0 0 SetCFg
0 0 0 SetCBg
none SetP %I p n
[ 1 0 0 1 -62 48 ] concat
231 461 310 341 Line
End

Begin %I Line
1 0 1 [] 0 SetB
0 0 0 SetCFg
0 0 0 SetCBg
none SetP %I p n
[ 1 0 0 1 -62 48 ] concat
231 461 280 341 Line
End

Begin %I Line
1 0 1 [] 0 SetB
0 0 0 SetCFg
0 0 0 SetCBg
none SetP %I p n
[ 1 0 0 1 -62 48 ] concat
231 461 251 341 Line
End

Begin %I Line
1 0 1 [] 0 SetB
0 0 0 SetCFg
0 0 0 SetCBg
none SetP %I p n
[ 1 0 0 1 -62 48 ] concat
231 461 181 341 Line
End

Begin %I Line
1 0 1 [] 0 SetB
0 0 0 SetCFg
0 0 0 SetCBg
none SetP %I p n
[ 1 0 0 1 -62 48 ] concat
231 461 151 341 Line
End

Begin %I Line
1 0 1 [] 0 SetB
0 0 0 SetCFg
0 0 0 SetCBg
none SetP %I p n
[ 1 0 0 1 -62 48 ] concat
231 461 121 341 Line
End

Begin %I Line
1 0 1 [] 0 SetB
0 0 0 SetCFg
0 0 0 SetCBg
none SetP %I p n
[ 1 0 0 1 2 197 ] concat
167 311 28 192 Line
End

Begin %I Line
1 0 1 [] 0 SetB
0 0 0 SetCFg
0 0 0 SetCBg
none SetP %I p n
[ 1 0 0 1 2 197 ] concat
167 311 307 192 Line
End

Begin %I Rect
1 0 1 [] 0 SetB
0 0 0 SetCFg
0 0 0 SetCBg
none SetP %I p n
[ 1 0 0 1 2 197 ] concat
18 162 48 192 Rect
End

Begin %I Rect
1 0 1 [] 0 SetB
0 0 0 SetCFg
0 0 0 SetCBg
none SetP %I p n
[ 1 0 0 1 2 197 ] concat
297 162 327 192 Rect
End

Begin %I Line
1 0 1 [] 0 SetB
0 0 0 SetCFg
0 0 0 SetCBg
none SetP %I p n
[ 1 0 0 1 356 48 ] concat
231 461 211 341 Line
End

Begin %I Line
1 0 1 [] 0 SetB
0 0 0 SetCFg
0 0 0 SetCBg
none SetP %I p n
[ 1 0 0 1 356 48 ] concat
241 451 340 341 Line
End

Begin %I Line
1 0 1 [] 0 SetB
0 0 0 SetCFg
0 0 0 SetCBg
none SetP %I p n
[ 1 0 0 1 356 48 ] concat
231 461 310 341 Line
End

Begin %I Line
1 0 1 [] 0 SetB
0 0 0 SetCFg
0 0 0 SetCBg
none SetP %I p n
[ 1 0 0 1 356 48 ] concat
231 461 280 341 Line
End

Begin %I Line
1 0 1 [] 0 SetB
0 0 0 SetCFg
0 0 0 SetCBg
none SetP %I p n
[ 1 0 0 1 356 48 ] concat
231 461 251 341 Line
End

Begin %I Line
1 0 1 [] 0 SetB
0 0 0 SetCFg
0 0 0 SetCBg
none SetP %I p n
[ 1 0 0 1 356 48 ] concat
231 461 181 341 Line
End

Begin %I Line
1 0 1 [] 0 SetB
0 0 0 SetCFg
0 0 0 SetCBg
none SetP %I p n
[ 1 0 0 1 356 48 ] concat
231 461 151 341 Line
End

Begin %I Line
1 0 1 [] 0 SetB
0 0 0 SetCFg
0 0 0 SetCBg
none SetP %I p n
[ 1 0 0 1 356 48 ] concat
231 461 121 341 Line
End

Begin %I Line
1 0 1 [] 0 SetB
0 0 0 SetCFg
0 0 0 SetCBg
none SetP %I p n
[ 1 0 0 1 420 197 ] concat
167 311 28 192 Line
End

Begin %I Line
1 0 1 [] 0 SetB
0 0 0 SetCFg
0 0 0 SetCBg
none SetP %I p n
[ 1 0 0 1 420 197 ] concat
167 311 307 192 Line
End

Begin %I Rect
1 0 1 [] 0 SetB
0 0 0 SetCFg
0 0 0 SetCBg
none SetP %I p n
[ 1 0 0 1 420 197 ] concat
18 162 48 192 Rect
End

Begin %I Rect
1 0 1 [] 0 SetB
0 0 0 SetCFg
0 0 0 SetCBg
none SetP %I p n
[ 1 0 0 1 420 197 ] concat
297 162 327 192 Rect
End

Begin %I Text
0 0 0 SetCFg
/Courier 10 SetF
[ 1.4658 0 0 3.7987 149.391 333.474 ] concat
[
(100 leaves each with an average of 5 Training Items)
] Text
End

Begin %I Line
1 0 1 [] 0 SetB
0 0 0 SetCFg
1 1 1 SetCBg
0 SetP
[ 1 0 0 1 148 197 ] concat
231 461 21 351 Line
End

Begin %I Line
1 0 1 [] 0 SetB
0 0 0 SetCFg
1 1 1 SetCBg
0 SetP
[ 1 0 0 1 148 197 ] concat
231 461 440 351 Line
End

Begin %I Text
0 0 0 SetCFg
/Courier 10 SetF
[ 1.62791 0 0 2.72727 349 384.545 ] concat
[
(. . . .)
] Text
End

Begin %I Line
1 0 1 [] 0 SetB
0 0 0 SetCFg
1 1 1 SetCBg
0 SetP
[ 1 0 0 1 206 197 ] concat
173 530 173 510 Line
End

End %I eop

showpage


end
%%EndDocument
 @endspecial 361 847 a Fr(Figure)14 b(2:)j(A)d(decision)g(tree)i
(demonstrating)c(the)j(fragmen)o(tation)d(problem)62 974 y(It)f(has)h(b)q
(een)g(noted)f([3,)f(18])g(that)h(searc)o(hing)h(through)f(the)h(p)q(ossible)
f(2-w)o(a)o(y)f(subsets)j(is)e(a)g(computationally)d(exp)q(ensiv)o(e)0
1024 y(op)q(eration.)26 b(If)16 b(an)g(attribute)h(has)f(arit)o(y)g
Fj(M)5 b Fr(,)16 b(then)h(there)h(will)d(b)q(e)i(2)1110 1009
y Fc(M)s Fb(\000)p Fh(1)1200 1024 y Fi(\000)11 b Fr(1)17 b(non-trivial)d(2-w)
o(a)o(y)i(subsets)i(to)e(explore.)0 1073 y(This)h(approac)o(h)g(is)g
(therefore)h(infeasible)e(for)h(dealing)f(with)h(high)f(arit)o(y)g
(attributes.)28 b(F)m(or)17 b(example,)f(with)h(a)f(problem)0
1123 y(suc)o(h)f(as)f(protein)g(secondary)h(structure)i(prediction,)d(where)h
(an)f(amino)d(acid)j(has)g(20)g(p)q(ossible)g(v)n(alues,)g(there)h(w)o(ould)e
(b)q(e)0 1173 y(2)21 1158 y Fh(19)65 1173 y Fi(\000)d Fr(1)25
b(=)g(524)p Fj(;)7 b Fr(287)12 b(2-w)o(a)o(y)h(subsets)j(to)d(explore.)62
1223 y([Breiman)g(et.)i(al.])k([3)o(])14 b(presen)o(ted)j(a)d(linear)g(time)f
(algorithm)f(to)j(\014nd)g(an)f(lo)q(cally)f(optimal)f(binary)i(partition,)f
(when)0 1273 y(there)i(are)f(only)g(2)f(classes.)62 1323 y([Chou])j([6)o(,)g
(5])g(presen)o(ted)j(a)d(fast)h(clustering)g(algorithm)d(that)j(\014nds)g(lo)
q(cally)e(optimal)f(N-w)o(a)o(y)i(subsets.)28 b(Ho)o(w)o(ev)o(er,)0
1372 y(this)12 b(metho)q(d)f(do)q(es)h(not)g(o\013er)g(a)f(metho)q(d)g(for)g
(selection)i(b)q(et)o(w)o(een)g(di\013eren)o(t)f(sized)h(partitions.)k(F)m
(or)11 b(example,)f(it)i(do)q(es)g(not)0 1422 y(o\013er)j(a)e(metric)g(for)h
(c)o(ho)q(osing)f(b)q(et)o(w)o(een)j(a)d(2-w)o(a)o(y)g(and)h(a)f(3-w)o(a)o(y)
g(subsetting)i(of)e(an)h(attribute's)g(v)n(alues)g(\(see)h(Figure)f(3\).)457
1756 y @beginspecial 29 @llx 484 @lly 583 @urx 608 @ury 2520
@rwi @setspecial
%%BeginDocument: Subsets.ps

50 dict begin

/arrowHeight 8 def
/arrowWidth 4 def
/none null def
/numGraphicParameters 17 def
/stringLimit 65535 def

/Begin {
save
numGraphicParameters dict begin
} def

/End {
end
restore
} def

/SetB {
dup type /nulltype eq {
pop
false /brushRightArrow idef
false /brushLeftArrow idef
true /brushNone idef
} {
/brushDashOffset idef
/brushDashArray idef
0 ne /brushRightArrow idef
0 ne /brushLeftArrow idef
/brushWidth idef
false /brushNone idef
} ifelse
} def

/SetCFg {
/fgblue idef
/fggreen idef
/fgred idef
} def

/SetCBg {
/bgblue idef
/bggreen idef
/bgred idef
} def

/SetF {
/printSize idef
/printFont idef
} def

/SetP {
dup type /nulltype eq {
pop true /patternNone idef
} {
/patternGrayLevel idef
patternGrayLevel -1 eq {
/patternString idef
} if
false /patternNone idef
} ifelse
} def

/BSpl {
0 begin
storexyn
newpath
n 1 gt {
0 0 0 0 0 0 1 1 true subspline
n 2 gt {
0 0 0 0 1 1 2 2 false subspline
1 1 n 3 sub {
/i exch def
i 1 sub dup i dup i 1 add dup i 2 add dup false subspline
} for
n 3 sub dup n 2 sub dup n 1 sub dup 2 copy false subspline
} if
n 2 sub dup n 1 sub dup 2 copy 2 copy false subspline
patternNone not brushLeftArrow not brushRightArrow not and and { ifill } if
brushNone not { istroke } if
0 0 1 1 leftarrow
n 2 sub dup n 1 sub dup rightarrow
} if
end
} dup 0 4 dict put def

/Circ {
newpath
0 360 arc
patternNone not { ifill } if
brushNone not { istroke } if
} def

/CBSpl {
0 begin
dup 2 gt {
storexyn
newpath
n 1 sub dup 0 0 1 1 2 2 true subspline
1 1 n 3 sub {
/i exch def
i 1 sub dup i dup i 1 add dup i 2 add dup false subspline
} for
n 3 sub dup n 2 sub dup n 1 sub dup 0 0 false subspline
n 2 sub dup n 1 sub dup 0 0 1 1 false subspline
patternNone not { ifill } if
brushNone not { istroke } if
} {
Poly
} ifelse
end
} dup 0 4 dict put def

/Elli {
0 begin
newpath
4 2 roll
translate
scale
0 0 1 0 360 arc
patternNone not { ifill } if
brushNone not { istroke } if
end
} dup 0 1 dict put def

/Line {
0 begin
2 storexyn
newpath
x 0 get y 0 get moveto
x 1 get y 1 get lineto
brushNone not { istroke } if
0 0 1 1 leftarrow
0 0 1 1 rightarrow
end
} dup 0 4 dict put def

/MLine {
0 begin
storexyn
newpath
n 1 gt {
x 0 get y 0 get moveto
1 1 n 1 sub {
/i exch def
x i get y i get lineto
} for
patternNone not brushLeftArrow not brushRightArrow not and and { ifill } if
brushNone not { istroke } if
0 0 1 1 leftarrow
n 2 sub dup n 1 sub dup rightarrow
} if
end
} dup 0 4 dict put def

/Poly {
3 1 roll
newpath
moveto
-1 add
{ lineto } repeat
closepath
patternNone not { ifill } if
brushNone not { istroke } if
} def

/Rect {
0 begin
/t exch def
/r exch def
/b exch def
/l exch def
newpath
l b moveto
l t lineto
r t lineto
r b lineto
closepath
patternNone not { ifill } if
brushNone not { istroke } if
end
} dup 0 4 dict put def

/Text {
ishow
} def

/idef {
dup where { pop pop pop } { exch def } ifelse
} def

/ifill {
0 begin
gsave
patternGrayLevel -1 ne {
fgred bgred fgred sub patternGrayLevel mul add
fggreen bggreen fggreen sub patternGrayLevel mul add
fgblue bgblue fgblue sub patternGrayLevel mul add setrgbcolor
eofill
} {
eoclip
originalCTM setmatrix
pathbbox /t exch def /r exch def /b exch def /l exch def
/w r l sub ceiling cvi def
/h t b sub ceiling cvi def
/imageByteWidth w 8 div ceiling cvi def
/imageHeight h def
bgred bggreen bgblue setrgbcolor
eofill
fgred fggreen fgblue setrgbcolor
w 0 gt h 0 gt and {
l b translate w h scale
w h true [w 0 0 h neg 0 h] { patternproc } imagemask
} if
} ifelse
grestore
end
} dup 0 8 dict put def

/istroke {
gsave
brushDashOffset -1 eq {
[] 0 setdash
1 setgray
} {
brushDashArray brushDashOffset setdash
fgred fggreen fgblue setrgbcolor
} ifelse
brushWidth setlinewidth
originalCTM setmatrix
stroke
grestore
} def

/ishow {
0 begin
gsave
fgred fggreen fgblue setrgbcolor
/fontDict printFont findfont printSize scalefont dup setfont def
/descender fontDict begin 0 [FontBBox] 1 get FontMatrix end
transform exch pop def
/vertoffset 0 descender sub printSize sub printFont /Courier ne
printFont /Courier-Bold ne and { 1 add } if def {
0 vertoffset moveto show
/vertoffset vertoffset printSize sub def
} forall
grestore
end
} dup 0 3 dict put def

/patternproc {
0 begin
/patternByteLength patternString length def
/patternHeight patternByteLength 8 mul sqrt cvi def
/patternWidth patternHeight def
/patternByteWidth patternWidth 8 idiv def
/imageByteMaxLength imageByteWidth imageHeight mul
stringLimit patternByteWidth sub min def
/imageMaxHeight imageByteMaxLength imageByteWidth idiv patternHeight idiv
patternHeight mul patternHeight max def
/imageHeight imageHeight imageMaxHeight sub store
/imageString imageByteWidth imageMaxHeight mul patternByteWidth add string def
0 1 imageMaxHeight 1 sub {
/y exch def
/patternRow y patternByteWidth mul patternByteLength mod def
/patternRowString patternString patternRow patternByteWidth getinterval def
/imageRow y imageByteWidth mul def
0 patternByteWidth imageByteWidth 1 sub {
/x exch def
imageString imageRow x add patternRowString putinterval
} for
} for
imageString
end
} dup 0 12 dict put def

/min {
dup 3 2 roll dup 4 3 roll lt { exch } if pop
} def

/max {
dup 3 2 roll dup 4 3 roll gt { exch } if pop
} def

/arrowhead {
0 begin
transform originalCTM itransform
/taily exch def
/tailx exch def
transform originalCTM itransform
/tipy exch def
/tipx exch def
/dy tipy taily sub def
/dx tipx tailx sub def
/angle dx 0 ne dy 0 ne or { dy dx atan } { 90 } ifelse def
gsave
originalCTM setmatrix
tipx tipy translate
angle rotate
newpath
0 0 moveto
arrowHeight neg arrowWidth 2 div lineto
arrowHeight neg arrowWidth 2 div neg lineto
closepath
patternNone not {
originalCTM setmatrix
/padtip arrowHeight 2 exp 0.25 arrowWidth 2 exp mul add sqrt brushWidth mul
arrowWidth div def
/padtail brushWidth 2 div def
tipx tipy translate
angle rotate
padtip 0 translate
arrowHeight padtip add padtail add arrowHeight div dup scale
arrowheadpath
ifill
} if
brushNone not {
originalCTM setmatrix
tipx tipy translate
angle rotate
arrowheadpath
istroke
} if
grestore
end
} dup 0 9 dict put def

/arrowheadpath {
newpath
0 0 moveto
arrowHeight neg arrowWidth 2 div lineto
arrowHeight neg arrowWidth 2 div neg lineto
closepath
} def

/leftarrow {
0 begin
y exch get /taily exch def
x exch get /tailx exch def
y exch get /tipy exch def
x exch get /tipx exch def
brushLeftArrow { tipx tipy tailx taily arrowhead } if
end
} dup 0 4 dict put def

/rightarrow {
0 begin
y exch get /tipy exch def
x exch get /tipx exch def
y exch get /taily exch def
x exch get /tailx exch def
brushRightArrow { tipx tipy tailx taily arrowhead } if
end
} dup 0 4 dict put def

/midpoint {
0 begin
/y1 exch def
/x1 exch def
/y0 exch def
/x0 exch def
x0 x1 add 2 div
y0 y1 add 2 div
end
} dup 0 4 dict put def

/thirdpoint {
0 begin
/y1 exch def
/x1 exch def
/y0 exch def
/x0 exch def
x0 2 mul x1 add 3 div
y0 2 mul y1 add 3 div
end
} dup 0 4 dict put def

/subspline {
0 begin
/movetoNeeded exch def
y exch get /y3 exch def
x exch get /x3 exch def
y exch get /y2 exch def
x exch get /x2 exch def
y exch get /y1 exch def
x exch get /x1 exch def
y exch get /y0 exch def
x exch get /x0 exch def
x1 y1 x2 y2 thirdpoint
/p1y exch def
/p1x exch def
x2 y2 x1 y1 thirdpoint
/p2y exch def
/p2x exch def
x1 y1 x0 y0 thirdpoint
p1x p1y midpoint
/p0y exch def
/p0x exch def
x2 y2 x3 y3 thirdpoint
p2x p2y midpoint
/p3y exch def
/p3x exch def
movetoNeeded { p0x p0y moveto } if
p1x p1y p2x p2y p3x p3y curveto
end
} dup 0 17 dict put def

/storexyn {
/n exch def
/y n array def
/x n array def
n 1 sub -1 0 {
/i exch def
y i 3 2 roll put
x i 3 2 roll put
} for
} def




Begin
[ .8 0 0 .8 0 0 ] concat
/originalCTM matrix currentmatrix def

Begin %I Elli
1 0 0 [] 0 SetB
0 0 0 SetCFg
1 1 1 SetCBg
none SetP %I p n
[ 1 0 0 1 0 247 ] concat
151 490 50 20 Elli
End

Begin %I Line
1 0 1 [] 0 SetB
0 0 0 SetCFg
1 1 1 SetCBg
none SetP %I p n
[ 1 0 0 1 -60 207 ] concat
211 510 191 441 Line
End

Begin %I Line
1 0 1 [] 0 SetB
0 0 0 SetCFg
1 1 1 SetCBg
none SetP %I p n
[ 1 0 0 1 -60 207 ] concat
211 510 231 441 Line
End

Begin %I Line
1 0 1 [] 0 SetB
0 0 0 SetCFg
1 1 1 SetCBg
none SetP %I p n
[ 1 0 0 1 -60 207 ] concat
211 510 151 441 Line
End

Begin %I Line
1 0 1 [] 0 SetB
0 0 0 SetCFg
1 1 1 SetCBg
none SetP %I p n
[ 1 0 0 1 -60 207 ] concat
211 510 111 441 Line
End

Begin %I Line
1 0 1 [] 0 SetB
0 0 0 SetCFg
1 1 1 SetCBg
none SetP %I p n
[ 1 0 0 1 -60 207 ] concat
211 510 270 441 Line
End

Begin %I Line
1 0 1 [] 0 SetB
0 0 0 SetCFg
1 1 1 SetCBg
none SetP %I p n
[ 1 0 0 1 -60 207 ] concat
211 510 310 441 Line
End

Begin %I Elli
1 0 0 [] 0 SetB
0 0 0 SetCFg
1 1 1 SetCBg
none SetP %I p n
[ 1 0 0 1 277 246 ] concat
151 490 50 20 Elli
End

Begin %I Line
1 0 1 [] 0 SetB
0 0 0 SetCFg
1 1 1 SetCBg
none SetP %I p n
[ 1 0 0 1 217 376 ] concat
211 341 211 271 Line
End

Begin %I Elli
1 0 0 [] 0 SetB
0 0 0 SetCFg
1 1 1 SetCBg
none SetP %I p n
[ 1 0 0 1 518 245 ] concat
151 490 50 20 Elli
End

Begin %I Text
0 0 0 SetCFg
/Courier 10 SetF
[ 2.26804 0 0 2.90909 41 636.091 ] concat
[
(1  2  3  4  5  6)
] Text
End

Begin %I Line
1 0 1 [] 0 SetB
0 0 0 SetCFg
1 1 1 SetCBg
none SetP %I p n
[ 1 0 0 1 358 446 ] concat
310 271 270 202 Line
End

Begin %I Line
1 0 1 [] 0 SetB
0 0 0 SetCFg
1 1 1 SetCBg
none SetP %I p n
[ 1 0 0 1 358 446 ] concat
310 271 350 202 Line
End

Begin %I Line
1 0 1 [] 0 SetB
0 0 0 SetCFg
1 1 1 SetCBg
none SetP %I p n
[ 1 0 0 1 169 506 ] concat
259 211 199 142 Line
End

Begin %I Line
1 0 1 [] 0 SetB
0 0 0 SetCFg
1 1 1 SetCBg
none SetP %I p n
[ 1 0 0 1 169 506 ] concat
259 211 318 142 Line
End

Begin %I Text
0 0 0 SetCFg
/Courier 10 SetF
[ 1.77215 0 0 2.90909 588 636.091 ] concat
[
(1,3,5,6   2,4)
] Text
End

Begin %I Text
0 0 0 SetCFg
/Courier 10 SetF
[ 1.87059 0 0 2.90909 340 636.091 ] concat
[
(1,3,4  5,6   2)
] Text
End

End %I eop

showpage


end
%%EndDocument
 @endspecial 316 1859 a(Figure)g(3:)k(A)c(6-w)o(a)o(y)m(,)d(3-w)o(a)o(y)i
(and)h(2-w)o(a)o(y)f(partitioning)f(of)h(an)h(attribute's)g(v)n(alues)0
2018 y Fk(1.4)56 b(The)18 b(Decision)g(Graph)62 2095 y Fr(In)g(this)g(pap)q
(er,)h(w)o(e)e(examine)g(what)g(w)o(e)h(consider)h(an)e(elegan)o(t)h
(solution)f(to)g(the)i(replication)e(and)g(fragmen)o(tation)0
2145 y(problems.)22 b(This)16 b(solution)f(in)o(v)o(olv)o(es)f(merging)g
(duplicated)i(subtree)i(with)d(a)31 b Fp(Join)h Fr(op)q(erator)16
b(as)g(sho)o(wn)g(in)f(Figure)h(4.)0 2195 y Fp(De)n(cision)f(Gr)n(aphs)p
Fr(,)f(suc)o(h)g(as)g(the)h(one)f(depicted)h(in)e(Figure)h(4,)g(are)g
(generalizations)g(of)f(decision)h(trees,)h(ha)o(ving)e(decision)0
2244 y(no)q(des)i(and)f(lea)o(v)o(es.)k(The)d(feature)g(that)f(distinguishes)
g(decision)g(graphs)g(from)f(decision)h(trees)i(is)d(that)i(decision)f
(graphs)0 2294 y(ma)o(y)f(also)g(con)o(tain)h(Joins.)20 b(A)15
b(Join)f(is)g(represen)o(ted)j(b)o(y)e(t)o(w)o(o)f(no)q(des)h(ha)o(ving)e(a)i
(common)c(c)o(hild,)j(and)g(this)h(sp)q(eci\014es)h(that)0
2344 y(t)o(w)o(o)11 b(subsets)j(ha)o(v)o(e)d(some)g(common)e(prop)q(erties,)k
(and)e(hence)i(can)f(b)q(e)h(considered)g(as)e(one)h(subset.)19
b(The)12 b(manner)f(in)g(whic)o(h)0 2394 y(ob)r(jects)k(are)f(categorized)h
(b)o(y)f(decision)g(graphs)g(is)g(the)g(same)f(as)h(that)g(of)f(decision)i
(trees.)62 2444 y(Eac)o(h)e(decision)f(tree)i(and)e(decision)h(graph)f
(de\014ne)h(a)25 b Fp(c)n(ate)n(gorization)g Fr(\(i.e.,)12
b(some)f(partitioning)g(of)h(the)h(ob)r(ject)g(space)0 2493
y(in)o(to)f(disjoin)o(t)g(categories\).)18 b(The)c(set)f(of)g(decision)g
(functions)f(represen)o(table)j(b)o(y)e(graphs)g(is)g(exactly)f(the)i(same)e
(as)h(the)g(set)0 2543 y(represen)o(table)k(b)o(y)d(trees.)22
b(Ho)o(w)o(ev)o(er,)14 b(the)h(set)h(of)e(categorizations)h(whic)o(h)f(can)h
(en)o(ter)g(in)o(to)f(the)h(de\014nition)g(of)f(a)g(decision)0
2593 y(function)g(are)g(di\013eren)o(t.)19 b(F)m(or)13 b(example,)f(the)j
(categorizations)f(for)766 2677 y(\()p Fj(A)23 b Fi(^)g Fj(B)r
Fr(\))g Fi(_)g Fr(\()p Fj(C)j Fi(^)d Fj(D)q Fr(\))0 2761 y(giv)o(en)10
b(in)f(Figure)i(1)e(and)h(Figure)h(4)f(are)g(di\013eren)o(t)h(since)g(the)g
(decision)f(tree)i(partitions)d(the)i(ob)r(ject)g(space)g(in)o(to)f(7)g
(categories,)0 2811 y(while)j(the)i(decision)f(graph)g(partitions)f(the)i(ob)
r(ject)f(space)h(in)o(to)e(2)h(categories.)965 2936 y(3)p eop
%%Page: 4 4
bop 682 596 a @beginspecial 116 @llx 503 @lly 388 @urx 757
@ury 1440 @rwi @setspecial
%%BeginDocument: ABCD.dgraph.ps
/MAV 300 dict def
MAV begin 
/useClip true def 
/top    0 def 
/left   1 def 
/bottom 2 def 
/right  3 def 
/CM     6 array def 
/CTM    6 array def 
/CTMR   6 array def 
/MTC    6 array def 
/blimit 1500 def 
/bcnt   0 def 
/rbox 8 array def 
/segbox 8 array def 
/bbox1 4 array def 
/c1 3 array def 
/c2 3 array def 
/d 3 array def    
/delta 3 array def 
/mycurrentrgbcolor 3 array def 
/ulx 0 def 
/uly 1 def 
/llx 2 def 
/lly 3 def 
/urx 4 def 
/ury 5 def 
/lrx 6 def 
/lry 7 def 
/sp [0 0] def 
/ep [0 0] def 
/bbox 4 array def 
/pbox 4 array def 
/scrnProc currentscreen 3 1 roll pop pop def
/currentcolorscreen where {
begin
currentcolorscreen
end
3 1 roll pop pop 
4 2 roll pop pop 
5 -2 roll pop pop 
6 -2 roll pop pop 
/kProc exch def 
/bProc exch def 
/gProc exch def 
/rProc exch def 
} if 
/Max {2 copy gt {pop}{exch pop} ifelse} bind def
/Min {2 copy lt {pop}{exch pop} ifelse} bind def
/cellPenW 72.0 /currentcolorscreen where
{begin currentcolorscreen end pop pop
10 1 roll pop pop 8 1 roll pop pop
 6 1 roll pop pop Max Max Max }
{currentscreen pop pop} ifelse div 2.0 div def
/rect { 
 /saveobj save def 
 R PC PF LC SS 
 saveobj restore 
} bind def 
/R { 
 newpath
 pbox astore pop
 0 792 translate 1 -1 scale CTMR currentmatrix pop exch translate
 /objectCord mstore def
 pbox right get 2 div
 dup pbox left get exch sub
 pbox left 3 -1 roll put 
 dup pbox right 3 -1 roll put
 pbox bottom get 2 div 
 dup pbox top get exch sub
 pbox top 3 -1 roll put
 dup pbox bottom 3 -1 roll put
 translate 
 CTM currentmatrix pop
 57.3 mul rotate
 RT
} bind def
 /SaveScreenBW {
 currentscreen
 /scrnProc exch def
 /scrnAngle exch def
 /scrnFreq exch def
 } bind def
 /RestoreScreenBW {
 scrnFreq scrnAngle MAV /scrnProc get setscreen
 } bind def
 /SetFreqAngleBW {
 currentscreen
 3 1 roll
 pop pop
 setscreen
 } bind def
 /SaveScreenColor {
 currentcolorscreen
 /grayProc exch def
 /grayAngle exch def
 /grayFreq exch def
 /bProc exch def
 /bAngle exch def
 /bFreq exch def
 /gProc exch def
 /gAngle exch def
 /gFreq exch def
 /rProc exch def
 /rAngle exch def
 /rFreq exch def
 } bind def
 /RestoreColorScreen {
 rFreq rAngle MAV /rProc get gFreq gAngle MAV /gProc get bFreq bAngle MAV /bProc get grayFreq grayAngle MAV /grayProc get setcolorscreen
 } bind def
 /SetFreqAngleColor { 
 currentcolorscreen 
 3 1 roll pop pop
 4 2 roll pop pop
 5 -2 roll pop pop
 6 -2 roll pop pop
 4 1 roll 
 6 1 roll 
 8 1 roll 
 10 1 roll 
 setcolorscreen 
 } bind def 
/initmsaverestore { 
userdict begin 
/mdict 10 dict def 
mdict begin 
/mindex -1 def 
/mstacksize 25 def 
/mstack mstacksize array def 
/incmindex { 
/mindex mindex 1 add def 
} bind def 
/decmindex { 
/mindex mindex 1 sub def 
} bind def 
/checkmindex { 
mindex 0 lt { 
(%ERROR: msave/mrestore stack underflow: Offending command 'mrestore'
) print flush 
stop 
} 
{ 
mindex mstacksize ge { 
(%ERROR: msave/mrestore stack overflow: Offending command 'msave'
) print flush 
stop 
} if 
} ifelse 
} bind def 
/mpush { 
incmindex 
checkmindex 
mstack mindex 
3 -1 roll put 
} bind def 
/mpop { 
checkmindex 
mstack mindex get 
decmindex 
} bind def 
end 
end 
} bind def 
/msave { 
mdict begin 
matrix currentmatrix mpush 
end 
} bind def 
/mrestore { 
mdict begin 
mpop setmatrix 
end 
} bind def 
/msavelevel { 
mdict begin 
mindex 1 add 
end 
} bind def 
/mstore {
matrix currentmatrix
} bind def
/AutoSizeY {
0 0 pl
dup 3 1 roll
4 -1 roll  
add
pl exch pop
exch sub
} bind def
/pl {  
transform
0.25 sub round 0.25 add exch
0.25 sub round 0.25 add exch
itransform
} bind def
/pll {
transform
round exch
round exch
itransform
} bind def
/pr { 
dtransform
round exch
round exch
idtransform
} bind def
/m { 
pl  moveto
} bind def
/l { 
pl lineto
} bind def
/c { 
pl curveto
} bind def
/rm { 
pr rmoveto
} bind def
/rl { 
pr rlineto
} bind def
/ar { 
5 -2 roll pl
5 2 roll
arc
} bind def
/an { 
5 -2 roll pl
5 2 roll
arcn
} bind def
/MakePatternFont {
/FontDict 20 dict def
FontDict begin
/FontName exch def
/Encoding exch def
/FontMatrix [1 0 0 1 0 0 ] def
/FontType 3 def
/FontBBox [ 0 0 1 1 ] def
/PatternDict exch def
/RenderPattern {
patternDict exch get
exec
} bind def
/BuildChar {
exch begin
1 0 0 0 1 1 setcachedevice
Encoding exch get RenderPattern
end
} bind def
FontName FontDict definefont pop
end
} bind def
/SnapToPattenGrid
	{
	exch
	dup 0 lt {
		1 index sub
	} if
	1 index
	div truncate
	mul
} bind def
/FillPatternString {
dup length
1 sub
0 1 3 -1 roll {
2 index
2 index
3 -2 roll
put
} for
pop pop
} bind def
/AutoSizeY {
	0.0 exch dtransform
	round
	idtransform exch pop
} bind def
 /AutoSizeX {
	0.0 dtransform
	exch
	round
	exch
	idtransform pop
} bind def 
/AutoCellSize {
	AutoSizeY
	exch
	AutoSizeX
	exch
} bind def
/CheckPath {
	false
	{ pop pop pop true exit}
	{ pop pop pop true exit}
	{ pop pop pop pop pop pop pop true exit}
	{ pop true exit}
	pathforall
} bind def
/PatternFill {					%		patternCharacter
	/patternString 1 string def
	/cm mstore def
	patternMatrix setmatrix
	1 1 AutoCellSize
	dup 0 eq { pop 1} if
	exch
	dup 0 eq { pop 1} if
	exch
	/patternSize exch 24.0 mul def
	/PatternSizeX exch 24.0 mul patternString length mul def
	/flaterror 0 def
	patternString FillPatternString
	gsave
		flaterror 1 add setflat
		flattenpath
		pathbbox
	grestore
	psy add flaterror add psy SnapToPattenGrid
	exch psx add flaterror add psx SnapToPattenGrid
	3 -1 roll flaterror sub psy SnapToPattenGrid
	4 -1 roll flaterror sub psx SnapToPattenGrid
	4 2 roll pll
	4 2 roll pll
	/llxsnap exch def
	/llysnap exch def
	/urxsnap exch def
	/urysnap exch def
	gsave
		useClip true eq {clip}{eoclip} ifelse newpath
		/PatternFont findfont [psx 0.0 0.0 psy 0.0 0.0] makefont setfont
		llysnap patternSize urysnap {
			llxsnap exch moveto
			llxsnap PatternSizeX urxsnap {
				pop
				patternString show
				%currentpoint am
			} for
		} bind for
	grestore
	cm setmatrix
} bind def				%		End 'PatternFill'
/DefaultPatternFont {
	/cm mstore def
	patternMatrix setmatrix
	1 1 AutoCellSize
	dup 0 eq { pop 1} if
	exch
	dup 0 eq { pop 1} if
	exch
	/psy exch iSizeY mul def
	/psx exch iSizeX mul def
	/patternDict 64 dict def
	patternDict begin
		/NotDef {} def
		/LiteDiagLines {
			iSizeX iSizeY false [iSizeX 0.0 0.0 iSizeY -1.0 mul  0.0 iSizeY]
			{pat}
			imagemask
		} bind def
	end
	/CustEncoding 256 array def
	0 255 1 {
		CustEncoding exch /NotDef put
	} bind for
	CustEncoding 65 /LiteDiagLines put
	patternDict CustEncoding /PatternFont MakePatternFont
	/pathSegProc {
		strokepath
		CheckPath {
			65 PatternFill newpath
		} if
	} bind def
	cm setmatrix
} bind def
/XRound {
	dup
	3 -1 roll
	exch mul round
	exch div
} bind def
/RoundMatrix {
	/i 0 def
	dup {
		100000.0 XRound
		1 index
		exch i exch put
		/i i 1 add def
	} forall
} bind def
/GetBoxesRatio {
3 -1 roll sub
7 1 roll
exch sub
6 1 roll
3 -1 roll sub
5 1 roll
exch sub
4 1 roll
3 -1 roll div
3 1 roll
exch div
exch
} bind def
/T {792 exch sub} bind def
/sx 0 def
/sy 0 def
/ex 0 def
/ey 0 def
/lw  0 def
/siz 0 def
/U {gsave 0 setlinecap
/lw siz 0.078125 mul def  /ey exch neg def /ex exch def /sy exch neg def /sx exch def
fontkind plain eq 
 {
  lw siz 0.0119444 mul sub setlinewidth sx sy moveto ex ey lineto stroke
 }
 {
   currentdict /outlineFontSize known outlineFontSize 0 gt and
     {
       fontkind outline eq
         {
           /sy sy 0.0119444 siz mul sub def
           /ey ey 0.0119444 siz mul sub def
           gsave 
           1 1 1 setrgbcolor lw siz 0.0119444 mul sub setlinewidth sx sy moveto ex ey lineto stroke
           grestore
           lw siz 0.0119444 mul sub setlinewidth sx sy moveto ex ey lineto
           strokepath 0.0119444 siz mul setlinewidth stroke
         } if
       fontkind shadow eq fontkind outlineshadow eq or
         {
           /sy sy 0.0358332 siz mul sub def
           /ey ey 0.0358332 siz mul sub def
           lw setlinewidth
           lw 2 div sx add sy
           lw 2 div sub moveto
           lw 2 div ex add ey
           lw 2 div sub lineto stroke 
           gsave
           1 1 1 setrgbcolor lw siz 0.0119444 mul sub setlinewidth sx sy moveto ex ey lineto stroke
           grestore
           lw siz 0.0119444 mul sub setlinewidth sx sy moveto ex ey lineto
           strokepath 0.0119444 siz mul setlinewidth stroke
         } if
      } if
 } ifelse
grestore} bind def
/plain 1 def
/outline 2 def
/shadow 3 def
/outlineshadow 4 def
/fess {
	currentdict /outlineFontSize known {
		/outlineFontSize 2 index def
	} if
	findfont exch dup /siz exch def scalefont setfont
} bind def
/SHDW {gsave siz oldfontname fess siz 0.055 mul x add y siz 0.05 mul sub moveto c show grestore} def
/NRML {gsave 1 1 1 setrgbcolor siz oldfontname fess x y moveto c show grestore siz /Outline fess  x y moveto c show} def
/S {
fontkind plain eq {neg moveto show} if
fontkind outline eq {neg /y exch def /x exch def /c exch def NRML} if
fontkind shadow eq {neg /y exch def /x exch def /c exch def SHDW NRML} if
fontkind outlineshadow eq {neg /y exch def /x exch def /c exch def SHDW NRML} if
} bind def
/F {
/fontkind exch def
fontkind plain eq {fess} if
fontkind outline eq {dup /oldfontname exch def exch dup /siz exch def exch OLF} if
fontkind shadow eq {dup /oldfontname exch def exch dup /siz exch def exch OLF} if
fontkind outlineshadow eq {dup /oldfontname exch def exch dup /siz exch def exch OLF} if
} bind def
/makeoutlinedict 15 dict def
/makeoutlinefont
 {
  makeoutlinedict begin
   /uniqueid exch def
   /strokewidth exch def
   /newfontname exch def
   /basefontname exch def
   FontDirectory basefontname known not {
    /basefontname /Times-Roman def
   } if
   /basefontdict basefontname findfont def
   /numentries basefontdict maxlength 1 add def
   basefontdict /UniqueID known not
   {/numentries numentries 1 add def} if
   /outfontdict numentries dict def
   basefontdict
   {
     exch dup /FID ne {exch outfontdict 3 1 roll put} {pop pop} ifelse
	  }forall
   outfontdict /FontName newfontname put
   outfontdict /PaintType 2 put
   outfontdict /StrokeWidth strokewidth put
   outfontdict /UniqueID uniqueid put
   newfontname outfontdict definefont pop
  end
  }def
/UID {
 findfont dup /UniqueID known
  {/UniqueID get 1 add}
  {pop 1}
  ifelse
} def
/OLF {
dup
/Outline
1000 62 div
4 -1 roll
UID
/outlineFontSize 5 index def
makeoutlinefont
/Outline findfont exch scalefont setfont
} def
/CopyEncoding {
findfont
/Encoding get
dup length array
/tarrayz exch def
tarrayz 0
3 -1 roll
putinterval
tarrayz
} bind def
/Re-encode {
dup length array copy
/eap 0 def
exch {
dup type /integertype eq {
/eap exch def
} {
1 index
exch
eap exch
put
/eap eap 1 add def
} ifelse
} forall
} bind def
/EncodeFont	{
findfont dup
length dict
begin
{	1 index /FID ne
{ def }
{ pop pop } ifelse
} forall
/FontName exch def
/Encoding exch def
FontName currentdict
end
definefont pop
} bind def
/clip2pathbbox {
	/magicNum linewidth 2 div 1 2 sqrt div mul def
	pathbbox
	/urymn exch magicNum add def
	/urxmn exch magicNum add def
	/llymn exch magicNum sub def
	/llxmn exch magicNum sub def
	newpath llxmn llymn moveto llxmn urymn lineto urxmn urymn lineto urxmn llymn lineto
	closepath clip newpath
} bind def
/Line {
MAV /LC get length 0 ne
{
	gsave
			newpath
			MAV /ArrowType get length 0 eq
			MAV /SD get length 0 eq and
			{2 setlinecap /UseClip {clip2pathbbox} def }
			{0 setlinecap /UseClip {} def } ifelse
			0 792 translate
			1 -1 scale
			CTM currentmatrix pop
			/yStart exch def /xStart exch def /yEnd exch def /xEnd exch def /linewidth exch def
			MAV /ArrowType get length 0 eq xStart xEnd ne yStart yEnd ne and and
			{xStart yStart moveto xEnd yEnd lineto UseClip xStart yStart moveto xEnd yEnd lineto}
			{xStart yStart moveto xEnd yEnd lineto} ifelse
			linewidth setlinewidth SD strokepath
			CheckPath {LC PF ArrowType} if
	grestore
}
{pop pop pop pop pop} ifelse
} bind def
/ZeroLine {
	gsave
		newpath
		MAV /ArrowType get length 0 ne {
			/UseClip {} def
			0 792 translate
			1 -1 scale
			pop pop pop pop pop
			CTM currentmatrix pop
			ArrowType
		} if
	grestore
} bind def
/CompensateForStroke {
	sin currentlinewidth mul
	exch
	cos currentlinewidth mul
	dup 0 translate
	4 -1 roll exch 2.0 mul sub
	3 1 roll
	2.0 mul sub
} bind def
/arrowdict 10 dict def
arrowdict begin
	/SwallowTail {
		newpath
		0.0 0.0 moveto
		1.0 -.5 lineto
		.666 0.0 lineto
		1.0 .5 lineto
		closepath
	} bind def
	/Triangular {
		newpath
		0.0 0.0 moveto
		1.0 -.5 lineto
		1.0 .5 lineto
		closepath
	} bind def
	/OpenTri {
		newpath
		1.0 0.5 moveto
		0.0 0.0 lineto
		1.0 -0.5 lineto
	} bind def
	/ClosedTri {
		newpath
		1.0 0.5 moveto
		0.0 0.0 lineto
		1.0 -0.5 lineto
		closepath
	} bind def
	/SlashBar {
		newpath
		0.5 -.5 moveto
		-.5 0.5 lineto
	} bind def
	/Dot {
		newpath
		0.5 0.0 moveto
		0 0 1 0 360 arc
		closepath
	} bind def
	/ExtSlashBar {
		newpath
		1.0 -.5 moveto
		0.0 0.5 lineto
	} bind def
end
/ScaleArrowHead {
	0 0 4 -2 roll
	0 0 1 1
	8 -4 roll GetBoxesRatio
	scale
} bind def
/DrawArrowHead {
	gsave
	[] 0 setdash
	currentpoint translate rotate
	{
		4 copy
		gsave
			initmatrix
			100 200 translate
			msave
				ScaleArrowHead pop
				arrowdict exch get exec
			mrestore
			strokepath
			0 0 3 index 3 index
			pathbbox 8 4 roll
			GetBoxesRatio
			4 2 roll
		grestore
		3 index 1.0 exch sub
		6 -1 roll
		{
			2 index mul
			0 translate
		}{
			pop
		} ifelse
		msave
			ScaleArrowHead scale
			arrowdict exch get exec
		mrestore
		strokepath
	} {
		msave
		ScaleArrowHead
		arrowdict exch get exec
		mrestore
	} ifelse
		CheckPath {
			LC PF
		} if
	grestore
} bind def
/SR { 
 pbox left get pbox top get moveto 
 pbox right get pbox top get lineto 
 pbox right get pbox bottom get lineto 
 pbox left get pbox bottom get lineto 
 closepath
} bind def 
/E {
1.415 setmiterlimit
CM currentmatrix pop
pbox right get pbox left get sub abs dup
pbox bottom get pbox top get sub abs dup 3 -1 roll
lt {exch dup 3 -1 roll exch div 1 exch}
{dup 3 -1 roll exch div 1} ifelse scale 
0 0 3 -1 roll 2 div 0 360 arc closepath
CM setmatrix
} bind def
/StripFromFront { 
dup length
2 index sub
3 1 roll
exch 3 -1 roll
getinterval
} bind def
/MakePathArray { 
 /k 0 def 
 {/k k 1 add def pop pop}{/k k 1 add def pop pop}{/k k 1 add def pop pop pop pop pop pop}{/k k 1 add def }pathforall 
 k array
 /k 0 def 
 {{moveto} 3 array astore 1 index k 3 -1 roll put /k k 1 add def} 
 {{lineto} 3 array astore 1 index k 3 -1 roll put /k k 1 add def} 
 {{curveto} 7 array astore 1 index k 3 -1 roll put /k k 1 add def} 
 {{closepath} 1 array astore 1 index k 3 -1 roll put /k k 1 add def} 
pathforall 
}bind def 
/MakeFlatPathArray { 
/k 0 def 
{/k k 1 add def pop pop}{/k k 1 add def pop pop}{pop pop pop pop pop pop}{}pathforall 
k array
/k 0 def 
{{moveto} 3 array astore 1 index k 3 -1 roll put /k k 1 add def} 
{{lineto} 3 array astore 1 index k 3 -1 roll put /k k 1 add def} 
{ pop pop pop pop pop pop} 
{} 
pathforall 
}bind def 
/FractionalLine {
2 index sub
.00001 mul
exch
3 index sub
.00001 mul
4 -1 roll add
3 1 roll
add
} bind def
/calcLineLength {
 exch
 4 -1 roll
 sub
 dup mul
 3 1 roll exch
 sub
 dup mul
 add sqrt
} bind def
/InitTotalLineLength {
 /oldY exch def
 /oldX exch def
 theDash aload pop currentLineLength add setdash
} bind def
/AccumeLineLength {
 3 copy pop
 2 copy
 oldX oldY
 4 2 roll calcLineLength
 /segmentLength exch def
 /currentLineLength currentLineLength segmentLength add def
 /oldY exch def
 /oldX exch def
} bind def
/DecumeLastLineLength {
 /currentLineLength currentLineLength segmentLength sub def
} bind def
/DrawFlattendSegment {
 /pointCount 2 def
 dup 0 lt { pop 0 } if
 fpc
 3 1 roll
 2 index
 1 index
 gt {
 2 copy get
 dup length
 dup 3 eq {
 pop
 dup 0 get
 exch 1 get
 2 copy InitTotalLineLength  
 m
 } {
 } ifelse
 } {
 pop 1 index
 } ifelse
 dup 1 add
 3 index
 exch sub
 dup 10 gt { pop 10} if
 {
 1 add
 2 copy
 get aload pop
 AccumeLineLength
 exec
 } repeat
 3 1 roll pop pop
 DecumeLastLineLength
} bind def
/IncFPC {
 fpc add
 /fpc exch def
} bind def
/DrawFlatPathArray {
 fpc
 0 { 
 dup 2 index
 1 sub
 lt { 
 flatPathArray exch
 newpath
 1 sub DrawFlattendSegment
 gsave
 pathSegProc
 grestore
 newpath
 }
 {
 pop pop
 exit
 } ifelse
 } loop
} bind def
/RecordFirstSubSegment {
 closepathArray 0 pathArray 0 get
 put
 closepathArray 1
 pathArray 0 get aload pop pop
 pathArray 1 get dup length 3 eq {
 aload pop pop
 } {
 newpath
 0 0 moveto
 aload pop exec
 /segmentArray flattenpath MakeFlatPathArray def
 segmentArray 1 get aload pop pop
 } ifelse
 FractionalLine {lineto} 3 array astore
 put
} bind def
/AppendClosePath {
 closepathArray 0 get 2 {lineto} put
 flatPathArray fpc closepathArray 0 get put
 1 IncFPC
 flatPathArray fpc closepathArray 1 get put
 1 IncFPC
} bind def
/RecordCurrentDash {
 /theDash
 currentdash 2 array astore def
 /currentLineLength 0 def
} bind def
/PatternStroke {
	0 setlinecap
 RecordCurrentDash
 /saveFlat currentflat def
 .5 setflat
 /pathArray MakePathArray def
 /closepathArray 2 array def
 /pathLength pathArray length def
 /flatPathArray 513 array def
 /currentLineLength 0 def
 /fpc 0 def
 pathArray pathLength 1 sub get
 length 1 eq {
 /usingClosepath true def
 RecordFirstSubSegment
 /pathLength pathLength 1 sub def
 } {
 /usingClosepath false def
 } ifelse
 0 1 pathLength 1 sub {
 pathArray exch get
 dup length 3 eq {
 fpc 1 add 512 ge {
 DrawFlatPathArray
 fpc 2 ge {
 flatPathArray flatPathArray fpc 2 sub get 0 put
 flatPathArray flatPathArray fpc 1 sub get 1 put
 /fpc 2 def
 }{
 /fpc 0 def
 } ifelse
 } if
 flatPathArray exch fpc exch put
 1 IncFPC
 } {
 dup length 7 eq {
 newpath
 /nToStrip 0 def
 fpc 1 gt {
 flatPathArray fpc 2 sub get aload pop pop m
 flatPathArray fpc 1 sub get aload pop exec
 /nToStrip 2 def
 } {
 fpc 1 eq {
 flatPathArray fpc 1 sub get aload pop exec
 /nToStrip 2 def
 } if
 } ifelse
 aload pop exec
 /segmentArray flattenpath MakeFlatPathArray def
 /segmentArray nToStrip segmentArray StripFromFront def
 segmentArray length fpc add 512 lt {
 flatPathArray fpc segmentArray putinterval
 segmentArray length IncFPC
 } {
 DrawFlatPathArray
 fpc 1 gt {
 flatPathArray flatPathArray fpc 2 sub get 0 exch put
 flatPathArray flatPathArray fpc 1 sub get 1 exch put
 /fpc 2 def
 }{
 /fpc 0 def
 } ifelse
 segmentArray length 512 lt {
 flatPathArray fpc segmentArray putinterval
 segmentArray length IncFPC
 } {
 segmentArray length
 /exitLoop false def
 0 
 {
 2 copy sub
 dup 500 gt {
 pop 500
 } { 
 /exitLoop true def
 } ifelse 
 segmentArray 2 index 2 index getinterval
 flatPathArray fpc 3 -1 roll putinterval
 dup IncFPC
 add 
 exitLoop {
 exit 
 } {
 DrawFlatPathArray
 fpc 1 gt {
 flatPathArray flatPathArray fpc 2 sub get 0 exch put
 flatPathArray flatPathArray fpc 1 sub get 1 exch put
 /fpc 2 def
 }{
 /fpc 0 def
 } ifelse
 } ifelse
 } loop
 } ifelse
 } ifelse
 } if
 } ifelse
 } for
 fpc 0 gt {
 usingClosepath {
 AppendClosePath
 } if
 DrawFlatPathArray
 } if
 saveFlat setflat
} bind def


initmsaverestore
/tctm matrix currentmatrix def
tctm RoundMatrix setmatrix
/patternMatrix mstore def
10 setmiterlimit
2 setlinecap
newpath
/RT {E} def
/SD {} def
/SS {setlinewidth SD stroke} def
/LC { /setcmykcolor where
 {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse 
} def
/PC { /setcmykcolor where
 {begin 0.000 0.000 0.000 0.000 setcmykcolor end} {1.000 1.000 1.000 setrgbcolor} ifelse 
} def
/PF {gsave fill grestore} def
1.000 0 36.000 207.000 0.000 0.000 36.000 89.999 rect
save
[ 39/quotesingle 96/grave 128/Adieresis/Aring/Ccedilla/Eacute/Ntilde/Odieresis
/Udieresis/aacute/agrave/acircumflex/adieresis/atilde/aring/ccedilla/eacute
/egrave/ecircumflex/edieresis/iacute/igrave/icircumflex/idieresis/ntilde
/oacute/ograve/ocircumflex/odieresis/otilde/uacute/ugrave/ucircumflex
/udieresis/dagger/degree/cent/sterling/section/bullet/paragraph/germandbls
/registered/copyright/trademark/acute/dieresis/.notdef/AE/Oslash
/.notdef/plusminus/.notdef/.notdef/yen/mu/.notdef/.notdef
/.notdef/.notdef/.notdef/ordfeminine/ordmasculine/.notdef/ae/oslash
/questiondown/exclamdown/logicalnot/.notdef/florin/.notdef/.notdef
/guillemotleft/guillemotright/ellipsis/.notdef/Agrave/Atilde/Otilde/OE/oe
/endash/emdash/quotedblleft/quotedblright/quoteleft/quoteright/divide
/.notdef/ydieresis/Ydieresis/fraction/currency/guilsinglleft/guilsinglright
/fi/fl/daggerdbl/periodcentered/quotesinglbase/quotedblbase/perthousand
/Acircumflex/Ecircumflex/Aacute/Edieresis/Egrave/Iacute/Icircumflex
/Idieresis/Igrave/Oacute/Ocircumflex/.notdef/Ograve/Uacute/Ucircumflex
/Ugrave/dotlessi/circumflex/tilde/macron/breve/dotaccent/ring/cedilla
/hungarumlaut/ogonek/caron]
StandardEncoding Re-encode /_Courier /Courier EncodeFont

/RT {SR} def
/LC {} def
/SS {pop} def
/PF {} def
/PC {} def
0.000 0 46.000 216.000 0.000 0.000 14.000 82.000 rect
gsave
257.000 53.000 T translate
0.0 rotate
1 1 scale
12.000 (_Courier) plain F
 /setcmykcolor where
 {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse 

(A) -40.488 3.000 S
(t) -33.488 3.000 S
(t) -26.488 3.000 S
(r) -19.488 3.000 S
(i) -12.488 3.000 S
(b) -5.488 3.000 S
(u) 1.511 3.000 S
(t) 8.511 3.000 S
(e) 15.511 3.000 S
( ) 22.511 3.000 S
(A) 29.511 3.000 S
grestore
/RT {E} def
/SD {} def
/SS {setlinewidth SD stroke} def
/LC { /setcmykcolor where
 {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse 
} def
/PC { /setcmykcolor where
 {begin 0.000 0.000 0.000 0.000 setcmykcolor end} {1.000 1.000 1.000 setrgbcolor} ifelse 
} def
/PF {gsave fill grestore} def
1.000 0 90.000 297.000 0.000 0.000 36.000 89.999 rect
/RT {E} def
/SD {} def
/SS {setlinewidth SD stroke} def
/LC { /setcmykcolor where
 {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse 
} def
/PC { /setcmykcolor where
 {begin 0.000 0.000 0.000 0.000 setcmykcolor end} {1.000 1.000 1.000 setrgbcolor} ifelse 
} def
/PF {gsave fill grestore} def
1.000 0 144.000 117.000 0.000 0.000 36.000 89.999 rect
/RT {SR} def
/LC {} def
/SS {pop} def
/PF {} def
/PC {} def
0.000 0 154.000 126.000 0.000 0.000 14.000 82.000 rect
gsave
167.000 161.000 T translate
0.0 rotate
1 1 scale
12.000 (_Courier) fess
 /setcmykcolor where
 {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse 

(A) -40.488 3.000 S
(t) -33.488 3.000 S
(t) -26.488 3.000 S
(r) -19.488 3.000 S
(i) -12.488 3.000 S
(b) -5.488 3.000 S
(u) 1.511 3.000 S
(t) 8.511 3.000 S
(e) 15.511 3.000 S
( ) 22.511 3.000 S
(C) 29.511 3.000 S
grestore
/RT {E} def
/SD {} def
/SS {setlinewidth SD stroke} def
/LC { /setcmykcolor where
 {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse 
} def
/PC { /setcmykcolor where
 {begin 0.000 0.000 0.000 0.000 setcmykcolor end} {1.000 1.000 1.000 setrgbcolor} ifelse 
} def
/PF {gsave fill grestore} def
1.000 0 198.000 207.000 0.000 0.000 36.000 89.999 rect
/RT {SR} def
/LC {} def
/SS {pop} def
/PF {} def
/PC {} def
0.000 0 208.000 216.000 0.000 0.000 14.000 82.000 rect
gsave
257.000 215.000 T translate
0.0 rotate
1 1 scale
12.000 (_Courier) fess
 /setcmykcolor where
 {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse 

(A) -40.488 3.000 S
(t) -33.488 3.000 S
(t) -26.488 3.000 S
(r) -19.488 3.000 S
(i) -12.488 3.000 S
(b) -5.488 3.000 S
(u) 1.511 3.000 S
(t) 8.511 3.000 S
(e) 15.511 3.000 S
( ) 22.511 3.000 S
(D) 29.511 3.000 S
grestore
/RT {SR} def
/SD {} def
/SS {setlinewidth SD stroke} def
/LC { /setcmykcolor where
 {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse 
} def
/PC { /setcmykcolor where
 {begin 0.000 0.000 0.000 0.000 setcmykcolor end} {1.000 1.000 1.000 setrgbcolor} ifelse 
} def
/PF {gsave fill grestore} def
1.000 0 252.000 135.000 0.000 0.000 36.000 71.999 rect
/RT {SR} def
/SD {} def
/SS {setlinewidth SD stroke} def
/LC { /setcmykcolor where
 {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse 
} def
/PC { /setcmykcolor where
 {begin 0.000 0.000 0.000 0.000 setcmykcolor end} {1.000 1.000 1.000 setrgbcolor} ifelse 
} def
/PF {gsave fill grestore} def
1.000 0 252.000 297.000 0.000 0.000 36.000 71.999 rect
/RT {SR} def
/LC {} def
/SS {pop} def
/PF {} def
/PC {} def
0.000 0 261.000 306.000 0.000 0.000 14.000 54.000 rect
gsave
333.000 268.000 T translate
0.0 rotate
1 1 scale
12.000 (_Courier) fess
 /setcmykcolor where
 {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse 

(C) -26.500 3.000 S
(l) -19.500 3.000 S
(a) -12.500 3.000 S
(s) -5.500 3.000 S
(s) 1.500 3.000 S
( ) 8.500 3.000 S
(+) 15.500 3.000 S
grestore
/RT {SR} def
/LC {} def
/SS {pop} def
/PF {} def
/PC {} def
0.000 0 261.000 144.000 0.000 0.000 14.000 54.000 rect
gsave
171.000 268.000 T translate
0.0 rotate
1 1 scale
12.000 (_Courier) fess
 /setcmykcolor where
 {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse 

(C) -26.500 3.000 S
(l) -19.500 3.000 S
(a) -12.500 3.000 S
(s) -5.500 3.000 S
(s) 1.500 3.000 S
( ) 8.500 3.000 S
(-) 15.500 3.000 S
grestore
/ArrowType{ 
1.000 setlinewidth
333.000 90.000 moveto
/Triangular 14.099 7.049 false 194.050 DrawArrowHead
} bind def
/SD {} def
/SS {setlinewidth SD stroke} def
/LC { /setcmykcolor where
 {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse 
} def
/PF {gsave fill grestore} def
/SS {setlinewidth SD stroke} def
1.000 331.059 89.514 261.000 72.000 Line
/ArrowType{ 
1.000 setlinewidth
171.000 252.000 moveto
/Triangular 14.099 7.049 false 345.988 DrawArrowHead
} bind def
/SD {} def
/SS {setlinewidth SD stroke} def
/LC { /setcmykcolor where
 {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse 
} def
/PF {gsave fill grestore} def
/SS {setlinewidth SD stroke} def
1.000 172.940 251.514 243.000 234.000 Line
/ArrowType{ 
1.000 setlinewidth
333.000 252.000 moveto
/Triangular 14.099 7.049 false 194.050 DrawArrowHead
} bind def
/SD {} def
/SS {setlinewidth SD stroke} def
/LC { /setcmykcolor where
 {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse 
} def
/PF {gsave fill grestore} def
/SS {setlinewidth SD stroke} def
1.000 331.059 251.514 261.000 234.000 Line
/ArrowType{ 
1.000 setlinewidth
243.000 198.000 moveto
/Triangular 14.099 7.049 false 194.050 DrawArrowHead
} bind def
/SD {} def
/SS {setlinewidth SD stroke} def
/LC { /setcmykcolor where
 {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse 
} def
/PF {gsave fill grestore} def
/SS {setlinewidth SD stroke} def
1.000 241.059 197.514 171.000 180.000 Line
/ArrowType{ 
1.000 setlinewidth
153.000 252.000 moveto
/Triangular 14.099 7.049 false 270.019 DrawArrowHead
} bind def
/SD {} def
/SS {setlinewidth SD stroke} def
/LC { /setcmykcolor where
 {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse 
} def
/PF {gsave fill grestore} def
/SS {setlinewidth SD stroke} def
1.000 152.999 250.000 153.000 180.000 Line
/ArrowType{ 
1.000 setlinewidth
351.000 252.000 moveto
/Triangular 14.099 7.049 false 270.019 DrawArrowHead
} bind def
/SD {} def
/SS {setlinewidth SD stroke} def
/LC { /setcmykcolor where
 {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse 
} def
/PF {gsave fill grestore} def
/SS {setlinewidth SD stroke} def
1.000 350.999 250.000 351.000 126.000 Line
/ArrowType{ 
1.000 setlinewidth
162.000 144.000 moveto
/Triangular 14.099 7.049 false 318.389 DrawArrowHead
} bind def
/SD {} def
/SS {setlinewidth SD stroke} def
/LC { /setcmykcolor where
 {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse 
} def
/PF {gsave fill grestore} def
/SS {setlinewidth SD stroke} def
1.000 163.494 142.671 243.000 72.000 Line
/ArrowType{ 
1.000 setlinewidth
180.000 144.000 moveto
/Triangular 14.099 7.049 false 353.315 DrawArrowHead
} bind def
/SD {} def
/SS {setlinewidth SD stroke} def
/LC { /setcmykcolor where
 {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse 
} def
/PF {gsave fill grestore} def
/SS {setlinewidth SD stroke} def
1.000 181.986 143.766 333.000 126.000 Line
/RT {SR} def
/LC {} def
/SS {pop} def
/PF {} def
/PC {} def
0.000 0 99.000 306.000 0.000 0.000 14.000 82.000 rect
gsave
347.000 106.000 T translate
0.0 rotate
1 1 scale
12.000 (_Courier) fess
 /setcmykcolor where
 {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse 

(A) -40.488 3.000 S
(t) -33.488 3.000 S
(t) -26.488 3.000 S
(r) -19.488 3.000 S
(i) -12.488 3.000 S
(b) -5.488 3.000 S
(u) 1.511 3.000 S
(t) 8.511 3.000 S
(e) 15.511 3.000 S
( ) 22.511 3.000 S
(B) 29.511 3.000 S
grestore
restore
end
%%EndDocument
 @endspecial 483 699 a Fr(Figure)14 b(4:)k(A)c(decision)g(graph)g(for)f(\()p
Fj(A)23 b Fi(^)g Fj(B)r Fr(\))h Fi(_)f Fr(\()p Fj(C)j Fi(^)c
Fj(D)q Fr(\))62 838 y(Decision)c(graphs)h(ha)o(v)o(e)f(b)q(een)h(previously)f
(examined)f(in)h(the)g(literature)h(b)o(y)f([Chou])f([5)o(],)i([Bahl)e(et.)h
(al.])30 b([1)o(])18 b(and)0 887 y([Mahoney)13 b(and)h(Mo)q(oney])g([12)o(].)
62 939 y([Mahoney)g(and)f(Mo)q(oney])h(used)h(the)f(follo)o(wing)d(metho)q(d)
i(to)h(construct)i(decision)e(graphs:)51 1028 y(1.)20 b(Gro)o(w)13
b(a)h(decision)g(tree.)51 1120 y(2.)20 b(Searc)o(h)14 b(the)h(decision)f
(tree)h(for)f(related)g(subtrees.)51 1211 y(3.)20 b(Merge)15
b(the)f(related)h(subtrees)h(to)d(build)g(a)h(decision)g(graph.)0
1300 y(They)f(rep)q(orted)i(limited)c(success)k(in)e(doing)f(this,)h(and)g
(concluded)h(that)f(\\searc)o(hing)g(for)g(similar)e(subtrees)k(that)e(need)h
(to)0 1350 y(b)q(e)h(collapsed)e(in)o(to)g(a)h(shared)h(structure)h(is)e(com)
o(binatoriall)o(y)d(explosiv)o(e".)682 2202 y @beginspecial
143 @llx 485 @lly 361 @urx 757 @ury 1440 @rwi @setspecial
%%BeginDocument: Pylon.ps
/MAV 300 dict def
MAV begin 
/useClip true def 
/top    0 def 
/left   1 def 
/bottom 2 def 
/right  3 def 
/CM     6 array def 
/CTM    6 array def 
/CTMR   6 array def 
/MTC    6 array def 
/blimit 1500 def 
/bcnt   0 def 
/rbox 8 array def 
/segbox 8 array def 
/bbox1 4 array def 
/c1 3 array def 
/c2 3 array def 
/d 3 array def    
/delta 3 array def 
/mycurrentrgbcolor 3 array def 
/ulx 0 def 
/uly 1 def 
/llx 2 def 
/lly 3 def 
/urx 4 def 
/ury 5 def 
/lrx 6 def 
/lry 7 def 
/sp [0 0] def 
/ep [0 0] def 
/bbox 4 array def 
/pbox 4 array def 
/scrnProc currentscreen 3 1 roll pop pop def
/currentcolorscreen where {
begin
currentcolorscreen
end
3 1 roll pop pop 
4 2 roll pop pop 
5 -2 roll pop pop 
6 -2 roll pop pop 
/kProc exch def 
/bProc exch def 
/gProc exch def 
/rProc exch def 
} if 
/Max {2 copy gt {pop}{exch pop} ifelse} bind def
/Min {2 copy lt {pop}{exch pop} ifelse} bind def
/cellPenW 72.0 /currentcolorscreen where
{begin currentcolorscreen end pop pop
10 1 roll pop pop 8 1 roll pop pop
 6 1 roll pop pop Max Max Max }
{currentscreen pop pop} ifelse div 2.0 div def
/rect { 
 /saveobj save def 
 R PC PF LC SS 
 saveobj restore 
} bind def 
/R { 
 newpath
 pbox astore pop
 0 792 translate 1 -1 scale CTMR currentmatrix pop exch translate
 /objectCord mstore def
 pbox right get 2 div
 dup pbox left get exch sub
 pbox left 3 -1 roll put 
 dup pbox right 3 -1 roll put
 pbox bottom get 2 div 
 dup pbox top get exch sub
 pbox top 3 -1 roll put
 dup pbox bottom 3 -1 roll put
 translate 
 CTM currentmatrix pop
 57.3 mul rotate
 RT
} bind def
 /SaveScreenBW {
 currentscreen
 /scrnProc exch def
 /scrnAngle exch def
 /scrnFreq exch def
 } bind def
 /RestoreScreenBW {
 scrnFreq scrnAngle MAV /scrnProc get setscreen
 } bind def
 /SetFreqAngleBW {
 currentscreen
 3 1 roll
 pop pop
 setscreen
 } bind def
 /SaveScreenColor {
 currentcolorscreen
 /grayProc exch def
 /grayAngle exch def
 /grayFreq exch def
 /bProc exch def
 /bAngle exch def
 /bFreq exch def
 /gProc exch def
 /gAngle exch def
 /gFreq exch def
 /rProc exch def
 /rAngle exch def
 /rFreq exch def
 } bind def
 /RestoreColorScreen {
 rFreq rAngle MAV /rProc get gFreq gAngle MAV /gProc get bFreq bAngle MAV /bProc get grayFreq grayAngle MAV /grayProc get setcolorscreen
 } bind def
 /SetFreqAngleColor { 
 currentcolorscreen 
 3 1 roll pop pop
 4 2 roll pop pop
 5 -2 roll pop pop
 6 -2 roll pop pop
 4 1 roll 
 6 1 roll 
 8 1 roll 
 10 1 roll 
 setcolorscreen 
 } bind def 
/initmsaverestore { 
userdict begin 
/mdict 10 dict def 
mdict begin 
/mindex -1 def 
/mstacksize 25 def 
/mstack mstacksize array def 
/incmindex { 
/mindex mindex 1 add def 
} bind def 
/decmindex { 
/mindex mindex 1 sub def 
} bind def 
/checkmindex { 
mindex 0 lt { 
(%ERROR: msave/mrestore stack underflow: Offending command 'mrestore'
) print flush 
stop 
} 
{ 
mindex mstacksize ge { 
(%ERROR: msave/mrestore stack overflow: Offending command 'msave'
) print flush 
stop 
} if 
} ifelse 
} bind def 
/mpush { 
incmindex 
checkmindex 
mstack mindex 
3 -1 roll put 
} bind def 
/mpop { 
checkmindex 
mstack mindex get 
decmindex 
} bind def 
end 
end 
} bind def 
/msave { 
mdict begin 
matrix currentmatrix mpush 
end 
} bind def 
/mrestore { 
mdict begin 
mpop setmatrix 
end 
} bind def 
/msavelevel { 
mdict begin 
mindex 1 add 
end 
} bind def 
/mstore {
matrix currentmatrix
} bind def
/AutoSizeY {
0 0 pl
dup 3 1 roll
4 -1 roll  
add
pl exch pop
exch sub
} bind def
/pl {  
transform
0.25 sub round 0.25 add exch
0.25 sub round 0.25 add exch
itransform
} bind def
/pll {
transform
round exch
round exch
itransform
} bind def
/pr { 
dtransform
round exch
round exch
idtransform
} bind def
/m { 
pl  moveto
} bind def
/l { 
pl lineto
} bind def
/c { 
pl curveto
} bind def
/rm { 
pr rmoveto
} bind def
/rl { 
pr rlineto
} bind def
/ar { 
5 -2 roll pl
5 2 roll
arc
} bind def
/an { 
5 -2 roll pl
5 2 roll
arcn
} bind def
/MakePatternFont {
/FontDict 20 dict def
FontDict begin
/FontName exch def
/Encoding exch def
/FontMatrix [1 0 0 1 0 0 ] def
/FontType 3 def
/FontBBox [ 0 0 1 1 ] def
/PatternDict exch def
/RenderPattern {
patternDict exch get
exec
} bind def
/BuildChar {
exch begin
1 0 0 0 1 1 setcachedevice
Encoding exch get RenderPattern
end
} bind def
FontName FontDict definefont pop
end
} bind def
/SnapToPattenGrid
	{
	exch
	dup 0 lt {
		1 index sub
	} if
	1 index
	div truncate
	mul
} bind def
/FillPatternString {
dup length
1 sub
0 1 3 -1 roll {
2 index
2 index
3 -2 roll
put
} for
pop pop
} bind def
/AutoSizeY {
	0.0 exch dtransform
	round
	idtransform exch pop
} bind def
 /AutoSizeX {
	0.0 dtransform
	exch
	round
	exch
	idtransform pop
} bind def 
/AutoCellSize {
	AutoSizeY
	exch
	AutoSizeX
	exch
} bind def
/CheckPath {
	false
	{ pop pop pop true exit}
	{ pop pop pop true exit}
	{ pop pop pop pop pop pop pop true exit}
	{ pop true exit}
	pathforall
} bind def
/PatternFill {					%		patternCharacter
	/patternString 1 string def
	/cm mstore def
	patternMatrix setmatrix
	1 1 AutoCellSize
	dup 0 eq { pop 1} if
	exch
	dup 0 eq { pop 1} if
	exch
	/patternSize exch 24.0 mul def
	/PatternSizeX exch 24.0 mul patternString length mul def
	/flaterror 0 def
	patternString FillPatternString
	gsave
		flaterror 1 add setflat
		flattenpath
		pathbbox
	grestore
	psy add flaterror add psy SnapToPattenGrid
	exch psx add flaterror add psx SnapToPattenGrid
	3 -1 roll flaterror sub psy SnapToPattenGrid
	4 -1 roll flaterror sub psx SnapToPattenGrid
	4 2 roll pll
	4 2 roll pll
	/llxsnap exch def
	/llysnap exch def
	/urxsnap exch def
	/urysnap exch def
	gsave
		useClip true eq {clip}{eoclip} ifelse newpath
		/PatternFont findfont [psx 0.0 0.0 psy 0.0 0.0] makefont setfont
		llysnap patternSize urysnap {
			llxsnap exch moveto
			llxsnap PatternSizeX urxsnap {
				pop
				patternString show
				%currentpoint am
			} for
		} bind for
	grestore
	cm setmatrix
} bind def				%		End 'PatternFill'
/DefaultPatternFont {
	/cm mstore def
	patternMatrix setmatrix
	1 1 AutoCellSize
	dup 0 eq { pop 1} if
	exch
	dup 0 eq { pop 1} if
	exch
	/psy exch iSizeY mul def
	/psx exch iSizeX mul def
	/patternDict 64 dict def
	patternDict begin
		/NotDef {} def
		/LiteDiagLines {
			iSizeX iSizeY false [iSizeX 0.0 0.0 iSizeY -1.0 mul  0.0 iSizeY]
			{pat}
			imagemask
		} bind def
	end
	/CustEncoding 256 array def
	0 255 1 {
		CustEncoding exch /NotDef put
	} bind for
	CustEncoding 65 /LiteDiagLines put
	patternDict CustEncoding /PatternFont MakePatternFont
	/pathSegProc {
		strokepath
		CheckPath {
			65 PatternFill newpath
		} if
	} bind def
	cm setmatrix
} bind def
/XRound {
	dup
	3 -1 roll
	exch mul round
	exch div
} bind def
/RoundMatrix {
	/i 0 def
	dup {
		100000.0 XRound
		1 index
		exch i exch put
		/i i 1 add def
	} forall
} bind def
/GetBoxesRatio {
3 -1 roll sub
7 1 roll
exch sub
6 1 roll
3 -1 roll sub
5 1 roll
exch sub
4 1 roll
3 -1 roll div
3 1 roll
exch div
exch
} bind def
/T {792 exch sub} bind def
/sx 0 def
/sy 0 def
/ex 0 def
/ey 0 def
/lw  0 def
/siz 0 def
/U {gsave 0 setlinecap
/lw siz 0.078125 mul def  /ey exch neg def /ex exch def /sy exch neg def /sx exch def
fontkind plain eq 
 {
  lw siz 0.0119444 mul sub setlinewidth sx sy moveto ex ey lineto stroke
 }
 {
   currentdict /outlineFontSize known outlineFontSize 0 gt and
     {
       fontkind outline eq
         {
           /sy sy 0.0119444 siz mul sub def
           /ey ey 0.0119444 siz mul sub def
           gsave 
           1 1 1 setrgbcolor lw siz 0.0119444 mul sub setlinewidth sx sy moveto ex ey lineto stroke
           grestore
           lw siz 0.0119444 mul sub setlinewidth sx sy moveto ex ey lineto
           strokepath 0.0119444 siz mul setlinewidth stroke
         } if
       fontkind shadow eq fontkind outlineshadow eq or
         {
           /sy sy 0.0358332 siz mul sub def
           /ey ey 0.0358332 siz mul sub def
           lw setlinewidth
           lw 2 div sx add sy
           lw 2 div sub moveto
           lw 2 div ex add ey
           lw 2 div sub lineto stroke 
           gsave
           1 1 1 setrgbcolor lw siz 0.0119444 mul sub setlinewidth sx sy moveto ex ey lineto stroke
           grestore
           lw siz 0.0119444 mul sub setlinewidth sx sy moveto ex ey lineto
           strokepath 0.0119444 siz mul setlinewidth stroke
         } if
      } if
 } ifelse
grestore} bind def
/plain 1 def
/outline 2 def
/shadow 3 def
/outlineshadow 4 def
/fess {
	currentdict /outlineFontSize known {
		/outlineFontSize 2 index def
	} if
	findfont exch dup /siz exch def scalefont setfont
} bind def
/SHDW {gsave siz oldfontname fess siz 0.055 mul x add y siz 0.05 mul sub moveto c show grestore} def
/NRML {gsave 1 1 1 setrgbcolor siz oldfontname fess x y moveto c show grestore siz /Outline fess  x y moveto c show} def
/S {
fontkind plain eq {neg moveto show} if
fontkind outline eq {neg /y exch def /x exch def /c exch def NRML} if
fontkind shadow eq {neg /y exch def /x exch def /c exch def SHDW NRML} if
fontkind outlineshadow eq {neg /y exch def /x exch def /c exch def SHDW NRML} if
} bind def
/F {
/fontkind exch def
fontkind plain eq {fess} if
fontkind outline eq {dup /oldfontname exch def exch dup /siz exch def exch OLF} if
fontkind shadow eq {dup /oldfontname exch def exch dup /siz exch def exch OLF} if
fontkind outlineshadow eq {dup /oldfontname exch def exch dup /siz exch def exch OLF} if
} bind def
/makeoutlinedict 15 dict def
/makeoutlinefont
 {
  makeoutlinedict begin
   /uniqueid exch def
   /strokewidth exch def
   /newfontname exch def
   /basefontname exch def
   FontDirectory basefontname known not {
    /basefontname /Times-Roman def
   } if
   /basefontdict basefontname findfont def
   /numentries basefontdict maxlength 1 add def
   basefontdict /UniqueID known not
   {/numentries numentries 1 add def} if
   /outfontdict numentries dict def
   basefontdict
   {
     exch dup /FID ne {exch outfontdict 3 1 roll put} {pop pop} ifelse
	  }forall
   outfontdict /FontName newfontname put
   outfontdict /PaintType 2 put
   outfontdict /StrokeWidth strokewidth put
   outfontdict /UniqueID uniqueid put
   newfontname outfontdict definefont pop
  end
  }def
/UID {
 findfont dup /UniqueID known
  {/UniqueID get 1 add}
  {pop 1}
  ifelse
} def
/OLF {
dup
/Outline
1000 62 div
4 -1 roll
UID
/outlineFontSize 5 index def
makeoutlinefont
/Outline findfont exch scalefont setfont
} def
/CopyEncoding {
findfont
/Encoding get
dup length array
/tarrayz exch def
tarrayz 0
3 -1 roll
putinterval
tarrayz
} bind def
/Re-encode {
dup length array copy
/eap 0 def
exch {
dup type /integertype eq {
/eap exch def
} {
1 index
exch
eap exch
put
/eap eap 1 add def
} ifelse
} forall
} bind def
/EncodeFont	{
findfont dup
length dict
begin
{	1 index /FID ne
{ def }
{ pop pop } ifelse
} forall
/FontName exch def
/Encoding exch def
FontName currentdict
end
definefont pop
} bind def
/clip2pathbbox {
	/magicNum linewidth 2 div 1 2 sqrt div mul def
	pathbbox
	/urymn exch magicNum add def
	/urxmn exch magicNum add def
	/llymn exch magicNum sub def
	/llxmn exch magicNum sub def
	newpath llxmn llymn moveto llxmn urymn lineto urxmn urymn lineto urxmn llymn lineto
	closepath clip newpath
} bind def
/Line {
MAV /LC get length 0 ne
{
	gsave
			newpath
			MAV /ArrowType get length 0 eq
			MAV /SD get length 0 eq and
			{2 setlinecap /UseClip {clip2pathbbox} def }
			{0 setlinecap /UseClip {} def } ifelse
			0 792 translate
			1 -1 scale
			CTM currentmatrix pop
			/yStart exch def /xStart exch def /yEnd exch def /xEnd exch def /linewidth exch def
			MAV /ArrowType get length 0 eq xStart xEnd ne yStart yEnd ne and and
			{xStart yStart moveto xEnd yEnd lineto UseClip xStart yStart moveto xEnd yEnd lineto}
			{xStart yStart moveto xEnd yEnd lineto} ifelse
			linewidth setlinewidth SD strokepath
			CheckPath {LC PF ArrowType} if
	grestore
}
{pop pop pop pop pop} ifelse
} bind def
/ZeroLine {
	gsave
		newpath
		MAV /ArrowType get length 0 ne {
			/UseClip {} def
			0 792 translate
			1 -1 scale
			pop pop pop pop pop
			CTM currentmatrix pop
			ArrowType
		} if
	grestore
} bind def
/CompensateForStroke {
	sin currentlinewidth mul
	exch
	cos currentlinewidth mul
	dup 0 translate
	4 -1 roll exch 2.0 mul sub
	3 1 roll
	2.0 mul sub
} bind def
/arrowdict 10 dict def
arrowdict begin
	/SwallowTail {
		newpath
		0.0 0.0 moveto
		1.0 -.5 lineto
		.666 0.0 lineto
		1.0 .5 lineto
		closepath
	} bind def
	/Triangular {
		newpath
		0.0 0.0 moveto
		1.0 -.5 lineto
		1.0 .5 lineto
		closepath
	} bind def
	/OpenTri {
		newpath
		1.0 0.5 moveto
		0.0 0.0 lineto
		1.0 -0.5 lineto
	} bind def
	/ClosedTri {
		newpath
		1.0 0.5 moveto
		0.0 0.0 lineto
		1.0 -0.5 lineto
		closepath
	} bind def
	/SlashBar {
		newpath
		0.5 -.5 moveto
		-.5 0.5 lineto
	} bind def
	/Dot {
		newpath
		0.5 0.0 moveto
		0 0 1 0 360 arc
		closepath
	} bind def
	/ExtSlashBar {
		newpath
		1.0 -.5 moveto
		0.0 0.5 lineto
	} bind def
end
/ScaleArrowHead {
	0 0 4 -2 roll
	0 0 1 1
	8 -4 roll GetBoxesRatio
	scale
} bind def
/DrawArrowHead {
	gsave
	[] 0 setdash
	currentpoint translate rotate
	{
		4 copy
		gsave
			initmatrix
			100 200 translate
			msave
				ScaleArrowHead pop
				arrowdict exch get exec
			mrestore
			strokepath
			0 0 3 index 3 index
			pathbbox 8 4 roll
			GetBoxesRatio
			4 2 roll
		grestore
		3 index 1.0 exch sub
		6 -1 roll
		{
			2 index mul
			0 translate
		}{
			pop
		} ifelse
		msave
			ScaleArrowHead scale
			arrowdict exch get exec
		mrestore
		strokepath
	} {
		msave
		ScaleArrowHead
		arrowdict exch get exec
		mrestore
	} ifelse
		CheckPath {
			LC PF
		} if
	grestore
} bind def
/SR { 
 pbox left get pbox top get moveto 
 pbox right get pbox top get lineto 
 pbox right get pbox bottom get lineto 
 pbox left get pbox bottom get lineto 
 closepath
} bind def 
/E {
1.415 setmiterlimit
CM currentmatrix pop
pbox right get pbox left get sub abs dup
pbox bottom get pbox top get sub abs dup 3 -1 roll
lt {exch dup 3 -1 roll exch div 1 exch}
{dup 3 -1 roll exch div 1} ifelse scale 
0 0 3 -1 roll 2 div 0 360 arc closepath
CM setmatrix
} bind def
/StripFromFront { 
dup length
2 index sub
3 1 roll
exch 3 -1 roll
getinterval
} bind def
/MakePathArray { 
 /k 0 def 
 {/k k 1 add def pop pop}{/k k 1 add def pop pop}{/k k 1 add def pop pop pop pop pop pop}{/k k 1 add def }pathforall 
 k array
 /k 0 def 
 {{moveto} 3 array astore 1 index k 3 -1 roll put /k k 1 add def} 
 {{lineto} 3 array astore 1 index k 3 -1 roll put /k k 1 add def} 
 {{curveto} 7 array astore 1 index k 3 -1 roll put /k k 1 add def} 
 {{closepath} 1 array astore 1 index k 3 -1 roll put /k k 1 add def} 
pathforall 
}bind def 
/MakeFlatPathArray { 
/k 0 def 
{/k k 1 add def pop pop}{/k k 1 add def pop pop}{pop pop pop pop pop pop}{}pathforall 
k array
/k 0 def 
{{moveto} 3 array astore 1 index k 3 -1 roll put /k k 1 add def} 
{{lineto} 3 array astore 1 index k 3 -1 roll put /k k 1 add def} 
{ pop pop pop pop pop pop} 
{} 
pathforall 
}bind def 
/FractionalLine {
2 index sub
.00001 mul
exch
3 index sub
.00001 mul
4 -1 roll add
3 1 roll
add
} bind def
/calcLineLength {
 exch
 4 -1 roll
 sub
 dup mul
 3 1 roll exch
 sub
 dup mul
 add sqrt
} bind def
/InitTotalLineLength {
 /oldY exch def
 /oldX exch def
 theDash aload pop currentLineLength add setdash
} bind def
/AccumeLineLength {
 3 copy pop
 2 copy
 oldX oldY
 4 2 roll calcLineLength
 /segmentLength exch def
 /currentLineLength currentLineLength segmentLength add def
 /oldY exch def
 /oldX exch def
} bind def
/DecumeLastLineLength {
 /currentLineLength currentLineLength segmentLength sub def
} bind def
/DrawFlattendSegment {
 /pointCount 2 def
 dup 0 lt { pop 0 } if
 fpc
 3 1 roll
 2 index
 1 index
 gt {
 2 copy get
 dup length
 dup 3 eq {
 pop
 dup 0 get
 exch 1 get
 2 copy InitTotalLineLength  
 m
 } {
 } ifelse
 } {
 pop 1 index
 } ifelse
 dup 1 add
 3 index
 exch sub
 dup 10 gt { pop 10} if
 {
 1 add
 2 copy
 get aload pop
 AccumeLineLength
 exec
 } repeat
 3 1 roll pop pop
 DecumeLastLineLength
} bind def
/IncFPC {
 fpc add
 /fpc exch def
} bind def
/DrawFlatPathArray {
 fpc
 0 { 
 dup 2 index
 1 sub
 lt { 
 flatPathArray exch
 newpath
 1 sub DrawFlattendSegment
 gsave
 pathSegProc
 grestore
 newpath
 }
 {
 pop pop
 exit
 } ifelse
 } loop
} bind def
/RecordFirstSubSegment {
 closepathArray 0 pathArray 0 get
 put
 closepathArray 1
 pathArray 0 get aload pop pop
 pathArray 1 get dup length 3 eq {
 aload pop pop
 } {
 newpath
 0 0 moveto
 aload pop exec
 /segmentArray flattenpath MakeFlatPathArray def
 segmentArray 1 get aload pop pop
 } ifelse
 FractionalLine {lineto} 3 array astore
 put
} bind def
/AppendClosePath {
 closepathArray 0 get 2 {lineto} put
 flatPathArray fpc closepathArray 0 get put
 1 IncFPC
 flatPathArray fpc closepathArray 1 get put
 1 IncFPC
} bind def
/RecordCurrentDash {
 /theDash
 currentdash 2 array astore def
 /currentLineLength 0 def
} bind def
/PatternStroke {
	0 setlinecap
 RecordCurrentDash
 /saveFlat currentflat def
 .5 setflat
 /pathArray MakePathArray def
 /closepathArray 2 array def
 /pathLength pathArray length def
 /flatPathArray 513 array def
 /currentLineLength 0 def
 /fpc 0 def
 pathArray pathLength 1 sub get
 length 1 eq {
 /usingClosepath true def
 RecordFirstSubSegment
 /pathLength pathLength 1 sub def
 } {
 /usingClosepath false def
 } ifelse
 0 1 pathLength 1 sub {
 pathArray exch get
 dup length 3 eq {
 fpc 1 add 512 ge {
 DrawFlatPathArray
 fpc 2 ge {
 flatPathArray flatPathArray fpc 2 sub get 0 put
 flatPathArray flatPathArray fpc 1 sub get 1 put
 /fpc 2 def
 }{
 /fpc 0 def
 } ifelse
 } if
 flatPathArray exch fpc exch put
 1 IncFPC
 } {
 dup length 7 eq {
 newpath
 /nToStrip 0 def
 fpc 1 gt {
 flatPathArray fpc 2 sub get aload pop pop m
 flatPathArray fpc 1 sub get aload pop exec
 /nToStrip 2 def
 } {
 fpc 1 eq {
 flatPathArray fpc 1 sub get aload pop exec
 /nToStrip 2 def
 } if
 } ifelse
 aload pop exec
 /segmentArray flattenpath MakeFlatPathArray def
 /segmentArray nToStrip segmentArray StripFromFront def
 segmentArray length fpc add 512 lt {
 flatPathArray fpc segmentArray putinterval
 segmentArray length IncFPC
 } {
 DrawFlatPathArray
 fpc 1 gt {
 flatPathArray flatPathArray fpc 2 sub get 0 exch put
 flatPathArray flatPathArray fpc 1 sub get 1 exch put
 /fpc 2 def
 }{
 /fpc 0 def
 } ifelse
 segmentArray length 512 lt {
 flatPathArray fpc segmentArray putinterval
 segmentArray length IncFPC
 } {
 segmentArray length
 /exitLoop false def
 0 
 {
 2 copy sub
 dup 500 gt {
 pop 500
 } { 
 /exitLoop true def
 } ifelse 
 segmentArray 2 index 2 index getinterval
 flatPathArray fpc 3 -1 roll putinterval
 dup IncFPC
 add 
 exitLoop {
 exit 
 } {
 DrawFlatPathArray
 fpc 1 gt {
 flatPathArray flatPathArray fpc 2 sub get 0 exch put
 flatPathArray flatPathArray fpc 1 sub get 1 exch put
 /fpc 2 def
 }{
 /fpc 0 def
 } ifelse
 } ifelse
 } loop
 } ifelse
 } ifelse
 } if
 } ifelse
 } for
 fpc 0 gt {
 usingClosepath {
 AppendClosePath
 } if
 DrawFlatPathArray
 } if
 saveFlat setflat
} bind def


initmsaverestore
/tctm matrix currentmatrix def
tctm RoundMatrix setmatrix
/patternMatrix mstore def
10 setmiterlimit
2 setlinecap
newpath
/RT {E} def
/SD {} def
/SS {setlinewidth SD stroke} def
/LC { /setcmykcolor where
 {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse 
} def
/PC { /setcmykcolor where
 {begin 0.000 0.000 0.000 0.000 setcmykcolor end} {1.000 1.000 1.000 setrgbcolor} ifelse 
} def
/PF {gsave fill grestore} def
1.000 0 36.000 144.000 0.000 0.000 36.000 72.000 rect
/RT {E} def
/SD {} def
/SS {setlinewidth SD stroke} def
/LC { /setcmykcolor where
 {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse 
} def
/PC { /setcmykcolor where
 {begin 0.000 0.000 0.000 0.000 setcmykcolor end} {1.000 1.000 1.000 setrgbcolor} ifelse 
} def
/PF {gsave fill grestore} def
1.000 0 90.000 288.000 0.000 0.000 36.000 72.000 rect
/RT {E} def
/SD {} def
/SS {setlinewidth SD stroke} def
/LC { /setcmykcolor where
 {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse 
} def
/PC { /setcmykcolor where
 {begin 0.000 0.000 0.000 0.000 setcmykcolor end} {1.000 1.000 1.000 setrgbcolor} ifelse 
} def
/PF {gsave fill grestore} def
1.000 0 144.000 144.000 0.000 0.000 36.000 72.000 rect
/RT {E} def
/SD {} def
/SS {setlinewidth SD stroke} def
/LC { /setcmykcolor where
 {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse 
} def
/PC { /setcmykcolor where
 {begin 0.000 0.000 0.000 0.000 setcmykcolor end} {1.000 1.000 1.000 setrgbcolor} ifelse 
} def
/PF {gsave fill grestore} def
1.000 0 198.000 288.000 0.000 0.000 36.000 72.000 rect
/RT {SR} def
/SD {} def
/SS {setlinewidth SD stroke} def
/LC { /setcmykcolor where
 {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse 
} def
/PC { /setcmykcolor where
 {begin 0.000 0.000 0.000 0.000 setcmykcolor end} {1.000 1.000 1.000 setrgbcolor} ifelse 
} def
/PF {gsave fill grestore} def
1.000 0 270.000 144.000 0.000 0.000 36.000 72.000 rect
/RT {SR} def
/SD {} def
/SS {setlinewidth SD stroke} def
/LC { /setcmykcolor where
 {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse 
} def
/PC { /setcmykcolor where
 {begin 0.000 0.000 0.000 0.000 setcmykcolor end} {1.000 1.000 1.000 setrgbcolor} ifelse 
} def
/PF {gsave fill grestore} def
1.000 0 270.000 288.000 0.000 0.000 36.000 72.000 rect
/ArrowType{ 
1.000 setlinewidth
324.000 270.000 moveto
/Triangular 14.099 7.049 false 270.019 DrawArrowHead
} bind def
/SD {} def
/SS {setlinewidth SD stroke} def
/LC { /setcmykcolor where
 {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse 
} def
/PF {gsave fill grestore} def
/SS {setlinewidth SD stroke} def
1.000 323.999 268.000 324.000 234.000 Line
/ArrowType{ 
1.000 setlinewidth
216.000 270.000 moveto
/Triangular 14.099 7.049 false 341.589 DrawArrowHead
} bind def
/SD {} def
/SS {setlinewidth SD stroke} def
/LC { /setcmykcolor where
 {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse 
} def
/PF {gsave fill grestore} def
/SS {setlinewidth SD stroke} def
1.000 217.897 269.367 324.000 234.000 Line
save
[ 39/quotesingle 96/grave 128/Adieresis/Aring/Ccedilla/Eacute/Ntilde/Odieresis
/Udieresis/aacute/agrave/acircumflex/adieresis/atilde/aring/ccedilla/eacute
/egrave/ecircumflex/edieresis/iacute/igrave/icircumflex/idieresis/ntilde
/oacute/ograve/ocircumflex/odieresis/otilde/uacute/ugrave/ucircumflex
/udieresis/dagger/degree/cent/sterling/section/bullet/paragraph/germandbls
/registered/copyright/trademark/acute/dieresis/.notdef/AE/Oslash
/.notdef/plusminus/.notdef/.notdef/yen/mu/.notdef/.notdef
/.notdef/.notdef/.notdef/ordfeminine/ordmasculine/.notdef/ae/oslash
/questiondown/exclamdown/logicalnot/.notdef/florin/.notdef/.notdef
/guillemotleft/guillemotright/ellipsis/.notdef/Agrave/Atilde/Otilde/OE/oe
/endash/emdash/quotedblleft/quotedblright/quoteleft/quoteright/divide
/.notdef/ydieresis/Ydieresis/fraction/currency/guilsinglleft/guilsinglright
/fi/fl/daggerdbl/periodcentered/quotesinglbase/quotedblbase/perthousand
/Acircumflex/Ecircumflex/Aacute/Edieresis/Egrave/Iacute/Icircumflex
/Idieresis/Igrave/Oacute/Ocircumflex/.notdef/Ograve/Uacute/Ucircumflex
/Ugrave/dotlessi/circumflex/tilde/macron/breve/dotaccent/ring/cedilla
/hungarumlaut/ogonek/caron]
StandardEncoding Re-encode /_Courier /Courier EncodeFont

/RT {SR} def
/LC {} def
/SS {pop} def
/PF {} def
/PC {} def
0.000 0 279.000 153.000 0.000 0.000 16.000 61.000 rect
gsave
183.500 287.000 T translate
0.0 rotate
1 1 scale
14.000 (_Courier) plain F
 /setcmykcolor where
 {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse 

(C) -30.500 4.000 S
(l) -22.500 4.000 S
(a) -14.500 4.000 S
(s) -6.500 4.000 S
(s) 1.500 4.000 S
( ) 9.500 4.000 S
(1) 17.500 4.000 S
grestore
/RT {SR} def
/LC {} def
/SS {pop} def
/PF {} def
/PC {} def
0.000 0 279.000 297.000 0.000 0.000 16.000 61.000 rect
gsave
327.500 287.000 T translate
0.0 rotate
1 1 scale
14.000 (_Courier) fess
 /setcmykcolor where
 {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse 

(C) -30.500 4.000 S
(l) -22.500 4.000 S
(a) -14.500 4.000 S
(s) -6.500 4.000 S
(s) 1.500 4.000 S
( ) 9.500 4.000 S
(2) 17.500 4.000 S
grestore
/RT {SR} def
/LC {} def
/SS {pop} def
/PF {} def
/PC {} def
0.000 0 81.000 252.000 0.000 0.000 16.000 17.000 rect
gsave
260.500 89.000 T translate
0.0 rotate
1 1 scale
14.000 (_Courier) fess
 /setcmykcolor where
 {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse 

(Y) -8.500 4.000 S
grestore
/RT {SR} def
/LC {} def
/SS {pop} def
/PF {} def
/PC {} def
0.000 0 135.000 333.000 0.000 0.000 16.000 17.000 rect
gsave
341.500 143.000 T translate
0.0 rotate
1 1 scale
14.000 (_Courier) fess
 /setcmykcolor where
 {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse 

(Y) -8.500 4.000 S
grestore
/RT {SR} def
/LC {} def
/SS {pop} def
/PF {} def
/PC {} def
0.000 0 243.000 333.000 0.000 0.000 16.000 17.000 rect
gsave
341.500 251.000 T translate
0.0 rotate
1 1 scale
14.000 (_Courier) fess
 /setcmykcolor where
 {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse 

(Y) -8.500 4.000 S
grestore
/RT {SR} def
/LC {} def
/SS {pop} def
/PF {} def
/PC {} def
0.000 0 189.000 243.000 0.000 0.000 16.000 17.000 rect
gsave
251.500 197.000 T translate
0.0 rotate
1 1 scale
14.000 (_Courier) fess
 /setcmykcolor where
 {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse 

(Y) -8.500 4.000 S
grestore
/RT {SR} def
/LC {} def
/SS {pop} def
/PF {} def
/PC {} def
0.000 0 189.000 162.000 0.000 0.000 16.000 17.000 rect
gsave
170.500 197.000 T translate
0.0 rotate
1 1 scale
14.000 (_Courier) fess
 /setcmykcolor where
 {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse 

(N) -8.500 4.000 S
grestore
/RT {SR} def
/LC {} def
/SS {pop} def
/PF {} def
/PC {} def
0.000 0 81.000 162.000 0.000 0.000 16.000 17.000 rect
gsave
170.500 89.000 T translate
0.0 rotate
1 1 scale
14.000 (_Courier) fess
 /setcmykcolor where
 {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse 

(N) -8.500 4.000 S
grestore
/RT {SR} def
/LC {} def
/SS {pop} def
/PF {} def
/PC {} def
0.000 0 135.000 243.000 0.000 0.000 16.000 17.000 rect
gsave
251.500 143.000 T translate
0.0 rotate
1 1 scale
14.000 (_Courier) fess
 /setcmykcolor where
 {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse 

(N) -8.500 4.000 S
grestore
/RT {SR} def
/LC {} def
/SS {pop} def
/PF {} def
/PC {} def
0.000 0 243.000 234.000 0.000 0.000 16.000 17.000 rect
gsave
242.500 251.000 T translate
0.0 rotate
1 1 scale
14.000 (_Courier) fess
 /setcmykcolor where
 {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse 

(N) -8.500 4.000 S
grestore
/RT {SR} def
/LC {} def
/SS {pop} def
/PF {} def
/PC {} def
0.000 0 45.000 153.000 0.000 0.000 16.000 53.000 rect
gsave
179.500 53.000 T translate
0.0 rotate
1 1 scale
14.000 (_Courier) fess
 /setcmykcolor where
 {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse 

(T) -26.500 4.000 S
(e) -18.500 4.000 S
(s) -10.500 4.000 S
(t) -2.500 4.000 S
( ) 5.500 4.000 S
(1) 13.500 4.000 S
grestore
/RT {SR} def
/LC {} def
/SS {pop} def
/PF {} def
/PC {} def
0.000 0 99.000 297.000 0.000 0.000 16.000 53.000 rect
gsave
323.500 107.000 T translate
0.0 rotate
1 1 scale
14.000 (_Courier) fess
 /setcmykcolor where
 {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse 

(T) -26.500 4.000 S
(e) -18.500 4.000 S
(s) -10.500 4.000 S
(t) -2.500 4.000 S
( ) 5.500 4.000 S
(2) 13.500 4.000 S
grestore
/RT {SR} def
/LC {} def
/SS {pop} def
/PF {} def
/PC {} def
0.000 0 153.000 153.000 0.000 0.000 16.000 53.000 rect
gsave
179.500 161.000 T translate
0.0 rotate
1 1 scale
14.000 (_Courier) fess
 /setcmykcolor where
 {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse 

(T) -26.500 4.000 S
(e) -18.500 4.000 S
(s) -10.500 4.000 S
(t) -2.500 4.000 S
( ) 5.500 4.000 S
(3) 13.500 4.000 S
grestore
/RT {SR} def
/LC {} def
/SS {pop} def
/PF {} def
/PC {} def
0.000 0 207.000 297.000 0.000 0.000 16.000 53.000 rect
gsave
323.500 215.000 T translate
0.0 rotate
1 1 scale
14.000 (_Courier) fess
 /setcmykcolor where
 {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse 

(T) -26.500 4.000 S
(e) -18.500 4.000 S
(s) -10.500 4.000 S
(t) -2.500 4.000 S
( ) 5.500 4.000 S
(4) 13.500 4.000 S
grestore
/ArrowType{ 
1.000 setlinewidth
180.000 144.000 moveto
/Triangular 14.099 7.049 false 270.019 DrawArrowHead
} bind def
/SD {} def
/SS {setlinewidth SD stroke} def
/LC { /setcmykcolor where
 {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse 
} def
/PF {gsave fill grestore} def
/SS {setlinewidth SD stroke} def
1.000 179.999 142.000 180.000 72.000 Line
/ArrowType{ 
1.000 setlinewidth
288.000 108.000 moveto
/Triangular 14.099 7.049 false 199.997 DrawArrowHead
} bind def
/SD {} def
/SS {setlinewidth SD stroke} def
/LC { /setcmykcolor where
 {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse 
} def
/PF {gsave fill grestore} def
/SS {setlinewidth SD stroke} def
1.000 286.120 107.316 189.000 72.000 Line
/ArrowType{ 
1.000 setlinewidth
324.000 198.000 moveto
/Triangular 14.099 7.049 false 270.019 DrawArrowHead
} bind def
/SD {} def
/SS {setlinewidth SD stroke} def
/LC { /setcmykcolor where
 {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse 
} def
/PF {gsave fill grestore} def
/SS {setlinewidth SD stroke} def
1.000 323.999 196.000 324.000 126.000 Line
/ArrowType{ 
1.000 setlinewidth
216.000 162.000 moveto
/Triangular 14.099 7.049 false 340.041 DrawArrowHead
} bind def
/SD {} def
/SS {setlinewidth SD stroke} def
/LC { /setcmykcolor where
 {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse 
} def
/PF {gsave fill grestore} def
/SS {setlinewidth SD stroke} def
1.000 217.879 161.316 315.000 126.000 Line
/ArrowType{ 
1.000 setlinewidth
180.000 270.000 moveto
/Triangular 14.099 7.049 false 270.019 DrawArrowHead
} bind def
/SD {} def
/SS {setlinewidth SD stroke} def
/LC { /setcmykcolor where
 {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse 
} def
/PF {gsave fill grestore} def
/SS {setlinewidth SD stroke} def
1.000 179.999 268.000 180.000 180.000 Line
/ArrowType{ 
1.000 setlinewidth
288.000 216.000 moveto
/Triangular 14.099 7.049 false 199.997 DrawArrowHead
} bind def
/SD {} def
/SS {setlinewidth SD stroke} def
/LC { /setcmykcolor where
 {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse 
} def
/PF {gsave fill grestore} def
/SS {setlinewidth SD stroke} def
1.000 286.120 215.316 189.000 180.000 Line
restore
end
%%EndDocument
 @endspecial 726 2305 a(Figure)j(5:)k(A)c(Decision)f(Pylon)62
2408 y([Chou])k(and)h([Bahl)f(et.)g(al.])29 b(approac)o(hed)18
b(the)h(construction)f(of)f(decision)h(graphs)g(using)g(a)f(di\013eren)o(t)i
(metho)q(d)e(to)0 2458 y([Mahoney)e(and)h(Mo)q(oney].)24 b(Both)16
b(groups)g(determined)g(the)32 b Fp(gr)n(oss)16 b(structur)n(e)32
b Fr(of)15 b(the)i(decision)f(graph)f(a)h(priori.)23 b(F)m(or)0
2508 y(example,)12 b(the)i(gross)g(structure)h(of)e(a)g(decision)h(p)o(ylon)f
(\([Bahl)f(et.)i(al.])j(termed)c(their)h(structures)29 b Fp(de)n(cision)15
b(pylons)p Fr(\))f(w)o(as)0 2558 y(determined)g(a)f(priori)h(to)f(lo)q(ok)g
(lik)o(e)h(a)f(p)o(ylon,)g(as)h(sho)o(wn)g(in)f(Figure)h(5.)62
2610 y(Both)f(groups)h(applied)e(partitioning)f(algorithms)g(\(discussed)j
(in)f(Section)g(1.3\))f(if)g(a)h(split)f(to)q(ok)h(the)g(structure)i(of)d
(the)0 2660 y(graph)i(b)q(eing)g(constructed)i(outside)e(the)g(predetermined)
h(structure.)62 2711 y(Fixing)e(the)h(structure)i(of)d(a)g(decision)h(graph)f
(a)g(priori)g(is)h(a)f(considerable)h(disadv)n(an)o(tage)f([7)o(],)g(since)h
(often)g(the)g(shap)q(e)0 2761 y(of)g(the)i(decision)f(graph)g(pro)o(vides)g
(insigh)o(t)f(in)o(to)h(the)g(domain)e(under)j(consideration.)21
b(The)16 b(decision)f(graphs)g(presen)o(ted)0 2811 y(in)e(Section)i(4)e
(highligh)o(t)f(this)i(disadv)n(an)o(tage.)965 2936 y(4)p eop
%%Page: 5 5
bop 62 77 a Fr(The)10 b(con)o(tribution)g(of)f(this)h(pap)q(er)g(is)g(that)g
(it)f(applies)g(a)h(minim)n(um)5 b(enco)q(ding)10 b(tec)o(hnique)h(\(MML\))f
(to)g(the)g(construction)0 127 y(of)k(decision)g(graphs.)19
b(The)c(metho)q(d)f(describ)q(ed)i(in)d(this)i(pap)q(er)g(a)o(v)o(oids)e(the)
i(problems)e(encoun)o(tered)j(b)o(y)e([Mahoney)g(and)0 177
y(Mo)q(oney])g([12)o(])g(since)h(it)g(do)q(es)g(not)f(searc)o(h)i(through)f
(decision)f(trees)i(for)e(related)i(subtrees.)22 b(F)m(urthermore,)14
b(the)h(metho)q(d)0 226 y(presen)o(ted)j(here)f(ob)o(viates)f(the)h(need)g
(for)f(someone)f(to)h(arbitrarily)f(predetermine)i(the)g(gross)f(structure)j
(of)c(a)h(decision)0 276 y(graph)e(b)q(efore)g(the)h(graph)f(is)f(gro)o(wn,)g
(the)i(gross)f(structure)i(is)e(determined)g(b)o(y)g(the)g(data.)0
419 y Fl(2)92 b(The)22 b(Minim)n(um)f(Message)i(Length)g(Principle)0
512 y Fr(In)15 b(the)h(in)o(tro)q(duction)g(to)f(this)g(pap)q(er,)h(w)o(e)g
(stated)g(the)g(in)o(ten)o(tion)f(to)g(presen)o(t)i(an)e(algorithm)e(to)i
(gro)o(w)g(decision)h(graphs)0 562 y(based)j(on)f(the)h(Minim)o(um)c(Message)
k(Length)g(Principle)f(\(MMLP\).)h(Minim)o(um)14 b(Message)20
b(Length)e(is)h(a)f(criterion)g(for)0 612 y(comparing)12 b(inductiv)o
(ely-deriv)o(ed)i(theories)h(and)e(the)i(explanations)e(that)h(these)h
(theories)g(pro)o(vide.)62 663 y(W)m(e)f(shall)g(b)q(egin)h(b)o(y)f(going)g
(o)o(v)o(er)g(the)i(theory)f(b)q(ehind)g(the)g(Minim)o(um)c(Message)k(Length)
g(Principle,)g(and)f(then)i(giv)o(e)0 713 y(an)f(o)o(v)o(erview)h(of)f(ho)o
(w)g(the)h(MMLP)g(can)g(b)q(e)g(used)h(to)e(design)h(algorithms)e(for)h
(inductiv)o(e)h(learning.)22 b(The)16 b(MMLP)g(do)q(es)0 763
y(not)f(prescrib)q(e)i(an)o(y)e(general)g(algorithm)e(for)i(inductiv)o(e)g
(inference.)23 b(It)15 b(pro)o(vides)h(a)f(metric)f(whic)o(h)h(allo)o(ws)f
(us)i(to)f(searc)o(h)0 812 y(through)j(a)g(mo)q(del)f(space)i(for)f
(acceptable)h(theories.)33 b(In)18 b(Section)g(2.2)g(w)o(e)g(presen)o(t)i(a)e
(hill)f(clim)o(bing)e(algorithm)h(that)0 862 y(iterativ)o(ely)d(mo)q
(di\014es)h(and)f(extends)j(a)e(theory)m(.)k(In)c(Section)h(3)f(w)o(e)g
(apply)f(the)i(hill)e(clim)o(bing)e(algorithm)h(to)i(the)g(problem)0
912 y(of)f(inferring)h(decision)g(graphs)g(and)g(presen)o(t)h(an)f(algorithm)
d(that)j(gro)o(ws)g(decision)g(graphs.)0 1034 y Fk(2.1)74 b(The)19
b(Induction)f(Principle)0 1113 y Fr(The)10 b(output)f(of)g(a)g(program)f
(that)h(p)q(erforms)g(inductiv)o(e)g(inference)i(\(whether)g(the)f(output)f
(is)g(a)g(decision)h(tree,)h(probabilistic)0 1163 y(\014nite)17
b(state)h(automaton,)e(class)h(structure,)j(or)d(an)g(estimator)f(for)g(some)
g(parameter\))h(can)h(b)q(e)f(regarded)h(as)g(a)e(theory)0
1212 y(ab)q(out)e(the)g(input)g(data.)62 1263 y(W)m(e)e(iden)o(tify)f(some)f
(subset)k(of)d(the)h(input)g(data,)f Fj(D)q Fr(,)h(as)g(b)q(eing)g(explained)
g(b)o(y)f(a)h(theory)m(,)f Fj(T)6 b Fr(.)18 b(This)11 b(subset)j(of)d(the)h
(input)0 1313 y(data)k(is)g(dep)q(enden)o(t)i(up)q(on)e(the)h(learning)e
(paradigm)f(w)o(e)j(wish)f(to)g(use.)25 b(F)m(or)16 b(example,)f(when)i(p)q
(erforming)d(sup)q(ervised)0 1363 y(learning)j(the)h(theory)g(will)d(explain)
i(the)h(class)g(of)e(eac)o(h)i(example,)f(when)h(p)q(erforming)e
(classi\014cation)h(the)h(theory)f(will)0 1413 y(explain)g(the)i(attribute)f
(v)n(alues)g(for)f(eac)o(h)i(example,)e(and)h(when)g(inferring)g
(probabilistic)f(\014nite)h(state)g(automata)e(the)0 1463 y(theory)e(will)f
(explain)g(the)h(sequence)i(of)e(sym)o(b)q(ols)e(in)i(the)g(input)g(data.)457
2166 y @beginspecial 17 @llx 449 @lly 586 @urx 775 @ury 2520
@rwi @setspecial
%%BeginDocument: mmlp.ps
/MAV 300 dict def
MAV begin 
/useClip true def 
/top    0 def 
/left   1 def 
/bottom 2 def 
/right  3 def 
/CM     6 array def 
/CTM    6 array def 
/CTMR   6 array def 
/MTC    6 array def 
/blimit 1500 def 
/bcnt   0 def 
/rbox 8 array def 
/segbox 8 array def 
/bbox1 4 array def 
/c1 3 array def 
/c2 3 array def 
/d 3 array def    
/delta 3 array def 
/mycurrentrgbcolor 3 array def 
/ulx 0 def 
/uly 1 def 
/llx 2 def 
/lly 3 def 
/urx 4 def 
/ury 5 def 
/lrx 6 def 
/lry 7 def 
/sp [0 0] def 
/ep [0 0] def 
/bbox 4 array def 
/pbox 4 array def 
/scrnProc currentscreen 3 1 roll pop pop def
/currentcolorscreen where {
begin
currentcolorscreen
end
3 1 roll pop pop 
4 2 roll pop pop 
5 -2 roll pop pop 
6 -2 roll pop pop 
/kProc exch def 
/bProc exch def 
/gProc exch def 
/rProc exch def 
} if 
/Max {2 copy gt {pop}{exch pop} ifelse} bind def
/Min {2 copy lt {pop}{exch pop} ifelse} bind def
/cellPenW 72.0 /currentcolorscreen where
{begin currentcolorscreen end pop pop
10 1 roll pop pop 8 1 roll pop pop
 6 1 roll pop pop Max Max Max }
{currentscreen pop pop} ifelse div 2.0 div def
/rect { 
 /saveobj save def 
 R PC PF LC SS 
 saveobj restore 
} bind def 
/R { 
 newpath
 pbox astore pop
 0 792 translate 1 -1 scale CTMR currentmatrix pop exch translate
 /objectCord mstore def
 pbox right get 2 div
 dup pbox left get exch sub
 pbox left 3 -1 roll put 
 dup pbox right 3 -1 roll put
 pbox bottom get 2 div 
 dup pbox top get exch sub
 pbox top 3 -1 roll put
 dup pbox bottom 3 -1 roll put
 translate 
 CTM currentmatrix pop
 57.3 mul rotate
 RT
} bind def
 /SaveScreenBW {
 currentscreen
 /scrnProc exch def
 /scrnAngle exch def
 /scrnFreq exch def
 } bind def
 /RestoreScreenBW {
 scrnFreq scrnAngle MAV /scrnProc get setscreen
 } bind def
 /SetFreqAngleBW {
 currentscreen
 3 1 roll
 pop pop
 setscreen
 } bind def
 /SaveScreenColor {
 currentcolorscreen
 /grayProc exch def
 /grayAngle exch def
 /grayFreq exch def
 /bProc exch def
 /bAngle exch def
 /bFreq exch def
 /gProc exch def
 /gAngle exch def
 /gFreq exch def
 /rProc exch def
 /rAngle exch def
 /rFreq exch def
 } bind def
 /RestoreColorScreen {
 rFreq rAngle MAV /rProc get gFreq gAngle MAV /gProc get bFreq bAngle MAV /bProc get grayFreq grayAngle MAV /grayProc get setcolorscreen
 } bind def
 /SetFreqAngleColor { 
 currentcolorscreen 
 3 1 roll pop pop
 4 2 roll pop pop
 5 -2 roll pop pop
 6 -2 roll pop pop
 4 1 roll 
 6 1 roll 
 8 1 roll 
 10 1 roll 
 setcolorscreen 
 } bind def 
/initmsaverestore { 
userdict begin 
/mdict 10 dict def 
mdict begin 
/mindex -1 def 
/mstacksize 25 def 
/mstack mstacksize array def 
/incmindex { 
/mindex mindex 1 add def 
} bind def 
/decmindex { 
/mindex mindex 1 sub def 
} bind def 
/checkmindex { 
mindex 0 lt { 
(%ERROR: msave/mrestore stack underflow: Offending command 'mrestore'
) print flush 
stop 
} 
{ 
mindex mstacksize ge { 
(%ERROR: msave/mrestore stack overflow: Offending command 'msave'
) print flush 
stop 
} if 
} ifelse 
} bind def 
/mpush { 
incmindex 
checkmindex 
mstack mindex 
3 -1 roll put 
} bind def 
/mpop { 
checkmindex 
mstack mindex get 
decmindex 
} bind def 
end 
end 
} bind def 
/msave { 
mdict begin 
matrix currentmatrix mpush 
end 
} bind def 
/mrestore { 
mdict begin 
mpop setmatrix 
end 
} bind def 
/msavelevel { 
mdict begin 
mindex 1 add 
end 
} bind def 
/mstore {
matrix currentmatrix
} bind def
/AutoSizeY {
0 0 pl
dup 3 1 roll
4 -1 roll  
add
pl exch pop
exch sub
} bind def
/pl {  
transform
0.25 sub round 0.25 add exch
0.25 sub round 0.25 add exch
itransform
} bind def
/pll {
transform
round exch
round exch
itransform
} bind def
/pr { 
dtransform
round exch
round exch
idtransform
} bind def
/m { 
pl  moveto
} bind def
/l { 
pl lineto
} bind def
/c { 
pl curveto
} bind def
/rm { 
pr rmoveto
} bind def
/rl { 
pr rlineto
} bind def
/ar { 
5 -2 roll pl
5 2 roll
arc
} bind def
/an { 
5 -2 roll pl
5 2 roll
arcn
} bind def
/MakePatternFont {
/FontDict 20 dict def
FontDict begin
/FontName exch def
/Encoding exch def
/FontMatrix [1 0 0 1 0 0 ] def
/FontType 3 def
/FontBBox [ 0 0 1 1 ] def
/PatternDict exch def
/RenderPattern {
patternDict exch get
exec
} bind def
/BuildChar {
exch begin
1 0 0 0 1 1 setcachedevice
Encoding exch get RenderPattern
end
} bind def
FontName FontDict definefont pop
end
} bind def
/SnapToPattenGrid
	{
	exch
	dup 0 lt {
		1 index sub
	} if
	1 index
	div truncate
	mul
} bind def
/FillPatternString {
dup length
1 sub
0 1 3 -1 roll {
2 index
2 index
3 -2 roll
put
} for
pop pop
} bind def
/AutoSizeY {
	0.0 exch dtransform
	round
	idtransform exch pop
} bind def
 /AutoSizeX {
	0.0 dtransform
	exch
	round
	exch
	idtransform pop
} bind def 
/AutoCellSize {
	AutoSizeY
	exch
	AutoSizeX
	exch
} bind def
/CheckPath {
	false
	{ pop pop pop true exit}
	{ pop pop pop true exit}
	{ pop pop pop pop pop pop pop true exit}
	{ pop true exit}
	pathforall
} bind def
/PatternFill {					%		patternCharacter
	/patternString 1 string def
	/cm mstore def
	patternMatrix setmatrix
	1 1 AutoCellSize
	dup 0 eq { pop 1} if
	exch
	dup 0 eq { pop 1} if
	exch
	/patternSize exch 24.0 mul def
	/PatternSizeX exch 24.0 mul patternString length mul def
	/flaterror 0 def
	patternString FillPatternString
	gsave
		flaterror 1 add setflat
		flattenpath
		pathbbox
	grestore
	psy add flaterror add psy SnapToPattenGrid
	exch psx add flaterror add psx SnapToPattenGrid
	3 -1 roll flaterror sub psy SnapToPattenGrid
	4 -1 roll flaterror sub psx SnapToPattenGrid
	4 2 roll pll
	4 2 roll pll
	/llxsnap exch def
	/llysnap exch def
	/urxsnap exch def
	/urysnap exch def
	gsave
		useClip true eq {clip}{eoclip} ifelse newpath
		/PatternFont findfont [psx 0.0 0.0 psy 0.0 0.0] makefont setfont
		llysnap patternSize urysnap {
			llxsnap exch moveto
			llxsnap PatternSizeX urxsnap {
				pop
				patternString show
				%currentpoint am
			} for
		} bind for
	grestore
	cm setmatrix
} bind def				%		End 'PatternFill'
/DefaultPatternFont {
	/cm mstore def
	patternMatrix setmatrix
	1 1 AutoCellSize
	dup 0 eq { pop 1} if
	exch
	dup 0 eq { pop 1} if
	exch
	/psy exch iSizeY mul def
	/psx exch iSizeX mul def
	/patternDict 64 dict def
	patternDict begin
		/NotDef {} def
		/LiteDiagLines {
			iSizeX iSizeY false [iSizeX 0.0 0.0 iSizeY -1.0 mul  0.0 iSizeY]
			{pat}
			imagemask
		} bind def
	end
	/CustEncoding 256 array def
	0 255 1 {
		CustEncoding exch /NotDef put
	} bind for
	CustEncoding 65 /LiteDiagLines put
	patternDict CustEncoding /PatternFont MakePatternFont
	/pathSegProc {
		strokepath
		CheckPath {
			65 PatternFill newpath
		} if
	} bind def
	cm setmatrix
} bind def
/XRound {
	dup
	3 -1 roll
	exch mul round
	exch div
} bind def
/RoundMatrix {
	/i 0 def
	dup {
		100000.0 XRound
		1 index
		exch i exch put
		/i i 1 add def
	} forall
} bind def
/GetBoxesRatio {
3 -1 roll sub
7 1 roll
exch sub
6 1 roll
3 -1 roll sub
5 1 roll
exch sub
4 1 roll
3 -1 roll div
3 1 roll
exch div
exch
} bind def
/T {792 exch sub} bind def
/sx 0 def
/sy 0 def
/ex 0 def
/ey 0 def
/lw  0 def
/siz 0 def
/U {gsave 0 setlinecap
/lw siz 0.078125 mul def  /ey exch neg def /ex exch def /sy exch neg def /sx exch def
fontkind plain eq 
 {
  lw siz 0.0119444 mul sub setlinewidth sx sy moveto ex ey lineto stroke
 }
 {
   currentdict /outlineFontSize known outlineFontSize 0 gt and
     {
       fontkind outline eq
         {
           /sy sy 0.0119444 siz mul sub def
           /ey ey 0.0119444 siz mul sub def
           gsave 
           1 1 1 setrgbcolor lw siz 0.0119444 mul sub setlinewidth sx sy moveto ex ey lineto stroke
           grestore
           lw siz 0.0119444 mul sub setlinewidth sx sy moveto ex ey lineto
           strokepath 0.0119444 siz mul setlinewidth stroke
         } if
       fontkind shadow eq fontkind outlineshadow eq or
         {
           /sy sy 0.0358332 siz mul sub def
           /ey ey 0.0358332 siz mul sub def
           lw setlinewidth
           lw 2 div sx add sy
           lw 2 div sub moveto
           lw 2 div ex add ey
           lw 2 div sub lineto stroke 
           gsave
           1 1 1 setrgbcolor lw siz 0.0119444 mul sub setlinewidth sx sy moveto ex ey lineto stroke
           grestore
           lw siz 0.0119444 mul sub setlinewidth sx sy moveto ex ey lineto
           strokepath 0.0119444 siz mul setlinewidth stroke
         } if
      } if
 } ifelse
grestore} bind def
/plain 1 def
/outline 2 def
/shadow 3 def
/outlineshadow 4 def
/fess {
	currentdict /outlineFontSize known {
		/outlineFontSize 2 index def
	} if
	findfont exch dup /siz exch def scalefont setfont
} bind def
/SHDW {gsave siz oldfontname fess siz 0.055 mul x add y siz 0.05 mul sub moveto c show grestore} def
/NRML {gsave 1 1 1 setrgbcolor siz oldfontname fess x y moveto c show grestore siz /Outline fess  x y moveto c show} def
/S {
fontkind plain eq {neg moveto show} if
fontkind outline eq {neg /y exch def /x exch def /c exch def NRML} if
fontkind shadow eq {neg /y exch def /x exch def /c exch def SHDW NRML} if
fontkind outlineshadow eq {neg /y exch def /x exch def /c exch def SHDW NRML} if
} bind def
/F {
/fontkind exch def
fontkind plain eq {fess} if
fontkind outline eq {dup /oldfontname exch def exch dup /siz exch def exch OLF} if
fontkind shadow eq {dup /oldfontname exch def exch dup /siz exch def exch OLF} if
fontkind outlineshadow eq {dup /oldfontname exch def exch dup /siz exch def exch OLF} if
} bind def
/makeoutlinedict 15 dict def
/makeoutlinefont
 {
  makeoutlinedict begin
   /uniqueid exch def
   /strokewidth exch def
   /newfontname exch def
   /basefontname exch def
   FontDirectory basefontname known not {
    /basefontname /Times-Roman def
   } if
   /basefontdict basefontname findfont def
   /numentries basefontdict maxlength 1 add def
   basefontdict /UniqueID known not
   {/numentries numentries 1 add def} if
   /outfontdict numentries dict def
   basefontdict
   {
     exch dup /FID ne {exch outfontdict 3 1 roll put} {pop pop} ifelse
	  }forall
   outfontdict /FontName newfontname put
   outfontdict /PaintType 2 put
   outfontdict /StrokeWidth strokewidth put
   outfontdict /UniqueID uniqueid put
   newfontname outfontdict definefont pop
  end
  }def
/UID {
 findfont dup /UniqueID known
  {/UniqueID get 1 add}
  {pop 1}
  ifelse
} def
/OLF {
dup
/Outline
1000 62 div
4 -1 roll
UID
/outlineFontSize 5 index def
makeoutlinefont
/Outline findfont exch scalefont setfont
} def
/CopyEncoding {
findfont
/Encoding get
dup length array
/tarrayz exch def
tarrayz 0
3 -1 roll
putinterval
tarrayz
} bind def
/Re-encode {
dup length array copy
/eap 0 def
exch {
dup type /integertype eq {
/eap exch def
} {
1 index
exch
eap exch
put
/eap eap 1 add def
} ifelse
} forall
} bind def
/EncodeFont	{
findfont dup
length dict
begin
{	1 index /FID ne
{ def }
{ pop pop } ifelse
} forall
/FontName exch def
/Encoding exch def
FontName currentdict
end
definefont pop
} bind def
/SR { 
 pbox left get pbox top get moveto 
 pbox right get pbox top get lineto 
 pbox right get pbox bottom get lineto 
 pbox left get pbox bottom get lineto 
 closepath
} bind def 
/StripFromFront { 
dup length
2 index sub
3 1 roll
exch 3 -1 roll
getinterval
} bind def
/MakePathArray { 
 /k 0 def 
 {/k k 1 add def pop pop}{/k k 1 add def pop pop}{/k k 1 add def pop pop pop pop pop pop}{/k k 1 add def }pathforall 
 k array
 /k 0 def 
 {{moveto} 3 array astore 1 index k 3 -1 roll put /k k 1 add def} 
 {{lineto} 3 array astore 1 index k 3 -1 roll put /k k 1 add def} 
 {{curveto} 7 array astore 1 index k 3 -1 roll put /k k 1 add def} 
 {{closepath} 1 array astore 1 index k 3 -1 roll put /k k 1 add def} 
pathforall 
}bind def 
/MakeFlatPathArray { 
/k 0 def 
{/k k 1 add def pop pop}{/k k 1 add def pop pop}{pop pop pop pop pop pop}{}pathforall 
k array
/k 0 def 
{{moveto} 3 array astore 1 index k 3 -1 roll put /k k 1 add def} 
{{lineto} 3 array astore 1 index k 3 -1 roll put /k k 1 add def} 
{ pop pop pop pop pop pop} 
{} 
pathforall 
}bind def 
/FractionalLine {
2 index sub
.00001 mul
exch
3 index sub
.00001 mul
4 -1 roll add
3 1 roll
add
} bind def
/calcLineLength {
 exch
 4 -1 roll
 sub
 dup mul
 3 1 roll exch
 sub
 dup mul
 add sqrt
} bind def
/InitTotalLineLength {
 /oldY exch def
 /oldX exch def
 theDash aload pop currentLineLength add setdash
} bind def
/AccumeLineLength {
 3 copy pop
 2 copy
 oldX oldY
 4 2 roll calcLineLength
 /segmentLength exch def
 /currentLineLength currentLineLength segmentLength add def
 /oldY exch def
 /oldX exch def
} bind def
/DecumeLastLineLength {
 /currentLineLength currentLineLength segmentLength sub def
} bind def
/DrawFlattendSegment {
 /pointCount 2 def
 dup 0 lt { pop 0 } if
 fpc
 3 1 roll
 2 index
 1 index
 gt {
 2 copy get
 dup length
 dup 3 eq {
 pop
 dup 0 get
 exch 1 get
 2 copy InitTotalLineLength  
 m
 } {
 } ifelse
 } {
 pop 1 index
 } ifelse
 dup 1 add
 3 index
 exch sub
 dup 10 gt { pop 10} if
 {
 1 add
 2 copy
 get aload pop
 AccumeLineLength
 exec
 } repeat
 3 1 roll pop pop
 DecumeLastLineLength
} bind def
/IncFPC {
 fpc add
 /fpc exch def
} bind def
/DrawFlatPathArray {
 fpc
 0 { 
 dup 2 index
 1 sub
 lt { 
 flatPathArray exch
 newpath
 1 sub DrawFlattendSegment
 gsave
 pathSegProc
 grestore
 newpath
 }
 {
 pop pop
 exit
 } ifelse
 } loop
} bind def
/RecordFirstSubSegment {
 closepathArray 0 pathArray 0 get
 put
 closepathArray 1
 pathArray 0 get aload pop pop
 pathArray 1 get dup length 3 eq {
 aload pop pop
 } {
 newpath
 0 0 moveto
 aload pop exec
 /segmentArray flattenpath MakeFlatPathArray def
 segmentArray 1 get aload pop pop
 } ifelse
 FractionalLine {lineto} 3 array astore
 put
} bind def
/AppendClosePath {
 closepathArray 0 get 2 {lineto} put
 flatPathArray fpc closepathArray 0 get put
 1 IncFPC
 flatPathArray fpc closepathArray 1 get put
 1 IncFPC
} bind def
/RecordCurrentDash {
 /theDash
 currentdash 2 array astore def
 /currentLineLength 0 def
} bind def
/PatternStroke {
	0 setlinecap
 RecordCurrentDash
 /saveFlat currentflat def
 .5 setflat
 /pathArray MakePathArray def
 /closepathArray 2 array def
 /pathLength pathArray length def
 /flatPathArray 513 array def
 /currentLineLength 0 def
 /fpc 0 def
 pathArray pathLength 1 sub get
 length 1 eq {
 /usingClosepath true def
 RecordFirstSubSegment
 /pathLength pathLength 1 sub def
 } {
 /usingClosepath false def
 } ifelse
 0 1 pathLength 1 sub {
 pathArray exch get
 dup length 3 eq {
 fpc 1 add 512 ge {
 DrawFlatPathArray
 fpc 2 ge {
 flatPathArray flatPathArray fpc 2 sub get 0 put
 flatPathArray flatPathArray fpc 1 sub get 1 put
 /fpc 2 def
 }{
 /fpc 0 def
 } ifelse
 } if
 flatPathArray exch fpc exch put
 1 IncFPC
 } {
 dup length 7 eq {
 newpath
 /nToStrip 0 def
 fpc 1 gt {
 flatPathArray fpc 2 sub get aload pop pop m
 flatPathArray fpc 1 sub get aload pop exec
 /nToStrip 2 def
 } {
 fpc 1 eq {
 flatPathArray fpc 1 sub get aload pop exec
 /nToStrip 2 def
 } if
 } ifelse
 aload pop exec
 /segmentArray flattenpath MakeFlatPathArray def
 /segmentArray nToStrip segmentArray StripFromFront def
 segmentArray length fpc add 512 lt {
 flatPathArray fpc segmentArray putinterval
 segmentArray length IncFPC
 } {
 DrawFlatPathArray
 fpc 1 gt {
 flatPathArray flatPathArray fpc 2 sub get 0 exch put
 flatPathArray flatPathArray fpc 1 sub get 1 exch put
 /fpc 2 def
 }{
 /fpc 0 def
 } ifelse
 segmentArray length 512 lt {
 flatPathArray fpc segmentArray putinterval
 segmentArray length IncFPC
 } {
 segmentArray length
 /exitLoop false def
 0 
 {
 2 copy sub
 dup 500 gt {
 pop 500
 } { 
 /exitLoop true def
 } ifelse 
 segmentArray 2 index 2 index getinterval
 flatPathArray fpc 3 -1 roll putinterval
 dup IncFPC
 add 
 exitLoop {
 exit 
 } {
 DrawFlatPathArray
 fpc 1 gt {
 flatPathArray flatPathArray fpc 2 sub get 0 exch put
 flatPathArray flatPathArray fpc 1 sub get 1 exch put
 /fpc 2 def
 }{
 /fpc 0 def
 } ifelse
 } ifelse
 } loop
 } ifelse
 } ifelse
 } if
 } ifelse
 } for
 fpc 0 gt {
 usingClosepath {
 AppendClosePath
 } if
 DrawFlatPathArray
 } if
 saveFlat setflat
} bind def


initmsaverestore
/tctm matrix currentmatrix def
tctm RoundMatrix setmatrix
/patternMatrix mstore def
10 setmiterlimit
2 setlinecap
newpath
save
[ 39/quotesingle 96/grave 128/Adieresis/Aring/Ccedilla/Eacute/Ntilde/Odieresis
/Udieresis/aacute/agrave/acircumflex/adieresis/atilde/aring/ccedilla/eacute
/egrave/ecircumflex/edieresis/iacute/igrave/icircumflex/idieresis/ntilde
/oacute/ograve/ocircumflex/odieresis/otilde/uacute/ugrave/ucircumflex
/udieresis/dagger/degree/cent/sterling/section/bullet/paragraph/germandbls
/registered/copyright/trademark/acute/dieresis/.notdef/AE/Oslash
/.notdef/plusminus/.notdef/.notdef/yen/mu/.notdef/.notdef
/.notdef/.notdef/.notdef/ordfeminine/ordmasculine/.notdef/ae/oslash
/questiondown/exclamdown/logicalnot/.notdef/florin/.notdef/.notdef
/guillemotleft/guillemotright/ellipsis/.notdef/Agrave/Atilde/Otilde/OE/oe
/endash/emdash/quotedblleft/quotedblright/quoteleft/quoteright/divide
/.notdef/ydieresis/Ydieresis/fraction/currency/guilsinglleft/guilsinglright
/fi/fl/daggerdbl/periodcentered/quotesinglbase/quotedblbase/perthousand
/Acircumflex/Ecircumflex/Aacute/Edieresis/Egrave/Iacute/Icircumflex
/Idieresis/Igrave/Oacute/Ocircumflex/.notdef/Ograve/Uacute/Ucircumflex
/Ugrave/dotlessi/circumflex/tilde/macron/breve/dotaccent/ring/cedilla
/hungarumlaut/ogonek/caron]
StandardEncoding Re-encode /_AvantGarde-Book /AvantGarde-Book EncodeFont

/RT {SR} def
/LC {} def
/SS {pop} def
/PF {} def
/PC {} def
0.000 0 62.000 54.000 0.000 0.000 16.000 129.000 rect
gsave
118.500 70.000 T translate
0.0 rotate
1 1 scale
14.000 (_AvantGarde-Book) plain F
 /setcmykcolor where
 {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse 

(\() -64.500 4.000 S
(a) -60.500 4.000 S
(\)) -50.500 4.000 S
( ) -45.500 4.000 S
(A) -42.500 4.000 S
(n) -31.500 4.000 S
( ) -23.500 4.000 S
(E) -20.500 4.000 S
(x) -13.500 4.000 S
(p) -7.500 4.000 S
(l) 2.500 4.000 S
(a) 5.500 4.000 S
(n) 15.500 4.000 S
(a) 23.500 4.000 S
(t) 33.500 4.000 S
(i) 38.500 4.000 S
(o) 41.500 4.000 S
(n) 51.500 4.000 S
grestore
/RT {SR} def
/LC {} def
/SS {pop} def
/PF {} def
/PC {} def
0.000 0 207.000 54.000 0.000 0.000 31.000 151.000 rect
gsave
129.500 222.500 T translate
0.0 rotate
1 1 scale
14.000 (_AvantGarde-Book) fess
 /setcmykcolor where
 {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse 

(\() -75.500 -4.000 S
(c) -71.500 -4.000 S
(\)) -62.500 -4.000 S
( ) -57.500 -4.000 S
(A) -54.500 -4.000 S
(n) -43.500 -4.000 S
( ) -35.500 -4.000 S
(U) -32.500 -4.000 S
(n) -23.500 -4.000 S
(a) -15.500 -4.000 S
(c) -5.500 -4.000 S
(c) 3.500 -4.000 S
(e) 12.500 -4.000 S
(p) 22.500 -4.000 S
(t) 32.500 -4.000 S
(a) 37.500 -4.000 S
(b) 47.500 -4.000 S
(l) 57.500 -4.000 S
(e) 60.500 -4.000 S
 /setcmykcolor where
 {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse 

( ) -75.500 11.000 S
( ) -72.500 11.000 S
( ) -69.500 11.000 S
( ) -66.500 11.000 S
( ) -63.500 11.000 S
( ) -60.500 11.000 S
( ) -57.500 11.000 S
(E) -54.500 11.000 S
(x) -47.500 11.000 S
(p) -41.500 11.000 S
(l) -31.500 11.000 S
(a) -28.500 11.000 S
(n) -18.500 11.000 S
(a) -10.500 11.000 S
(t) -0.500 11.000 S
(i) 4.500 11.000 S
(o) 7.500 11.000 S
(n) 17.500 11.000 S
grestore
/RT {SR} def
/LC {} def
/SS {pop} def
/PF {} def
/PC {} def
0.000 0 135.000 54.000 0.000 0.000 16.000 162.000 rect
gsave
135.000 143.000 T translate
0.0 rotate
1 1 scale
14.000 (_AvantGarde-Book) fess
 /setcmykcolor where
 {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse 

(\() -80.500 4.000 S
(b) -76.500 4.000 S
(\)) -66.500 4.000 S
( ) -61.500 4.000 S
(T) -58.500 4.000 S
(h) -51.500 4.000 S
(e) -43.500 4.000 S
( ) -33.500 4.000 S
(N) -30.500 4.000 S
(u) -20.500 4.000 S
(l) -12.500 4.000 S
(l) -9.500 4.000 S
( ) -6.500 4.000 S
(E) -3.500 4.000 S
(x) 3.500 4.000 S
(p) 9.500 4.000 S
(l) 19.500 4.000 S
(a) 22.500 4.000 S
(n) 32.500 4.000 S
(a) 40.500 4.000 S
(t) 50.500 4.000 S
(i) 55.500 4.000 S
(o) 58.500 4.000 S
(n) 68.500 4.000 S
grestore
/RT {SR} def
/LC {} def
/SS {pop} def
/PF {} def
/PC {} def
0.000 0 279.000 54.000 0.000 0.000 31.000 113.000 rect
gsave
110.500 294.500 T translate
0.0 rotate
1 1 scale
14.000 (_AvantGarde-Book) fess
 /setcmykcolor where
 {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse 

(\() -56.500 -4.000 S
(d) -52.500 -4.000 S
(\)) -42.500 -4.000 S
( ) -37.500 -4.000 S
(T) -34.500 -4.000 S
(h) -27.500 -4.000 S
(e) -19.500 -4.000 S
( ) -9.500 -4.000 S
(S) -6.500 -4.000 S
(m) 1.500 -4.000 S
(a) 14.500 -4.000 S
(l) 24.500 -4.000 S
(l) 27.500 -4.000 S
(e) 30.500 -4.000 S
(s) 40.500 -4.000 S
(t) 46.500 -4.000 S
 /setcmykcolor where
 {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse 

( ) -56.500 11.000 S
( ) -53.500 11.000 S
( ) -50.500 11.000 S
( ) -47.500 11.000 S
( ) -44.500 11.000 S
( ) -41.500 11.000 S
( ) -38.500 11.000 S
(E) -35.500 11.000 S
(x) -28.500 11.000 S
(p) -22.500 11.000 S
(l) -12.500 11.000 S
(a) -9.500 11.000 S
(n) 0.500 11.000 S
(a) 8.500 11.000 S
(t) 18.500 11.000 S
(i) 23.500 11.000 S
(o) 26.500 11.000 S
(n) 36.500 11.000 S
grestore
/RT {SR} def
/SD {} def
/SS {setlinewidth SD stroke} def
/LC { /setcmykcolor where
 {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse 
} def
/PC { /setcmykcolor where
 {begin 0.000 0.000 0.000 0.000 setcmykcolor end} {1.000 1.000 1.000 setrgbcolor} ifelse 
} def
/PF {gsave fill grestore} def
1.000 0 54.000 234.000 0.000 0.000 36.000 72.000 rect
/RT {SR} def
/SD {} def
/SS {setlinewidth SD stroke} def
/LC { /setcmykcolor where
 {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse 
} def
/PC { /setcmykcolor where
 {begin 0.000 0.000 0.000 0.000 setcmykcolor end} {1.000 1.000 1.000 setrgbcolor} ifelse 
} def
/PF {gsave fill grestore} def
1.000 0 54.000 306.000 0.000 0.000 36.000 144.000 rect
/RT {SR} def
/LC {} def
/SS {pop} def
/PF {} def
/PC {} def
0.000 0 63.000 243.000 0.000 0.000 16.000 51.000 rect
gsave
268.500 71.000 T translate
0.0 rotate
1 1 scale
14.000 (_AvantGarde-Book) fess
 /setcmykcolor where
 {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse 

(T) -25.500 4.000 S
(h) -18.500 4.000 S
(e) -10.500 4.000 S
(o) -0.500 4.000 S
(r) 9.500 4.000 S
(y) 13.500 4.000 S
grestore
/RT {SR} def
/LC {} def
/SS {pop} def
/PF {} def
/PC {} def
0.000 0 63.000 360.000 0.000 0.000 16.000 41.000 rect
gsave
380.500 71.000 T translate
0.0 rotate
1 1 scale
14.000 (_AvantGarde-Book) fess
 /setcmykcolor where
 {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse 

(D) -20.500 4.000 S
(a) -9.500 4.000 S
(t) 0.500 4.000 S
(a) 5.500 4.000 S
grestore
/RT {SR} def
/SD {} def
/SS {setlinewidth SD stroke} def
/LC { /setcmykcolor where
 {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse 
} def
/PC { /setcmykcolor where
 {begin 0.000 0.000 0.000 0.000 setcmykcolor end} {1.000 1.000 1.000 setrgbcolor} ifelse 
} def
/PF {gsave fill grestore} def
1.000 0 126.000 234.000 0.000 0.000 36.000 252.000 rect
/RT {SR} def
/LC {} def
/SS {pop} def
/PF {} def
/PC {} def
0.000 0 135.000 342.000 0.000 0.000 16.000 41.000 rect
gsave
362.500 143.000 T translate
0.0 rotate
1 1 scale
14.000 (_AvantGarde-Book) fess
 /setcmykcolor where
 {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse 

(D) -20.500 4.000 S
(a) -9.500 4.000 S
(t) 0.500 4.000 S
(a) 5.500 4.000 S
grestore
/RT {SR} def
/SD {} def
/SS {setlinewidth SD stroke} def
/LC { /setcmykcolor where
 {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse 
} def
/PC { /setcmykcolor where
 {begin 0.000 0.000 0.000 0.000 setcmykcolor end} {1.000 1.000 1.000 setrgbcolor} ifelse 
} def
/PF {gsave fill grestore} def
1.000 0 198.000 234.000 0.000 0.000 36.000 269.998 rect
/RT {SR} def
/SD {} def
/SS {setlinewidth SD stroke} def
/LC { /setcmykcolor where
 {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse 
} def
/PC { /setcmykcolor where
 {begin 0.000 0.000 0.000 0.000 setcmykcolor end} {1.000 1.000 1.000 setrgbcolor} ifelse 
} def
/PF {gsave fill grestore} def
1.000 0 198.000 504.000 0.000 0.000 36.000 44.999 rect
/RT {SR} def
/LC {} def
/SS {pop} def
/PF {} def
/PC {} def
0.000 0 207.000 315.000 0.000 0.000 16.000 51.000 rect
gsave
340.500 215.000 T translate
0.0 rotate
1 1 scale
14.000 (_AvantGarde-Book) fess
 /setcmykcolor where
 {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse 

(T) -25.500 4.000 S
(h) -18.500 4.000 S
(e) -10.500 4.000 S
(o) -0.500 4.000 S
(r) 9.500 4.000 S
(y) 13.500 4.000 S
grestore
/RT {SR} def
/SD {} def
/SS {setlinewidth SD stroke} def
/LC { /setcmykcolor where
 {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse 
} def
/PC { /setcmykcolor where
 {begin 0.000 0.000 0.000 0.000 setcmykcolor end} {1.000 1.000 1.000 setrgbcolor} ifelse 
} def
/PF {gsave fill grestore} def
1.000 0 270.000 234.000 0.000 0.000 36.000 108.000 rect
/RT {SR} def
/SD {} def
/SS {setlinewidth SD stroke} def
/LC { /setcmykcolor where
 {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse 
} def
/PC { /setcmykcolor where
 {begin 0.000 0.000 0.000 0.000 setcmykcolor end} {1.000 1.000 1.000 setrgbcolor} ifelse 
} def
/PF {gsave fill grestore} def
1.000 0 270.000 342.000 0.000 0.000 36.000 72.000 rect
/RT {SR} def
/LC {} def
/SS {pop} def
/PF {} def
/PC {} def
0.000 0 279.000 261.000 0.000 0.000 16.000 51.000 rect
gsave
286.500 287.000 T translate
0.0 rotate
1 1 scale
14.000 (_AvantGarde-Book) fess
 /setcmykcolor where
 {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse 

(T) -25.500 4.000 S
(h) -18.500 4.000 S
(e) -10.500 4.000 S
(o) -0.500 4.000 S
(r) 9.500 4.000 S
(y) 13.500 4.000 S
grestore
/RT {SR} def
/LC {} def
/SS {pop} def
/PF {} def
/PC {} def
0.000 0 279.000 360.000 0.000 0.000 16.000 41.000 rect
gsave
380.500 287.000 T translate
0.0 rotate
1 1 scale
14.000 (_AvantGarde-Book) fess
 /setcmykcolor where
 {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse 

(D) -20.500 4.000 S
(a) -9.500 4.000 S
(t) 0.500 4.000 S
(a) 5.500 4.000 S
grestore
/RT {SR} def
/LC {} def
/SS {pop} def
/PF {} def
/PC {} def
0.000 0 207.000 504.000 0.000 0.000 16.000 44.000 rect
gsave
526.000 215.000 T translate
0.0 rotate
1 1 scale
14.000 (_AvantGarde-Book) fess
 /setcmykcolor where
 {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse 

( ) -21.500 4.000 S
(D) -18.500 4.000 S
(a) -7.500 4.000 S
(t) 2.500 4.000 S
(a) 7.500 4.000 S
grestore
/RT {SR} def
/SD {} def
/SS {setlinewidth SD stroke} def
/LC { /setcmykcolor where
 {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse 
} def
/PC { /setcmykcolor where
 {begin 0.000 0.000 0.000 0.000 setcmykcolor end} {1.000 1.000 1.000 setrgbcolor} ifelse 
} def
/PF {gsave fill grestore} def
1.000 0 18.000 18.000 0.000 0.000 324.000 567.000 rect
/RT {SR} def
/LC {} def
/SS {pop} def
/PF {} def
/PC {} def
0.000 0 62.000 54.000 0.000 0.000 16.000 129.000 rect
gsave
118.500 70.000 T translate
0.0 rotate
1 1 scale
14.000 (_AvantGarde-Book) fess
 /setcmykcolor where
 {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse 

(\() -64.500 4.000 S
(a) -60.500 4.000 S
(\)) -50.500 4.000 S
( ) -45.500 4.000 S
(A) -42.500 4.000 S
(n) -31.500 4.000 S
( ) -23.500 4.000 S
(E) -20.500 4.000 S
(x) -13.500 4.000 S
(p) -7.500 4.000 S
(l) 2.500 4.000 S
(a) 5.500 4.000 S
(n) 15.500 4.000 S
(a) 23.500 4.000 S
(t) 33.500 4.000 S
(i) 38.500 4.000 S
(o) 41.500 4.000 S
(n) 51.500 4.000 S
grestore
/RT {SR} def
/LC {} def
/SS {pop} def
/PF {} def
/PC {} def
0.000 0 207.000 54.000 0.000 0.000 31.000 151.000 rect
gsave
129.500 222.500 T translate
0.0 rotate
1 1 scale
14.000 (_AvantGarde-Book) fess
 /setcmykcolor where
 {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse 

(\() -75.500 -4.000 S
(c) -71.500 -4.000 S
(\)) -62.500 -4.000 S
( ) -57.500 -4.000 S
(A) -54.500 -4.000 S
(n) -43.500 -4.000 S
( ) -35.500 -4.000 S
(U) -32.500 -4.000 S
(n) -23.500 -4.000 S
(a) -15.500 -4.000 S
(c) -5.500 -4.000 S
(c) 3.500 -4.000 S
(e) 12.500 -4.000 S
(p) 22.500 -4.000 S
(t) 32.500 -4.000 S
(a) 37.500 -4.000 S
(b) 47.500 -4.000 S
(l) 57.500 -4.000 S
(e) 60.500 -4.000 S
 /setcmykcolor where
 {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse 

( ) -75.500 11.000 S
( ) -72.500 11.000 S
( ) -69.500 11.000 S
( ) -66.500 11.000 S
( ) -63.500 11.000 S
( ) -60.500 11.000 S
( ) -57.500 11.000 S
(E) -54.500 11.000 S
(x) -47.500 11.000 S
(p) -41.500 11.000 S
(l) -31.500 11.000 S
(a) -28.500 11.000 S
(n) -18.500 11.000 S
(a) -10.500 11.000 S
(t) -0.500 11.000 S
(i) 4.500 11.000 S
(o) 7.500 11.000 S
(n) 17.500 11.000 S
grestore
/RT {SR} def
/LC {} def
/SS {pop} def
/PF {} def
/PC {} def
0.000 0 135.000 54.000 0.000 0.000 16.000 162.000 rect
gsave
135.000 143.000 T translate
0.0 rotate
1 1 scale
14.000 (_AvantGarde-Book) fess
 /setcmykcolor where
 {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse 

(\() -80.500 4.000 S
(b) -76.500 4.000 S
(\)) -66.500 4.000 S
( ) -61.500 4.000 S
(T) -58.500 4.000 S
(h) -51.500 4.000 S
(e) -43.500 4.000 S
( ) -33.500 4.000 S
(N) -30.500 4.000 S
(u) -20.500 4.000 S
(l) -12.500 4.000 S
(l) -9.500 4.000 S
( ) -6.500 4.000 S
(E) -3.500 4.000 S
(x) 3.500 4.000 S
(p) 9.500 4.000 S
(l) 19.500 4.000 S
(a) 22.500 4.000 S
(n) 32.500 4.000 S
(a) 40.500 4.000 S
(t) 50.500 4.000 S
(i) 55.500 4.000 S
(o) 58.500 4.000 S
(n) 68.500 4.000 S
grestore
/RT {SR} def
/LC {} def
/SS {pop} def
/PF {} def
/PC {} def
0.000 0 279.000 54.000 0.000 0.000 31.000 113.000 rect
gsave
110.500 294.500 T translate
0.0 rotate
1 1 scale
14.000 (_AvantGarde-Book) fess
 /setcmykcolor where
 {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse 

(\() -56.500 -4.000 S
(d) -52.500 -4.000 S
(\)) -42.500 -4.000 S
( ) -37.500 -4.000 S
(T) -34.500 -4.000 S
(h) -27.500 -4.000 S
(e) -19.500 -4.000 S
( ) -9.500 -4.000 S
(S) -6.500 -4.000 S
(m) 1.500 -4.000 S
(a) 14.500 -4.000 S
(l) 24.500 -4.000 S
(l) 27.500 -4.000 S
(e) 30.500 -4.000 S
(s) 40.500 -4.000 S
(t) 46.500 -4.000 S
 /setcmykcolor where
 {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse 

( ) -56.500 11.000 S
( ) -53.500 11.000 S
( ) -50.500 11.000 S
( ) -47.500 11.000 S
( ) -44.500 11.000 S
( ) -41.500 11.000 S
( ) -38.500 11.000 S
(E) -35.500 11.000 S
(x) -28.500 11.000 S
(p) -22.500 11.000 S
(l) -12.500 11.000 S
(a) -9.500 11.000 S
(n) 0.500 11.000 S
(a) 8.500 11.000 S
(t) 18.500 11.000 S
(i) 23.500 11.000 S
(o) 26.500 11.000 S
(n) 36.500 11.000 S
grestore
/RT {SR} def
/SD {} def
/SS {setlinewidth SD stroke} def
/LC { /setcmykcolor where
 {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse 
} def
/PC { /setcmykcolor where
 {begin 0.000 0.000 0.000 0.000 setcmykcolor end} {1.000 1.000 1.000 setrgbcolor} ifelse 
} def
/PF {gsave fill grestore} def
1.000 0 54.000 234.000 0.000 0.000 36.000 72.000 rect
/RT {SR} def
/SD {} def
/SS {setlinewidth SD stroke} def
/LC { /setcmykcolor where
 {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse 
} def
/PC { /setcmykcolor where
 {begin 0.000 0.000 0.000 0.000 setcmykcolor end} {1.000 1.000 1.000 setrgbcolor} ifelse 
} def
/PF {gsave fill grestore} def
1.000 0 54.000 306.000 0.000 0.000 36.000 144.000 rect
/RT {SR} def
/LC {} def
/SS {pop} def
/PF {} def
/PC {} def
0.000 0 63.000 243.000 0.000 0.000 16.000 51.000 rect
gsave
268.500 71.000 T translate
0.0 rotate
1 1 scale
14.000 (_AvantGarde-Book) fess
 /setcmykcolor where
 {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse 

(T) -25.500 4.000 S
(h) -18.500 4.000 S
(e) -10.500 4.000 S
(o) -0.500 4.000 S
(r) 9.500 4.000 S
(y) 13.500 4.000 S
grestore
/RT {SR} def
/LC {} def
/SS {pop} def
/PF {} def
/PC {} def
0.000 0 63.000 360.000 0.000 0.000 16.000 41.000 rect
gsave
380.500 71.000 T translate
0.0 rotate
1 1 scale
14.000 (_AvantGarde-Book) fess
 /setcmykcolor where
 {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse 

(D) -20.500 4.000 S
(a) -9.500 4.000 S
(t) 0.500 4.000 S
(a) 5.500 4.000 S
grestore
/RT {SR} def
/SD {} def
/SS {setlinewidth SD stroke} def
/LC { /setcmykcolor where
 {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse 
} def
/PC { /setcmykcolor where
 {begin 0.000 0.000 0.000 0.000 setcmykcolor end} {1.000 1.000 1.000 setrgbcolor} ifelse 
} def
/PF {gsave fill grestore} def
1.000 0 126.000 234.000 0.000 0.000 36.000 252.000 rect
/RT {SR} def
/LC {} def
/SS {pop} def
/PF {} def
/PC {} def
0.000 0 135.000 342.000 0.000 0.000 16.000 41.000 rect
gsave
362.500 143.000 T translate
0.0 rotate
1 1 scale
14.000 (_AvantGarde-Book) fess
 /setcmykcolor where
 {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse 

(D) -20.500 4.000 S
(a) -9.500 4.000 S
(t) 0.500 4.000 S
(a) 5.500 4.000 S
grestore
/RT {SR} def
/SD {} def
/SS {setlinewidth SD stroke} def
/LC { /setcmykcolor where
 {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse 
} def
/PC { /setcmykcolor where
 {begin 0.000 0.000 0.000 0.000 setcmykcolor end} {1.000 1.000 1.000 setrgbcolor} ifelse 
} def
/PF {gsave fill grestore} def
1.000 0 198.000 234.000 0.000 0.000 36.000 269.998 rect
/RT {SR} def
/SD {} def
/SS {setlinewidth SD stroke} def
/LC { /setcmykcolor where
 {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse 
} def
/PC { /setcmykcolor where
 {begin 0.000 0.000 0.000 0.000 setcmykcolor end} {1.000 1.000 1.000 setrgbcolor} ifelse 
} def
/PF {gsave fill grestore} def
1.000 0 198.000 504.000 0.000 0.000 36.000 44.999 rect
/RT {SR} def
/LC {} def
/SS {pop} def
/PF {} def
/PC {} def
0.000 0 207.000 315.000 0.000 0.000 16.000 51.000 rect
gsave
340.500 215.000 T translate
0.0 rotate
1 1 scale
14.000 (_AvantGarde-Book) fess
 /setcmykcolor where
 {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse 

(T) -25.500 4.000 S
(h) -18.500 4.000 S
(e) -10.500 4.000 S
(o) -0.500 4.000 S
(r) 9.500 4.000 S
(y) 13.500 4.000 S
grestore
/RT {SR} def
/SD {} def
/SS {setlinewidth SD stroke} def
/LC { /setcmykcolor where
 {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse 
} def
/PC { /setcmykcolor where
 {begin 0.000 0.000 0.000 0.000 setcmykcolor end} {1.000 1.000 1.000 setrgbcolor} ifelse 
} def
/PF {gsave fill grestore} def
1.000 0 270.000 234.000 0.000 0.000 36.000 108.000 rect
/RT {SR} def
/SD {} def
/SS {setlinewidth SD stroke} def
/LC { /setcmykcolor where
 {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse 
} def
/PC { /setcmykcolor where
 {begin 0.000 0.000 0.000 0.000 setcmykcolor end} {1.000 1.000 1.000 setrgbcolor} ifelse 
} def
/PF {gsave fill grestore} def
1.000 0 270.000 342.000 0.000 0.000 36.000 72.000 rect
/RT {SR} def
/LC {} def
/SS {pop} def
/PF {} def
/PC {} def
0.000 0 279.000 261.000 0.000 0.000 16.000 51.000 rect
gsave
286.500 287.000 T translate
0.0 rotate
1 1 scale
14.000 (_AvantGarde-Book) fess
 /setcmykcolor where
 {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse 

(T) -25.500 4.000 S
(h) -18.500 4.000 S
(e) -10.500 4.000 S
(o) -0.500 4.000 S
(r) 9.500 4.000 S
(y) 13.500 4.000 S
grestore
/RT {SR} def
/LC {} def
/SS {pop} def
/PF {} def
/PC {} def
0.000 0 279.000 360.000 0.000 0.000 16.000 41.000 rect
gsave
380.500 287.000 T translate
0.0 rotate
1 1 scale
14.000 (_AvantGarde-Book) fess
 /setcmykcolor where
 {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse 

(D) -20.500 4.000 S
(a) -9.500 4.000 S
(t) 0.500 4.000 S
(a) 5.500 4.000 S
grestore
/RT {SR} def
/LC {} def
/SS {pop} def
/PF {} def
/PC {} def
0.000 0 207.000 504.000 0.000 0.000 16.000 44.000 rect
gsave
526.000 215.000 T translate
0.0 rotate
1 1 scale
14.000 (_AvantGarde-Book) fess
 /setcmykcolor where
 {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse 

( ) -21.500 4.000 S
(D) -18.500 4.000 S
(a) -7.500 4.000 S
(t) 2.500 4.000 S
(a) 7.500 4.000 S
grestore
restore
end
%%EndDocument
 @endspecial 656 2269 a(Figure)g(6:)j(A)d(Range)g(of)f(Explanations)62
2370 y(W)m(e)j(de\014ne)h(an)32 b Fp(explanation)i Fr(of)15
b(this)h(subset,)i Fj(D)q Fr(,)e(as)g(a)g(message.)24 b(This)16
b(message)g(will)e(b)q(e)j(enco)q(ded)h(as)e(a)f(binary)0 2420
y(string)e(and)g(consists)h(of)e(t)o(w)o(o)g(parts)i(as)f(sho)o(wn)g(in)f
(Figure)h(6\(a\).)18 b(The)13 b(\014rst)h(part)f(states)h(a)e(theory)m(,)h
Fj(T)6 b Fr(,)13 b(ab)q(out)g Fj(D)q Fr(,)g(and)f(the)0 2470
y(second)j(part)f(states)h Fj(D)g Fr(in)f(full)f(using)g(a)h(co)q(de)g(that)g
(giv)o(es)g(the)h(minim)n(um)9 b(exp)q(ected)16 b(message)p
1521 2470 13 2 v 15 w(length)e(if)f Fj(T)20 b Fr(is)13 b(true.)62
2521 y(By)h(standard)h(co)q(ding)e(theory)m(,)h(the)g(length)g(of)f(the)i
(second)g(part)f(of)f(the)i(message)e(is:)816 2615 y Fi(\000)p
Fj(l)q(og)901 2621 y Fh(2)934 2615 y Fj(P)6 b(r)q(ob)p Fr(\()p
Fj(D)q Fi(j)p Fj(T)g Fr(\))0 2708 y(If)16 b(w)o(e)g(assume)f(a)h(prior)g
(probabilit)o(y)e(distribution)i(o)o(v)o(er)g(the)g(set)h(of)f(theories,)h
(then)f(w)o(e)h(can)f(enco)q(de)h(the)g(\014rst)f(part)h(of)0
2758 y(the)d(message)g(with)g(length:)840 2811 y Fi(\000)p
Fj(l)q(og)925 2817 y Fh(2)958 2811 y Fj(P)6 b(r)q(ob)p Fr(\()p
Fj(T)g Fr(\))965 2936 y(5)p eop
%%Page: 6 6
bop 0 77 a Fr(Ho)o(w)o(ev)o(er,)16 b(there)i(ma)o(y)c(b)q(e)i(no)g(ob)o
(vious)f(probabilit)o(y)f(distribution)h(to)h(assign)g(to)g(complex)e
(theories,)j(suc)o(h)g(as)f(decision)0 127 y(trees.)k(In)14
b(these)h(cases,)g(w)o(e)f(m)o(ust)f(design)h(a)g(co)q(de)h(to)e(express)j
(the)f(theory)f(as)g(a)g(binary)f(string.)19 b(Ho)o(w)o(ev)o(er,)14
b(the)g(use)h(of)e(a)0 177 y(non-redundan)o(t)h(co)q(de)h(in)e(fact)h
(implies)e(a)i(prior)g(probabilit)o(y)e(distribution)h(o)o(v)o(er)h
(theories.)62 226 y(The)h(total)e(length)h(of)f(an)h(explanation)e(is)i
(therefore:)672 304 y Fi(\000)p Fj(l)q(og)757 310 y Fh(2)790
304 y Fj(P)6 b(r)q(ob)p Fr(\()p Fj(T)g Fr(\))i Fi(\000)i Fj(l)q(og)1046
310 y Fh(2)1079 304 y Fj(P)c(r)q(ob)p Fr(\()p Fj(D)q Fi(j)p
Fj(T)g Fr(\))0 382 y(The)14 b(n)o(ull)f(explanation)g(\(sho)o(wn)i(in)e
(Figure)h(6\(b\)\))g(is)g(a)g(message)g(describing)g(the)h(data)e(using)h(a)g
(n)o(ull)f(theory)m(.)18 b(A)c(theory)0 432 y(is)32 b Fp(unac)n(c)n(eptable)i
Fr(\(sho)o(wn)17 b(in)f(Figure)g(6\(c\)\))h(if)e(its)h(explanation)g(of)f
(the)i(data)f(is)g(longer)g(than)g(the)h(n)o(ull)e(explanation.)0
482 y(The)f(shortest)h(explanation)d(\(sho)o(wn)i(in)f(Figure)h(6\(d\)\))f
(of)g Fj(T)20 b Fr(and)13 b Fj(D)i Fr(is)f(considered)g(the)h(b)q(est)f
(explanation.)j(If)c(the)h(data)0 532 y(is)g(totally)e(random)h(\(in)g(the)i
(sense)g(of)f(Chaitin)e([4]\))h(then)i(the)f(b)q(est)h(theory)g(will)d(b)q(e)
j(the)f(n)o(ull)f(theory)m(.)0 646 y Fk(2.2)74 b(Comparing)18
b(Theories)0 722 y Fr(When)10 b(giv)o(en)f(t)o(w)o(o)g(theories,)i
Fj(T)482 728 y Fh(1)510 722 y Fr(and)f Fj(T)611 728 y Fh(2)630
722 y Fr(,)g(ab)q(out)f(some)g(data)g(w)o(e)h(ma)o(y)e(calculate)h(the)i
(message)e(length)g(of)g(the)i(explanations)0 772 y(pro)o(vided)k(b)o(y)h
Fj(T)256 778 y Fh(1)290 772 y Fr(and)g Fj(T)397 778 y Fh(2)416
772 y Fr(.)23 b(W)m(e)15 b(ma)o(y)e(then)k(sa)o(y)e(that)h(one)f(theory)i
(explains)e(the)h(data)f(b)q(etter)i(than)f(the)g(other)g(theory)m(.)0
822 y(When)f(w)o(e)g(do)g(this)g(it)g(is)g(not)g(necessary)i(to)d(actually)g
(enco)q(de)j(the)e(theory)h(and)f(data:)20 b(all)13 b(w)o(e)i(need)h(to)f(do)
g(is)g(calculate)0 872 y(the)f(length)g(of)g(the)g(explanation.)62
922 y(If)i(there)h(is)f(a)f(\014nite)h(n)o(um)o(b)q(er)g(of)f(p)q(ossible)h
(theories,)h(then)f(the)h(MMLP)f(can)g(b)q(e)h(used)g(to)e(\014nd)h(the)h
(\\b)q(est")f(theory)m(,)0 971 y Fj(T)24 977 y Fc(best)85 971
y Fr(.)h(This)11 b(is)h(done)g(b)o(y)f(calculating)f(the)i(length)g(of)f(the)
h(explanation)e(pro)o(vided)h(b)o(y)h(ev)o(ery)g(theory)g(and)f(the)h(theory)
g(with)0 1021 y(the)g(shortest)i(explanation,)d Fj(T)484 1027
y Fc(best)545 1021 y Fr(,)g(is)h(considered)h(the)g(b)q(est)g(theory)m(.)k
(Ho)o(w)o(ev)o(er,)12 b(it)g(is)g(not)f(normally)f(feasible)h(to)h(consider)0
1071 y(ev)o(ery)18 b(p)q(ossible)f(theory)m(.)28 b(In)17 b(some)f
(circumstances,)j(suc)o(h)e(as)h(with)e(classi\014cation,)i(there)g(are)f(an)
g(in\014nite)g(n)o(um)o(b)q(er)g(of)0 1121 y(theories.)i(In)13
b(other)i(circumstances,)f(suc)o(h)g(as)g(decision)f(tree)i(inference,)g
(while)e(there)i(are)f(a)f(\014nite)h(n)o(um)o(b)q(er)e(of)h(theories,)0
1171 y(there)i(are)f(to)q(o)g(man)o(y)e(theories)j(to)f(explore)g(in)f(a)h
(reasonable)g(amoun)o(t)e(of)i(time.)0 1276 y Fa(2.2.1)64 b(Hill)14
b(Clim)o(bing)e(Algorithm)0 1353 y Fr(T)m(o)h(o)o(v)o(ercome)f(this)h
(problem,)f(w)o(e)i(ma)o(y)d(use)j(the)g(MMLP)f(to)h(help)f(us)h(searc)o(h)g
(for)f(a)g(suitable)g(theory)m(.)18 b(Since)c(the)g(MMLP)0
1403 y(allo)o(ws)i(us)h(to)h(compare)e(t)o(w)o(o)h(theories)h(and)f(sa)o(y)g
(one)g(is)g(sup)q(erior)h(to)f(the)h(other,)g(w)o(e)g(ma)o(y)d(b)q(egin)i
(with)g(some)f(theory)m(,)0 1452 y(and)d(iterativ)o(ely)g(prop)q(ose)h(impro)
o(v)o(emen)o(ts)e(to)h(this)g(theory)h(un)o(til)f(no)g(more)g(impro)o(v)o
(emen)o(ts)e(can)j(b)q(e)g(found,)e(as)i(sho)o(wn)f(in)0 1502
y(Figure)h(7.)p 304 1598 1342 2 v 304 2439 2 841 v 581 1681
a Fa(Hill)g(Clim)o(bin)o(g)f(Inductiv)o(e)h(Inference)401 1772
y Fr(1)42 b Fj(T)31 b Fi( )c Fj(N)5 b(ul)q(l)15 b(T)6 b(heor)q(y)401
1822 y Fr(2)42 b Fj(N)5 b(ew)q(T)h(heor)q(ies)26 b Fi( )f Fj(modif)t(y)q
Fr(\()p Fj(T)6 b Fr(\))588 1872 y(where)15 b Fj(N)5 b(ew)q(T)h(heor)q(ies)27
b Fr(=)f Fi(f)p Fj(N)5 b(ew)q(T)1179 1878 y Fh(1)1197 1872
y Fj(;)21 b(N)5 b(ew)q(T)1342 1878 y Fh(2)1361 1872 y Fj(;)20
b(:)7 b(:)g(:)19 b(N)5 b(ew)q(T)1574 1878 y Fc(n)1597 1872
y Fi(g)401 1922 y Fr(3)42 b(If)13 b Fj(N)5 b(ew)q(T)h(heor)q(ies)27
b Fr(=)f Fj(nil)15 b Fr(then)401 1971 y(4)166 b(Return\(T\))401
2021 y(5)42 b(Calculate)13 b(the)i(message)e(length)h(of)f(eac)o(h)i
(NewTheory)588 2071 y Fj(L)616 2077 y Fc(i)656 2071 y Fr(=)25
b Fj(messag)q(e)p 870 2071 13 2 v 18 w(l)q(eng)q(th)p Fr(\()14
b Fj(N)5 b(ew)q(T)1145 2077 y Fc(i)1173 2071 y Fj(;)i(D)q Fr(\))401
2121 y(6)42 b Fj(min)26 b Fi( )h Fr(the)14 b(index)g(of)g(the)g(minim)n(um)c
Fi(f)p Fj(L)1171 2127 y Fh(1)1189 2121 y Fj(;)21 b(L)1250 2127
y Fh(2)1268 2121 y Fj(;)g(:)7 b(:)g(:)19 b(L)1398 2127 y Fc(n)1421
2121 y Fi(g)401 2171 y Fr(7)42 b(If)13 b Fj(messag)q(e)p 662
2171 V 17 w(l)q(eng)q(th)p Fr(\()p Fj(T)s(;)22 b(D)q Fr(\))k
Fj(<)g(L)1034 2177 y Fc(min)1112 2171 y Fr(then)401 2220 y(8)166
b(Return\(T\))401 2270 y(9)42 b Fj(T)31 b Fi( )25 b Fj(N)5
b(ew)q(T)698 2276 y Fc(min)401 2320 y Fr(10)21 b(Goto)13 b(Step)h(2)p
1644 2439 2 841 v 304 2441 1342 2 v 575 2556 a(Figure)g(7:)k(An)c(MML)g(Hill)
f(Clim)o(bing)d(algorithm)62 2651 y(The)15 b(algorithm)c(presen)o(ted)16
b(in)d(Figure)h(7)g(requires)h(us)f(to)g(de\014ne)h(t)o(w)o(o)e(pro)q
(cedures:)62 2723 y Fi(\017)21 b Fj(modif)t(y)q Fr(\()p Fj(T)6
b Fr(\))16 b(constructs)g(a)e(list)f(of)g(mo)q(di\014cations)f(to)i
Fj(T)6 b Fr(.)62 2801 y Fi(\017)21 b Fj(messag)q(e)p 261 2801
13 2 v 17 w(l)q(eng)q(th)p Fr(\()p Fj(T)s(;)h(D)q Fr(\))14
b(returns)i(the)e(length)g(of)f(the)i(message)e(when)i Fj(T)20
b Fr(is)13 b(used)i(to)f(explain)f Fj(D)q Fr(.)965 2936 y(6)p
eop
%%Page: 7 7
bop 0 77 a Fa(2.2.2)64 b(The)15 b(message)p 431 77 15 2 v 17
w(length)e(pro)q(cedure)0 161 y Fr(In)f(this)f(pap)q(er,)i(w)o(e)e(will)f
(assume)i(the)g(existence)h(of)e(message)p 967 161 13 2 v 15
w(length)g(pro)q(cedures)j(for)e(the)g(theories)g(under)h(consideration)0
211 y(\(decision)g(trees)i(and)d(decision)h(graphs\).)18 b(Pro)q(cedures)e
(for)c(enco)q(ding)h(decision)h(trees)g(ha)o(v)o(e)f(b)q(een)h(describ)q(ed)g
(in)f([W)m(allace)0 261 y(and)e(P)o(atric)o(k])g([24)o(])g(and)g([Quinlan)f
(and)h(Riv)o(est])g([20)o(].)16 b(A)c(pro)q(cedure)h(for)e(enco)q(ding)g
(decision)h(graphs)f(has)h(b)q(een)g(describ)q(ed)0 311 y(in)h([Oliv)o(er)h
(and)f(W)m(allace])f([16)o(].)0 441 y Fa(2.2.3)64 b(Lo)q(ok)m(ahead)0
525 y Fr(The)13 b(hill)e(clim)o(bing)e(algorithm)h(prop)q(osed)j(in)f(Figure)
h(7)f(only)f(considers)j(one)e(step)i(mo)q(di\014cations.)h(Th)o(us,)e(the)g
(algorithm)0 575 y(ma)o(y)c(get)i(stuc)o(k)g(in)f(a)h(lo)q(cal)f(minim)n(um)o
(,)d(and)k(not)g(\014nd)f(the)i(global)d(minim)n(um)o(.)14
b(T)m(o)9 b(o)o(v)o(ercome)h(this,)h(the)h(mo)q(dify)c(pro)q(cedure)0
625 y(ma)o(y)13 b(b)q(e)j(designed)g(with)e(an)h(additional)f(lo)q(ok)n
(ahead)g(parameter)g(that)h(sp)q(eci\014es)i(n)o(um)o(b)q(er)e(of)f(base)i
(lev)o(el)f(mo)q(di\014cations)0 675 y(w)o(e)f(are)g(willing)e(to)i(consider)
h(at)e(an)o(y)h(one)g(stage.)0 834 y Fl(3)69 b(Constructing)23
b(Decision)d(Graphs)0 933 y Fr(In)10 b(this)f(Section,)h(w)o(e)g(will)e
(presen)o(t)j(an)f(algorithm)c(for)k(inferring)f(decision)g(trees)i(using)f
(the)g(MMLP)g(prop)q(osed)g(b)o(y)f([Quinlan)0 983 y(and)j(Riv)o(est][20)n
(].)17 b(W)m(e)11 b(will)f(examine)h(wh)o(y)g(this)h(algorithm)d(is)j
(inappropriate)g(for)f(the)h(construction)h(of)e(decision)h(graphs.)0
1032 y(In)f(Section)h(3.2)e(w)o(e)i(will)d(examine)h(di\013erences)k(b)q(et)o
(w)o(een)e(the)g(inference)h(of)d(decision)i(trees)h(and)e(the)h(inference)g
(of)f(decision)0 1082 y(graphs.)18 b(W)m(e)12 b(go)h(on)f(in)g(Section)i(3.3)
d(to)i(adapt)g(the)g(Hill)e(Clim)o(bing)f(Algorithm)h(giv)o(en)h(in)g(Figure)
h(7)g(to)f(design)h(a)g(decision)0 1132 y(graph)h(inference)h(algorithm.)0
1270 y Fk(3.1)56 b(An)19 b(Ov)n(erview)e(of)i(a)g(MMLP)g(Decision)e(T)-5
b(ree)18 b(Generation)g(Algorithm)0 1355 y Fr([Quinlan)e(and)i(Riv)o(est])f
([20)o(])g(prop)q(osed)i(an)e(algorithm)e(for)j(the)g(generation)g(of)f
(decision)h(trees)h(that)f(consists)g(of)f(t)o(w)o(o)0 1405
y(phases,)d(a)28 b Fp(Gr)n(owing)14 b(Phase)h Fr(and)e(a)28
b Fp(Pruning)15 b(Phase)p Fr(.)62 1459 y(The)j(Gro)o(wing)e(Phase)j(b)q
(egins)f(with)f(the)h(ro)q(ot)g(of)f(the)h(decision)f(tree)i(b)q(eing)f(a)f
(leaf)g(with)g(all)f(of)h(the)h(training)f(set)0 1508 y(asso)q(ciated)e(with)
e(it.)18 b(It)c(extends)h(the)g(decision)f(tree)h(b)o(y)e(iterativ)o(ely)h(p)
q(erforming)e(the)j(follo)o(wing)c(pro)q(cedure:)51 1604 y(1.)20
b(Let)14 b Fj(L)g Fr(b)q(e)h(a)e(leaf)h(suc)o(h)g(that)g(it)g(is)f(p)q
(ossible)i(to)e(replace)i Fj(L)f Fr(with)g(a)f(decision)h(no)q(de.)51
1704 y(2.)20 b(F)m(or)14 b(eac)o(h)i(attribute)f Fj(A)g Fr(that)g(migh)o(t)e
(b)q(e)j(sp)q(eci\014ed)g(in)f(the)h(decision)f(no)q(de)g(to)g(replace)h
Fj(L)p Fr(,)f(compute)f(the)i(comm)o(u-)104 1754 y(nication)d(cost)h(if)g
(this)f(c)o(hange)i(is)e(made.)51 1853 y(3.)20 b(Replace)14
b Fj(L)g Fr(with)g(the)g(decision)g(no)q(de)g(of)g(minim)n(um)9
b(comm)o(unication)i(cost.)62 1949 y(The)16 b(Pruning)f(Phase)h(consists)g
(of)e(rep)q(eatedly)i(replacing)f(decision)g(no)q(des)h(\(all)e(of)h(whose)g
(c)o(hildren)g(are)h(lea)o(v)o(es\))f(b)o(y)0 1999 y(lea)o(v)o(es,)f(whenev)o
(er)h(this)f(impro)o(v)o(es)e(the)j(total)e(comm)o(unicatio)o(n)e(cost.)0
2137 y Fk(3.2)56 b(Requirem)o(en)n(ts)16 b(of)j(a)g(Decision)e(Graph)j
(Inference)d(Sc)n(heme)0 2221 y Fr(There)e(are)f(t)o(w)o(o)g(considerations)g
(that)g(mak)o(e)f(the)i(approac)o(h)e(used)i(b)o(y)f([Quinlan)f(and)h(Riv)o
(est)f(1989])g(unsuitable)h(for)f(the)0 2271 y(construction)i(of)e(decision)h
(graphs.)62 2367 y Fi(\017)21 b Fr(Firstly)m(,)12 b(for)g(a)h(giv)o(en)f
(leaf,)g Fj(L)p Fr(,)h(it)f(is)h(no)o(w)f(necessary)j(to)e(decide)h(whether)g
(to)e(\(a\))h(replace)h Fj(L)f Fr(with)f(a)h(decision)g(no)q(de,)104
2417 y(or)h(to)f(\(b\))i(in)o(tro)q(duce)f(a)g(Join)f(for)h
Fj(L)p Fr(.)62 2516 y Fi(\017)21 b Fr(Secondly)m(,)13 b(it)g(do)q(es)h(not)f
(attempt)g(to)g(pro)o(vide)h(the)g(order)g(in)f(whic)o(h)g(a)h(decision)f
(tree)i(should)e(b)q(e)h(gro)o(wn,)f(since)h(the)104 2566 y(order)f(in)f
(whic)o(h)h(w)o(e)g(gro)o(w)f(a)g(decision)h(tree)h(is)e(immaterial.)i(Ho)o
(w)o(ev)o(er,)f(the)g(order)h(in)e(whic)o(h)g(lea)o(v)o(es)h(are)g(expanded)
104 2616 y(when)h(gro)o(wing)f(a)h(decision)g(graph)f(a\013ects)j(the)e
(resultan)o(t)g(graph.)62 2711 y(W)m(e)e(prop)q(ose)h(the)f(follo)o(wing)e
(algorithm)f(to)j(dev)o(elop)g(decision)g(graphs)g(whic)o(h)g(addresses)j
(the)d(ab)q(o)o(v)o(e)g(considerations.)0 2761 y(It)j(uses)h(the)f(MMLP)g(to)
f(\(a\))h(determine)g(for)f(eac)o(h)h(leaf)f(whether)i(to)f(Split)f(that)h
(leaf,)e(or)i(to)f(in)o(tro)q(duce)i(a)e(Join)h(for)f(that)0
2811 y(leaf,)f(and)h(\(b\))g(c)o(ho)q(ose)g(whic)o(h)g(leaf)f(should)h(b)q(e)
h(expanded)f(\(whether)i(with)d(a)h(Split)f(or)h(a)f(Join\).)965
2936 y(7)p eop
%%Page: 8 8
bop 0 77 a Fk(3.3)56 b(A)19 b(Decision)e(Graph)i(Generation)f(Algorithm)0
158 y Fr(W)m(e)h(b)q(egin)h(with)f(the)h(ro)q(ot)g(of)f(the)h(graph)g(b)q
(eing)f(a)h(leaf.)34 b(W)m(e)19 b(extend)i(the)f(graph)g(b)o(y)f(iterativ)o
(ely)g(p)q(erforming)f(the)0 208 y(pro)q(cedure)e(Gro)o(w)d(Graph)h(un)o(til)
f(the)h(graph)g(is)g(p)q(erfect)h(or)f(cannot)g(b)q(e)g(gro)o(wn)g(an)o(y)f
(further.)p 197 275 1556 2 v 197 976 2 702 v 843 358 a Fa(Gro)o(w)i(Graph)276
449 y Fr(1.)20 b(F)m(or)9 b(eac)o(h)h(leaf,)g Fj(L)p Fr(,)g(determine)g(the)g
(attribute)g Fj(A)g Fr(whic)o(h)g(it)f(should)h(b)q(e)g(split)g(on.)16
b(Record,)329 499 y(but)i(do)g(not)g(p)q(erform,)f(the)i(alteration)e
(\(Split)h Fj(L)g Fr(on)g Fj(A)p Fr(\))g(along)f(with)g(its)h(sa)o(ving)f(in)
329 549 y(message)p 477 549 13 2 v 14 w(length.)276 632 y(2.)j(F)m(or)d(eac)o
(h)i(pair)e(of)h(lea)o(v)o(es,)g Fj(L)809 638 y Fh(1)846 632
y Fr(and)g Fj(L)959 638 y Fh(2)978 632 y Fr(,)g(p)q(erform)f(a)h(ten)o(tativ)
o(e)g(Join.)30 b(Record,)19 b(but)329 681 y(do)h(not)g(p)q(erform,)h(the)g
(alteration)e(\(Join)i Fj(L)1065 687 y Fh(1)1104 681 y Fr(and)f
Fj(L)1219 687 y Fh(2)1238 681 y Fr(\))g(along)f(with)i(its)f(sa)o(ving)f(in)
329 731 y(message)p 477 731 V 14 w(length.)276 814 y(3.)h(Cho)q(ose)g(the)g
(alteration)f(\(whether)i(from)d(step)j(1)e(|)g(a)g(Split,)h(or)g(from)e
(step)i(2)f(|)329 864 y(a)e(Join\))h(that)f(has)h(the)g(greatest)h(sa)o
(ving.)29 b(If)17 b(this)g(alteration)g(creates)j(a)d(sa)o(vings)g(in)329
914 y(message)p 477 914 V 14 w(length,)d(then)g(p)q(erform)f(that)h
(alteration)g(to)f(the)i(graph.)p 1751 976 2 702 v 197 978
1556 2 v 0 1087 a Fk(3.4)56 b(Hurdling)0 1168 y Fr(W)m(e)12
b(note)h(that)f(pro)q(cedure)i(Gro)o(w)e(Graph)g(do)q(es)h(no)25
b Fp(hur)n(d)r(ling)h Fr(op)q(erations,)12 b(i.e.,)f(p)q(erforming)g
(alterations)h(that)h(increase)0 1217 y(the)j(message)p 221
1217 13 2 v 15 w(length.)23 b(W)m(e)15 b(stipulate)h(this)g(so)f(the)i(pro)q
(cess)g(will)d(terminate.)23 b(If)15 b(Gro)o(w)g(Graph)g(p)q(erformed)h(a)f
(h)o(urdling)0 1267 y(op)q(eration)f(that)h(split)f(a)h(no)q(de,)f
Fj(N)5 b Fr(,)14 b(in)o(to)g Fj(N)700 1273 y Fh(1)734 1267
y Fr(and)g Fj(N)848 1273 y Fh(2)882 1267 y Fr(then)h(the)g(next)g(iteration)f
(of)g(Gro)o(w)g(Graph)h(w)o(ould)e(Join)i Fj(N)1850 1273 y
Fh(1)1883 1267 y Fr(and)0 1317 y Fj(N)33 1323 y Fh(2)66 1317
y Fr(bac)o(k)f(in)o(to)f Fj(N)19 b Fr(\(since)14 b(joining)f(them)g(bac)o(k)h
(together)g(w)o(ould)f(sa)o(v)o(e)i(message)p 1279 1317 V 14
w(length\).)0 1467 y Fl(4)69 b(T)-6 b(est)22 b(Results)p 384
1566 1182 2 v 383 1616 2 50 v 630 1616 V 656 1601 a Fr(Decision)p
832 1616 V 50 w(W)m(allace)12 b(and)p 1103 1616 V 50 w(Quinlan)h(and)p
1379 1616 V 94 w(C4)p 1565 1616 V 383 1666 V 409 1651 a(Data)g(Set)p
630 1666 V 123 w(Graph)p 832 1666 V 71 w(P)o(atric)o(k)p 1103
1666 V 162 w(Riv)o(est)p 1379 1666 V 1565 1666 V 384 1667 1182
2 v 383 1717 2 50 v 409 1702 a(Hyp)q(o)p 630 1717 V 186 w(0.6\045)p
832 1717 V 182 w(0.6\045)p 1103 1717 V 187 w(0.6\045)p 1379
1717 V 90 w(0.55\045)p 1565 1717 V 383 1767 V 409 1752 a(Discordan)o(t)p
630 1767 V 87 w(1.1\045)p 832 1767 V 182 w(1.1\045)p 1103 1767
V 187 w(1.9\045)p 1379 1767 V 90 w(1.25\045)p 1565 1767 V 383
1817 V 409 1802 a(LED)p 630 1817 V 177 w(26.5\045)p 832 1817
V 161 w(26.5\045)p 1103 1817 V 166 w(26.9\045)p 1379 1817 V
76 w(28.1)f(\045)p 1565 1817 V 383 1866 V 409 1852 a(Endgame)p
630 1866 V 93 w(15.2\045)p 832 1866 V 161 w(15.2\045)p 1103
1866 V 166 w(17.9\045)p 1379 1866 V 76 w(13.6)g(\045)p 1565
1866 V 383 1916 V 409 1901 a(xd6)p 630 1916 V 197 w(10.0\045)p
832 1916 V 161 w(15.0\045)p 1103 1916 V 166 w(20.5\045)p 1379
1916 V 76 w(14.9)g(\045)p 1565 1916 V 384 1918 1182 2 v 335
1992 a(T)m(able)h(1:)18 b(The)c(error)h(rates)g(of)e(a)g(v)n(ariet)o(y)h(of)f
(metho)q(ds)g(on)h(standard)g(data)g(sets)0 2105 y(In)g(order)g(to)f(test)i
(the)f(feasibilit)o(y)e(of)h(using)h(the)g(Minim)o(um)c(Message)k(Length)g
(Principle)g(to)g(generate)g(decision)g(graphs,)0 2155 y(w)o(e)i(implemen)o
(ted)e(it)i(and)g(compared)g(its)g(results)h(with)f(the)h(results)g(pro)q
(duced)h(b)o(y)e(decision)g(tree)h(inference)h(sc)o(hemes.)0
2204 y(W)m(e)c(compared)g(it)h(with)f(C4)h(with)f(P)o(essimistic)g(Pruning)h
([19)o(],)f(and)g(with)h(t)o(w)o(o)f(tree)i(generation)f(sc)o(hemes)g(that)g
(use)g(the)0 2254 y(Minim)o(um)7 b(Message)13 b(Length)f(Principle,)f(one)g
(b)o(y)h([Quinlan)e(and)h(Riv)o(est])f([20)o(])h(and)g(the)h(other)g(b)o(y)f
([W)m(allace)e(and)i(P)o(atric)o(k])0 2304 y([24)o(].)62 2356
y(Results)18 b(are)f(giv)o(en)f(for)h(\014v)o(e)g(data)f(sets)i(\\Hyp)q(o",)f
(\\Discordan)o(t",)g(\\LED",)e(\\Endgame")g(and)i(\\xd6")f(in)h(T)m(able)f
(1.)0 2406 y(These)f(data)f(sets)h(are)f(describ)q(ed)i(in)d([Quinlan])f
([19].)0 2535 y Fk(4.1)56 b(Learning)18 b(Disjunctiv)n(e)f(Concepts)62
2615 y Fr(When)c(w)o(e)f(tested)i(our)f(algorithm)d(up)q(on)i(the)h(\\xd6")f
(data)g(set)h(w)o(e)g(found)f(the)h(Join)f(op)q(erator)h(w)o(as)f(used)h
(extensiv)o(ely)m(.)0 2665 y(In)i(fact,)g(the)h(\\xd6")e(data)h(set)h(is)f
(an)g(arti\014cial)f(set)i(with)f(10)f(attributes)i(that)f(w)o(as)g
(generated)i(so)e(that)g(a)g(division)f(in)o(to)0 2715 y(categories)h
(according)f(to)f(the)i(Bo)q(olean)f(function)f(of)g(attributes)i(1)f(to)g
(9:)553 2811 y Fj(a)575 2817 y Fh(1)602 2811 y Fi(^)9 b Fj(a)661
2817 y Fh(2)689 2811 y Fi(^)g Fj(a)748 2817 y Fh(3)803 2811
y Fi(_)37 b Fj(a)890 2817 y Fh(4)918 2811 y Fi(^)9 b Fj(a)977
2817 y Fh(5)1005 2811 y Fi(^)f Fj(a)1063 2817 y Fh(6)1119 2811
y Fi(_)36 b Fj(a)1205 2817 y Fh(7)1233 2811 y Fi(^)9 b Fj(a)1292
2817 y Fh(8)1320 2811 y Fi(^)g Fj(a)1379 2817 y Fh(9)965 2936
y Fr(8)p eop
%%Page: 9 9
bop 577 1409 a @beginspecial 143 @llx 251 @lly 452 @urx 775
@ury 1944 @rwi @setspecial
%%BeginDocument: xd6.ps
/MAV 300 dict def
MAV begin 
/useClip true def 
/top    0 def 
/left   1 def 
/bottom 2 def 
/right  3 def 
/CM     6 array def 
/CTM    6 array def 
/CTMR   6 array def 
/MTC    6 array def 
/blimit 1500 def 
/bcnt   0 def 
/rbox 8 array def 
/segbox 8 array def 
/bbox1 4 array def 
/c1 3 array def 
/c2 3 array def 
/d 3 array def    
/delta 3 array def 
/mycurrentrgbcolor 3 array def 
/ulx 0 def 
/uly 1 def 
/llx 2 def 
/lly 3 def 
/urx 4 def 
/ury 5 def 
/lrx 6 def 
/lry 7 def 
/sp [0 0] def 
/ep [0 0] def 
/bbox 4 array def 
/pbox 4 array def 
/scrnProc currentscreen 3 1 roll pop pop def
/currentcolorscreen where {
begin
currentcolorscreen
end
3 1 roll pop pop 
4 2 roll pop pop 
5 -2 roll pop pop 
6 -2 roll pop pop 
/kProc exch def 
/bProc exch def 
/gProc exch def 
/rProc exch def 
} if 
/Max {2 copy gt {pop}{exch pop} ifelse} bind def
/Min {2 copy lt {pop}{exch pop} ifelse} bind def
/cellPenW 72.0 /currentcolorscreen where
{begin currentcolorscreen end pop pop
10 1 roll pop pop 8 1 roll pop pop
 6 1 roll pop pop Max Max Max }
{currentscreen pop pop} ifelse div 2.0 div def
/rect { 
 /saveobj save def 
 R PC PF LC SS 
 saveobj restore 
} bind def 
/R { 
 newpath
 pbox astore pop
 0 792 translate 1 -1 scale CTMR currentmatrix pop exch translate
 /objectCord mstore def
 pbox right get 2 div
 dup pbox left get exch sub
 pbox left 3 -1 roll put 
 dup pbox right 3 -1 roll put
 pbox bottom get 2 div 
 dup pbox top get exch sub
 pbox top 3 -1 roll put
 dup pbox bottom 3 -1 roll put
 translate 
 CTM currentmatrix pop
 57.3 mul rotate
 RT
} bind def
 /SaveScreenBW {
 currentscreen
 /scrnProc exch def
 /scrnAngle exch def
 /scrnFreq exch def
 } bind def
 /RestoreScreenBW {
 scrnFreq scrnAngle MAV /scrnProc get setscreen
 } bind def
 /SetFreqAngleBW {
 currentscreen
 3 1 roll
 pop pop
 setscreen
 } bind def
 /SaveScreenColor {
 currentcolorscreen
 /grayProc exch def
 /grayAngle exch def
 /grayFreq exch def
 /bProc exch def
 /bAngle exch def
 /bFreq exch def
 /gProc exch def
 /gAngle exch def
 /gFreq exch def
 /rProc exch def
 /rAngle exch def
 /rFreq exch def
 } bind def
 /RestoreColorScreen {
 rFreq rAngle MAV /rProc get gFreq gAngle MAV /gProc get bFreq bAngle MAV /bProc get grayFreq grayAngle MAV /grayProc get setcolorscreen
 } bind def
 /SetFreqAngleColor { 
 currentcolorscreen 
 3 1 roll pop pop
 4 2 roll pop pop
 5 -2 roll pop pop
 6 -2 roll pop pop
 4 1 roll 
 6 1 roll 
 8 1 roll 
 10 1 roll 
 setcolorscreen 
 } bind def 
/initmsaverestore { 
userdict begin 
/mdict 10 dict def 
mdict begin 
/mindex -1 def 
/mstacksize 25 def 
/mstack mstacksize array def 
/incmindex { 
/mindex mindex 1 add def 
} bind def 
/decmindex { 
/mindex mindex 1 sub def 
} bind def 
/checkmindex { 
mindex 0 lt { 
(%ERROR: msave/mrestore stack underflow: Offending command 'mrestore'
) print flush 
stop 
} 
{ 
mindex mstacksize ge { 
(%ERROR: msave/mrestore stack overflow: Offending command 'msave'
) print flush 
stop 
} if 
} ifelse 
} bind def 
/mpush { 
incmindex 
checkmindex 
mstack mindex 
3 -1 roll put 
} bind def 
/mpop { 
checkmindex 
mstack mindex get 
decmindex 
} bind def 
end 
end 
} bind def 
/msave { 
mdict begin 
matrix currentmatrix mpush 
end 
} bind def 
/mrestore { 
mdict begin 
mpop setmatrix 
end 
} bind def 
/msavelevel { 
mdict begin 
mindex 1 add 
end 
} bind def 
/mstore {
matrix currentmatrix
} bind def
/AutoSizeY {
0 0 pl
dup 3 1 roll
4 -1 roll  
add
pl exch pop
exch sub
} bind def
/pl {  
transform
0.25 sub round 0.25 add exch
0.25 sub round 0.25 add exch
itransform
} bind def
/pll {
transform
round exch
round exch
itransform
} bind def
/pr { 
dtransform
round exch
round exch
idtransform
} bind def
/m { 
pl  moveto
} bind def
/l { 
pl lineto
} bind def
/c { 
pl curveto
} bind def
/rm { 
pr rmoveto
} bind def
/rl { 
pr rlineto
} bind def
/ar { 
5 -2 roll pl
5 2 roll
arc
} bind def
/an { 
5 -2 roll pl
5 2 roll
arcn
} bind def
/MakePatternFont {
/FontDict 20 dict def
FontDict begin
/FontName exch def
/Encoding exch def
/FontMatrix [1 0 0 1 0 0 ] def
/FontType 3 def
/FontBBox [ 0 0 1 1 ] def
/PatternDict exch def
/RenderPattern {
patternDict exch get
exec
} bind def
/BuildChar {
exch begin
1 0 0 0 1 1 setcachedevice
Encoding exch get RenderPattern
end
} bind def
FontName FontDict definefont pop
end
} bind def
/SnapToPattenGrid
	{
	exch
	dup 0 lt {
		1 index sub
	} if
	1 index
	div truncate
	mul
} bind def
/FillPatternString {
dup length
1 sub
0 1 3 -1 roll {
2 index
2 index
3 -2 roll
put
} for
pop pop
} bind def
/AutoSizeY {
	0.0 exch dtransform
	round
	idtransform exch pop
} bind def
 /AutoSizeX {
	0.0 dtransform
	exch
	round
	exch
	idtransform pop
} bind def 
/AutoCellSize {
	AutoSizeY
	exch
	AutoSizeX
	exch
} bind def
/CheckPath {
	false
	{ pop pop pop true exit}
	{ pop pop pop true exit}
	{ pop pop pop pop pop pop pop true exit}
	{ pop true exit}
	pathforall
} bind def
/PatternFill {					%		patternCharacter
	/patternString 1 string def
	/cm mstore def
	patternMatrix setmatrix
	1 1 AutoCellSize
	dup 0 eq { pop 1} if
	exch
	dup 0 eq { pop 1} if
	exch
	/patternSize exch 24.0 mul def
	/PatternSizeX exch 24.0 mul patternString length mul def
	/flaterror 0 def
	patternString FillPatternString
	gsave
		flaterror 1 add setflat
		flattenpath
		pathbbox
	grestore
	psy add flaterror add psy SnapToPattenGrid
	exch psx add flaterror add psx SnapToPattenGrid
	3 -1 roll flaterror sub psy SnapToPattenGrid
	4 -1 roll flaterror sub psx SnapToPattenGrid
	4 2 roll pll
	4 2 roll pll
	/llxsnap exch def
	/llysnap exch def
	/urxsnap exch def
	/urysnap exch def
	gsave
		useClip true eq {clip}{eoclip} ifelse newpath
		/PatternFont findfont [psx 0.0 0.0 psy 0.0 0.0] makefont setfont
		llysnap patternSize urysnap {
			llxsnap exch moveto
			llxsnap PatternSizeX urxsnap {
				pop
				patternString show
				%currentpoint am
			} for
		} bind for
	grestore
	cm setmatrix
} bind def				%		End 'PatternFill'
/DefaultPatternFont {
	/cm mstore def
	patternMatrix setmatrix
	1 1 AutoCellSize
	dup 0 eq { pop 1} if
	exch
	dup 0 eq { pop 1} if
	exch
	/psy exch iSizeY mul def
	/psx exch iSizeX mul def
	/patternDict 64 dict def
	patternDict begin
		/NotDef {} def
		/LiteDiagLines {
			iSizeX iSizeY false [iSizeX 0.0 0.0 iSizeY -1.0 mul  0.0 iSizeY]
			{pat}
			imagemask
		} bind def
	end
	/CustEncoding 256 array def
	0 255 1 {
		CustEncoding exch /NotDef put
	} bind for
	CustEncoding 65 /LiteDiagLines put
	patternDict CustEncoding /PatternFont MakePatternFont
	/pathSegProc {
		strokepath
		CheckPath {
			65 PatternFill newpath
		} if
	} bind def
	cm setmatrix
} bind def
/XRound {
	dup
	3 -1 roll
	exch mul round
	exch div
} bind def
/RoundMatrix {
	/i 0 def
	dup {
		100000.0 XRound
		1 index
		exch i exch put
		/i i 1 add def
	} forall
} bind def
/GetBoxesRatio {
3 -1 roll sub
7 1 roll
exch sub
6 1 roll
3 -1 roll sub
5 1 roll
exch sub
4 1 roll
3 -1 roll div
3 1 roll
exch div
exch
} bind def
/T {792 exch sub} bind def
/sx 0 def
/sy 0 def
/ex 0 def
/ey 0 def
/lw  0 def
/siz 0 def
/U {gsave 0 setlinecap
/lw siz 0.078125 mul def  /ey exch neg def /ex exch def /sy exch neg def /sx exch def
fontkind plain eq 
 {
  lw siz 0.0119444 mul sub setlinewidth sx sy moveto ex ey lineto stroke
 }
 {
   currentdict /outlineFontSize known outlineFontSize 0 gt and
     {
       fontkind outline eq
         {
           /sy sy 0.0119444 siz mul sub def
           /ey ey 0.0119444 siz mul sub def
           gsave 
           1 1 1 setrgbcolor lw siz 0.0119444 mul sub setlinewidth sx sy moveto ex ey lineto stroke
           grestore
           lw siz 0.0119444 mul sub setlinewidth sx sy moveto ex ey lineto
           strokepath 0.0119444 siz mul setlinewidth stroke
         } if
       fontkind shadow eq fontkind outlineshadow eq or
         {
           /sy sy 0.0358332 siz mul sub def
           /ey ey 0.0358332 siz mul sub def
           lw setlinewidth
           lw 2 div sx add sy
           lw 2 div sub moveto
           lw 2 div ex add ey
           lw 2 div sub lineto stroke 
           gsave
           1 1 1 setrgbcolor lw siz 0.0119444 mul sub setlinewidth sx sy moveto ex ey lineto stroke
           grestore
           lw siz 0.0119444 mul sub setlinewidth sx sy moveto ex ey lineto
           strokepath 0.0119444 siz mul setlinewidth stroke
         } if
      } if
 } ifelse
grestore} bind def
/plain 1 def
/outline 2 def
/shadow 3 def
/outlineshadow 4 def
/fess {
	currentdict /outlineFontSize known {
		/outlineFontSize 2 index def
	} if
	findfont exch dup /siz exch def scalefont setfont
} bind def
/SHDW {gsave siz oldfontname fess siz 0.055 mul x add y siz 0.05 mul sub moveto c show grestore} def
/NRML {gsave 1 1 1 setrgbcolor siz oldfontname fess x y moveto c show grestore siz /Outline fess  x y moveto c show} def
/S {
fontkind plain eq {neg moveto show} if
fontkind outline eq {neg /y exch def /x exch def /c exch def NRML} if
fontkind shadow eq {neg /y exch def /x exch def /c exch def SHDW NRML} if
fontkind outlineshadow eq {neg /y exch def /x exch def /c exch def SHDW NRML} if
} bind def
/F {
/fontkind exch def
fontkind plain eq {fess} if
fontkind outline eq {dup /oldfontname exch def exch dup /siz exch def exch OLF} if
fontkind shadow eq {dup /oldfontname exch def exch dup /siz exch def exch OLF} if
fontkind outlineshadow eq {dup /oldfontname exch def exch dup /siz exch def exch OLF} if
} bind def
/makeoutlinedict 15 dict def
/makeoutlinefont
 {
  makeoutlinedict begin
   /uniqueid exch def
   /strokewidth exch def
   /newfontname exch def
   /basefontname exch def
   FontDirectory basefontname known not {
    /basefontname /Times-Roman def
   } if
   /basefontdict basefontname findfont def
   /numentries basefontdict maxlength 1 add def
   basefontdict /UniqueID known not
   {/numentries numentries 1 add def} if
   /outfontdict numentries dict def
   basefontdict
   {
     exch dup /FID ne {exch outfontdict 3 1 roll put} {pop pop} ifelse
	  }forall
   outfontdict /FontName newfontname put
   outfontdict /PaintType 2 put
   outfontdict /StrokeWidth strokewidth put
   outfontdict /UniqueID uniqueid put
   newfontname outfontdict definefont pop
  end
  }def
/UID {
 findfont dup /UniqueID known
  {/UniqueID get 1 add}
  {pop 1}
  ifelse
} def
/OLF {
dup
/Outline
1000 62 div
4 -1 roll
UID
/outlineFontSize 5 index def
makeoutlinefont
/Outline findfont exch scalefont setfont
} def
/CopyEncoding {
findfont
/Encoding get
dup length array
/tarrayz exch def
tarrayz 0
3 -1 roll
putinterval
tarrayz
} bind def
/Re-encode {
dup length array copy
/eap 0 def
exch {
dup type /integertype eq {
/eap exch def
} {
1 index
exch
eap exch
put
/eap eap 1 add def
} ifelse
} forall
} bind def
/EncodeFont	{
findfont dup
length dict
begin
{	1 index /FID ne
{ def }
{ pop pop } ifelse
} forall
/FontName exch def
/Encoding exch def
FontName currentdict
end
definefont pop
} bind def
/clip2pathbbox {
	/magicNum linewidth 2 div 1 2 sqrt div mul def
	pathbbox
	/urymn exch magicNum add def
	/urxmn exch magicNum add def
	/llymn exch magicNum sub def
	/llxmn exch magicNum sub def
	newpath llxmn llymn moveto llxmn urymn lineto urxmn urymn lineto urxmn llymn lineto
	closepath clip newpath
} bind def
/Line {
MAV /LC get length 0 ne
{
	gsave
			newpath
			MAV /ArrowType get length 0 eq
			MAV /SD get length 0 eq and
			{2 setlinecap /UseClip {clip2pathbbox} def }
			{0 setlinecap /UseClip {} def } ifelse
			0 792 translate
			1 -1 scale
			CTM currentmatrix pop
			/yStart exch def /xStart exch def /yEnd exch def /xEnd exch def /linewidth exch def
			MAV /ArrowType get length 0 eq xStart xEnd ne yStart yEnd ne and and
			{xStart yStart moveto xEnd yEnd lineto UseClip xStart yStart moveto xEnd yEnd lineto}
			{xStart yStart moveto xEnd yEnd lineto} ifelse
			linewidth setlinewidth SD strokepath
			CheckPath {LC PF ArrowType} if
	grestore
}
{pop pop pop pop pop} ifelse
} bind def
/ZeroLine {
	gsave
		newpath
		MAV /ArrowType get length 0 ne {
			/UseClip {} def
			0 792 translate
			1 -1 scale
			pop pop pop pop pop
			CTM currentmatrix pop
			ArrowType
		} if
	grestore
} bind def
/CompensateForStroke {
	sin currentlinewidth mul
	exch
	cos currentlinewidth mul
	dup 0 translate
	4 -1 roll exch 2.0 mul sub
	3 1 roll
	2.0 mul sub
} bind def
/arrowdict 10 dict def
arrowdict begin
	/SwallowTail {
		newpath
		0.0 0.0 moveto
		1.0 -.5 lineto
		.666 0.0 lineto
		1.0 .5 lineto
		closepath
	} bind def
	/Triangular {
		newpath
		0.0 0.0 moveto
		1.0 -.5 lineto
		1.0 .5 lineto
		closepath
	} bind def
	/OpenTri {
		newpath
		1.0 0.5 moveto
		0.0 0.0 lineto
		1.0 -0.5 lineto
	} bind def
	/ClosedTri {
		newpath
		1.0 0.5 moveto
		0.0 0.0 lineto
		1.0 -0.5 lineto
		closepath
	} bind def
	/SlashBar {
		newpath
		0.5 -.5 moveto
		-.5 0.5 lineto
	} bind def
	/Dot {
		newpath
		0.5 0.0 moveto
		0 0 1 0 360 arc
		closepath
	} bind def
	/ExtSlashBar {
		newpath
		1.0 -.5 moveto
		0.0 0.5 lineto
	} bind def
end
/ScaleArrowHead {
	0 0 4 -2 roll
	0 0 1 1
	8 -4 roll GetBoxesRatio
	scale
} bind def
/DrawArrowHead {
	gsave
	[] 0 setdash
	currentpoint translate rotate
	{
		4 copy
		gsave
			initmatrix
			100 200 translate
			msave
				ScaleArrowHead pop
				arrowdict exch get exec
			mrestore
			strokepath
			0 0 3 index 3 index
			pathbbox 8 4 roll
			GetBoxesRatio
			4 2 roll
		grestore
		3 index 1.0 exch sub
		6 -1 roll
		{
			2 index mul
			0 translate
		}{
			pop
		} ifelse
		msave
			ScaleArrowHead scale
			arrowdict exch get exec
		mrestore
		strokepath
	} {
		msave
		ScaleArrowHead
		arrowdict exch get exec
		mrestore
	} ifelse
		CheckPath {
			LC PF
		} if
	grestore
} bind def
/SR { 
 pbox left get pbox top get moveto 
 pbox right get pbox top get lineto 
 pbox right get pbox bottom get lineto 
 pbox left get pbox bottom get lineto 
 closepath
} bind def 
/E {
1.415 setmiterlimit
CM currentmatrix pop
pbox right get pbox left get sub abs dup
pbox bottom get pbox top get sub abs dup 3 -1 roll
lt {exch dup 3 -1 roll exch div 1 exch}
{dup 3 -1 roll exch div 1} ifelse scale 
0 0 3 -1 roll 2 div 0 360 arc closepath
CM setmatrix
} bind def
/StripFromFront { 
dup length
2 index sub
3 1 roll
exch 3 -1 roll
getinterval
} bind def
/MakePathArray { 
 /k 0 def 
 {/k k 1 add def pop pop}{/k k 1 add def pop pop}{/k k 1 add def pop pop pop pop pop pop}{/k k 1 add def }pathforall 
 k array
 /k 0 def 
 {{moveto} 3 array astore 1 index k 3 -1 roll put /k k 1 add def} 
 {{lineto} 3 array astore 1 index k 3 -1 roll put /k k 1 add def} 
 {{curveto} 7 array astore 1 index k 3 -1 roll put /k k 1 add def} 
 {{closepath} 1 array astore 1 index k 3 -1 roll put /k k 1 add def} 
pathforall 
}bind def 
/MakeFlatPathArray { 
/k 0 def 
{/k k 1 add def pop pop}{/k k 1 add def pop pop}{pop pop pop pop pop pop}{}pathforall 
k array
/k 0 def 
{{moveto} 3 array astore 1 index k 3 -1 roll put /k k 1 add def} 
{{lineto} 3 array astore 1 index k 3 -1 roll put /k k 1 add def} 
{ pop pop pop pop pop pop} 
{} 
pathforall 
}bind def 
/FractionalLine {
2 index sub
.00001 mul
exch
3 index sub
.00001 mul
4 -1 roll add
3 1 roll
add
} bind def
/calcLineLength {
 exch
 4 -1 roll
 sub
 dup mul
 3 1 roll exch
 sub
 dup mul
 add sqrt
} bind def
/InitTotalLineLength {
 /oldY exch def
 /oldX exch def
 theDash aload pop currentLineLength add setdash
} bind def
/AccumeLineLength {
 3 copy pop
 2 copy
 oldX oldY
 4 2 roll calcLineLength
 /segmentLength exch def
 /currentLineLength currentLineLength segmentLength add def
 /oldY exch def
 /oldX exch def
} bind def
/DecumeLastLineLength {
 /currentLineLength currentLineLength segmentLength sub def
} bind def
/DrawFlattendSegment {
 /pointCount 2 def
 dup 0 lt { pop 0 } if
 fpc
 3 1 roll
 2 index
 1 index
 gt {
 2 copy get
 dup length
 dup 3 eq {
 pop
 dup 0 get
 exch 1 get
 2 copy InitTotalLineLength  
 m
 } {
 } ifelse
 } {
 pop 1 index
 } ifelse
 dup 1 add
 3 index
 exch sub
 dup 10 gt { pop 10} if
 {
 1 add
 2 copy
 get aload pop
 AccumeLineLength
 exec
 } repeat
 3 1 roll pop pop
 DecumeLastLineLength
} bind def
/IncFPC {
 fpc add
 /fpc exch def
} bind def
/DrawFlatPathArray {
 fpc
 0 { 
 dup 2 index
 1 sub
 lt { 
 flatPathArray exch
 newpath
 1 sub DrawFlattendSegment
 gsave
 pathSegProc
 grestore
 newpath
 }
 {
 pop pop
 exit
 } ifelse
 } loop
} bind def
/RecordFirstSubSegment {
 closepathArray 0 pathArray 0 get
 put
 closepathArray 1
 pathArray 0 get aload pop pop
 pathArray 1 get dup length 3 eq {
 aload pop pop
 } {
 newpath
 0 0 moveto
 aload pop exec
 /segmentArray flattenpath MakeFlatPathArray def
 segmentArray 1 get aload pop pop
 } ifelse
 FractionalLine {lineto} 3 array astore
 put
} bind def
/AppendClosePath {
 closepathArray 0 get 2 {lineto} put
 flatPathArray fpc closepathArray 0 get put
 1 IncFPC
 flatPathArray fpc closepathArray 1 get put
 1 IncFPC
} bind def
/RecordCurrentDash {
 /theDash
 currentdash 2 array astore def
 /currentLineLength 0 def
} bind def
/PatternStroke {
	0 setlinecap
 RecordCurrentDash
 /saveFlat currentflat def
 .5 setflat
 /pathArray MakePathArray def
 /closepathArray 2 array def
 /pathLength pathArray length def
 /flatPathArray 513 array def
 /currentLineLength 0 def
 /fpc 0 def
 pathArray pathLength 1 sub get
 length 1 eq {
 /usingClosepath true def
 RecordFirstSubSegment
 /pathLength pathLength 1 sub def
 } {
 /usingClosepath false def
 } ifelse
 0 1 pathLength 1 sub {
 pathArray exch get
 dup length 3 eq {
 fpc 1 add 512 ge {
 DrawFlatPathArray
 fpc 2 ge {
 flatPathArray flatPathArray fpc 2 sub get 0 put
 flatPathArray flatPathArray fpc 1 sub get 1 put
 /fpc 2 def
 }{
 /fpc 0 def
 } ifelse
 } if
 flatPathArray exch fpc exch put
 1 IncFPC
 } {
 dup length 7 eq {
 newpath
 /nToStrip 0 def
 fpc 1 gt {
 flatPathArray fpc 2 sub get aload pop pop m
 flatPathArray fpc 1 sub get aload pop exec
 /nToStrip 2 def
 } {
 fpc 1 eq {
 flatPathArray fpc 1 sub get aload pop exec
 /nToStrip 2 def
 } if
 } ifelse
 aload pop exec
 /segmentArray flattenpath MakeFlatPathArray def
 /segmentArray nToStrip segmentArray StripFromFront def
 segmentArray length fpc add 512 lt {
 flatPathArray fpc segmentArray putinterval
 segmentArray length IncFPC
 } {
 DrawFlatPathArray
 fpc 1 gt {
 flatPathArray flatPathArray fpc 2 sub get 0 exch put
 flatPathArray flatPathArray fpc 1 sub get 1 exch put
 /fpc 2 def
 }{
 /fpc 0 def
 } ifelse
 segmentArray length 512 lt {
 flatPathArray fpc segmentArray putinterval
 segmentArray length IncFPC
 } {
 segmentArray length
 /exitLoop false def
 0 
 {
 2 copy sub
 dup 500 gt {
 pop 500
 } { 
 /exitLoop true def
 } ifelse 
 segmentArray 2 index 2 index getinterval
 flatPathArray fpc 3 -1 roll putinterval
 dup IncFPC
 add 
 exitLoop {
 exit 
 } {
 DrawFlatPathArray
 fpc 1 gt {
 flatPathArray flatPathArray fpc 2 sub get 0 exch put
 flatPathArray flatPathArray fpc 1 sub get 1 exch put
 /fpc 2 def
 }{
 /fpc 0 def
 } ifelse
 } ifelse
 } loop
 } ifelse
 } ifelse
 } if
 } ifelse
 } for
 fpc 0 gt {
 usingClosepath {
 AppendClosePath
 } if
 DrawFlatPathArray
 } if
 saveFlat setflat
} bind def


initmsaverestore
/tctm matrix currentmatrix def
tctm RoundMatrix setmatrix
/patternMatrix mstore def
10 setmiterlimit
2 setlinecap
newpath
/RT {E} def
/SD {} def
/SS {setlinewidth SD stroke} def
/LC { /setcmykcolor where
 {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse 
} def
/PC { /setcmykcolor where
 {begin 0.000 0.000 0.000 0.000 setcmykcolor end} {1.000 1.000 1.000 setrgbcolor} ifelse 
} def
/PF {gsave fill grestore} def
1.000 0 18.000 144.000 0.000 0.000 36.000 36.000 rect
/RT {E} def
/SD {} def
/SS {setlinewidth SD stroke} def
/LC { /setcmykcolor where
 {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse 
} def
/PC { /setcmykcolor where
 {begin 0.000 0.000 0.000 0.000 setcmykcolor end} {1.000 1.000 1.000 setrgbcolor} ifelse 
} def
/PF {gsave fill grestore} def
1.000 0 72.000 216.000 0.000 0.000 36.000 36.000 rect
/RT {E} def
/SD {} def
/SS {setlinewidth SD stroke} def
/LC { /setcmykcolor where
 {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse 
} def
/PC { /setcmykcolor where
 {begin 0.000 0.000 0.000 0.000 setcmykcolor end} {1.000 1.000 1.000 setrgbcolor} ifelse 
} def
/PF {gsave fill grestore} def
1.000 0 126.000 288.000 0.000 0.000 36.000 36.000 rect
/RT {E} def
/SD {} def
/SS {setlinewidth SD stroke} def
/LC { /setcmykcolor where
 {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse 
} def
/PC { /setcmykcolor where
 {begin 0.000 0.000 0.000 0.000 setcmykcolor end} {1.000 1.000 1.000 setrgbcolor} ifelse 
} def
/PF {gsave fill grestore} def
1.000 0 180.000 144.000 0.000 0.000 36.000 36.000 rect
/RT {E} def
/SD {} def
/SS {setlinewidth SD stroke} def
/LC { /setcmykcolor where
 {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse 
} def
/PC { /setcmykcolor where
 {begin 0.000 0.000 0.000 0.000 setcmykcolor end} {1.000 1.000 1.000 setrgbcolor} ifelse 
} def
/PF {gsave fill grestore} def
1.000 0 234.000 216.000 0.000 0.000 36.000 36.000 rect
/RT {E} def
/SD {} def
/SS {setlinewidth SD stroke} def
/LC { /setcmykcolor where
 {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse 
} def
/PC { /setcmykcolor where
 {begin 0.000 0.000 0.000 0.000 setcmykcolor end} {1.000 1.000 1.000 setrgbcolor} ifelse 
} def
/PF {gsave fill grestore} def
1.000 0 288.000 288.000 0.000 0.000 36.000 36.000 rect
/RT {E} def
/SD {} def
/SS {setlinewidth SD stroke} def
/LC { /setcmykcolor where
 {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse 
} def
/PC { /setcmykcolor where
 {begin 0.000 0.000 0.000 0.000 setcmykcolor end} {1.000 1.000 1.000 setrgbcolor} ifelse 
} def
/PF {gsave fill grestore} def
1.000 0 342.000 144.000 0.000 0.000 36.000 36.000 rect
/RT {E} def
/SD {} def
/SS {setlinewidth SD stroke} def
/LC { /setcmykcolor where
 {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse 
} def
/PC { /setcmykcolor where
 {begin 0.000 0.000 0.000 0.000 setcmykcolor end} {1.000 1.000 1.000 setrgbcolor} ifelse 
} def
/PF {gsave fill grestore} def
1.000 0 396.000 216.000 0.000 0.000 36.000 36.000 rect
/RT {E} def
/SD {} def
/SS {setlinewidth SD stroke} def
/LC { /setcmykcolor where
 {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse 
} def
/PC { /setcmykcolor where
 {begin 0.000 0.000 0.000 0.000 setcmykcolor end} {1.000 1.000 1.000 setrgbcolor} ifelse 
} def
/PF {gsave fill grestore} def
1.000 0 450.000 288.000 0.000 0.000 36.000 36.000 rect
save
[ 39/quotesingle 96/grave 128/Adieresis/Aring/Ccedilla/Eacute/Ntilde/Odieresis
/Udieresis/aacute/agrave/acircumflex/adieresis/atilde/aring/ccedilla/eacute
/egrave/ecircumflex/edieresis/iacute/igrave/icircumflex/idieresis/ntilde
/oacute/ograve/ocircumflex/odieresis/otilde/uacute/ugrave/ucircumflex
/udieresis/dagger/degree/cent/sterling/section/bullet/paragraph/germandbls
/registered/copyright/trademark/acute/dieresis/.notdef/AE/Oslash
/.notdef/plusminus/.notdef/.notdef/yen/mu/.notdef/.notdef
/.notdef/.notdef/.notdef/ordfeminine/ordmasculine/.notdef/ae/oslash
/questiondown/exclamdown/logicalnot/.notdef/florin/.notdef/.notdef
/guillemotleft/guillemotright/ellipsis/.notdef/Agrave/Atilde/Otilde/OE/oe
/endash/emdash/quotedblleft/quotedblright/quoteleft/quoteright/divide
/.notdef/ydieresis/Ydieresis/fraction/currency/guilsinglleft/guilsinglright
/fi/fl/daggerdbl/periodcentered/quotesinglbase/quotedblbase/perthousand
/Acircumflex/Ecircumflex/Aacute/Edieresis/Egrave/Iacute/Icircumflex
/Idieresis/Igrave/Oacute/Ocircumflex/.notdef/Ograve/Uacute/Ucircumflex
/Ugrave/dotlessi/circumflex/tilde/macron/breve/dotaccent/ring/cedilla
/hungarumlaut/ogonek/caron]
StandardEncoding Re-encode /_Courier /Courier EncodeFont

/RT {SR} def
/LC {} def
/SS {pop} def
/PF {} def
/PC {} def
0.000 0 27.000 153.000 0.000 0.000 16.000 21.000 rect
gsave
163.500 35.000 T translate
0.0 rotate
1 1 scale
14.000 (_Courier) plain F
 /setcmykcolor where
 {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse 

( ) -10.500 4.000 S
(2) -2.500 4.000 S
grestore
/RT {SR} def
/LC {} def
/SS {pop} def
/PF {} def
/PC {} def
0.000 0 81.000 225.000 0.000 0.000 16.000 21.000 rect
gsave
235.500 89.000 T translate
0.0 rotate
1 1 scale
14.000 (_Courier) fess
 /setcmykcolor where
 {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse 

( ) -10.500 4.000 S
(3) -2.500 4.000 S
grestore
/RT {SR} def
/LC {} def
/SS {pop} def
/PF {} def
/PC {} def
0.000 0 135.000 297.000 0.000 0.000 16.000 21.000 rect
gsave
307.500 143.000 T translate
0.0 rotate
1 1 scale
14.000 (_Courier) fess
 /setcmykcolor where
 {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse 

( ) -10.500 4.000 S
(1) -2.500 4.000 S
grestore
/RT {SR} def
/LC {} def
/SS {pop} def
/PF {} def
/PC {} def
0.000 0 189.000 153.000 0.000 0.000 16.000 21.000 rect
gsave
163.500 197.000 T translate
0.0 rotate
1 1 scale
14.000 (_Courier) fess
 /setcmykcolor where
 {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse 

( ) -10.500 4.000 S
(9) -2.500 4.000 S
grestore
/RT {SR} def
/LC {} def
/SS {pop} def
/PF {} def
/PC {} def
0.000 0 243.000 225.000 0.000 0.000 16.000 21.000 rect
gsave
235.500 251.000 T translate
0.0 rotate
1 1 scale
14.000 (_Courier) fess
 /setcmykcolor where
 {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse 

( ) -10.500 4.000 S
(7) -2.500 4.000 S
grestore
/RT {SR} def
/LC {} def
/SS {pop} def
/PF {} def
/PC {} def
0.000 0 297.000 297.000 0.000 0.000 16.000 21.000 rect
gsave
307.500 305.000 T translate
0.0 rotate
1 1 scale
14.000 (_Courier) fess
 /setcmykcolor where
 {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse 

( ) -10.500 4.000 S
(8) -2.500 4.000 S
grestore
/RT {SR} def
/LC {} def
/SS {pop} def
/PF {} def
/PC {} def
0.000 0 351.000 153.000 0.000 0.000 16.000 21.000 rect
gsave
163.500 359.000 T translate
0.0 rotate
1 1 scale
14.000 (_Courier) fess
 /setcmykcolor where
 {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse 

( ) -10.500 4.000 S
(4) -2.500 4.000 S
grestore
/RT {SR} def
/LC {} def
/SS {pop} def
/PF {} def
/PC {} def
0.000 0 405.000 225.000 0.000 0.000 16.000 21.000 rect
gsave
235.500 413.000 T translate
0.0 rotate
1 1 scale
14.000 (_Courier) fess
 /setcmykcolor where
 {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse 

( ) -10.500 4.000 S
(6) -2.500 4.000 S
grestore
/RT {SR} def
/LC {} def
/SS {pop} def
/PF {} def
/PC {} def
0.000 0 459.000 297.000 0.000 0.000 16.000 21.000 rect
gsave
307.500 467.000 T translate
0.0 rotate
1 1 scale
14.000 (_Courier) fess
 /setcmykcolor where
 {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse 

( ) -10.500 4.000 S
(5) -2.500 4.000 S
grestore
/RT {SR} def
/SD {} def
/SS {setlinewidth SD stroke} def
/LC { /setcmykcolor where
 {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse 
} def
/PC { /setcmykcolor where
 {begin 0.000 0.000 0.000 0.000 setcmykcolor end} {1.000 1.000 1.000 setrgbcolor} ifelse 
} def
/PF {gsave fill grestore} def
1.000 0 504.000 144.000 0.000 0.000 36.000 36.000 rect
/RT {SR} def
/SD {} def
/SS {setlinewidth SD stroke} def
/LC { /setcmykcolor where
 {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse 
} def
/PC { /setcmykcolor where
 {begin 0.000 0.000 0.000 0.000 setcmykcolor end} {1.000 1.000 1.000 setrgbcolor} ifelse 
} def
/PF {gsave fill grestore} def
1.000 0 504.000 342.000 0.000 0.000 36.000 108.000 rect
/RT {SR} def
/LC {} def
/SS {pop} def
/PF {} def
/PC {} def
0.000 0 513.000 351.000 0.000 0.000 16.000 101.000 rect
gsave
401.500 521.000 T translate
0.0 rotate
1 1 scale
14.000 (_Courier) fess
 /setcmykcolor where
 {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse 

(A) -50.486 4.000 S
(4) -42.486 4.000 S
( ) -34.486 4.000 S
(&) -26.486 4.000 S
( ) -18.486 4.000 S
(A) -10.486 4.000 S
(5) -2.486 4.000 S
( ) 5.513 4.000 S
(&) 13.513 4.000 S
( ) 21.513 4.000 S
(A) 29.513 4.000 S
(6) 37.513 4.000 S
grestore
/RT {SR} def
/SD {} def
/SS {setlinewidth SD stroke} def
/LC { /setcmykcolor where
 {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse 
} def
/PC { /setcmykcolor where
 {begin 0.000 0.000 0.000 0.000 setcmykcolor end} {1.000 1.000 1.000 setrgbcolor} ifelse 
} def
/PF {gsave fill grestore} def
1.000 0 342.000 342.000 0.000 0.000 36.000 108.000 rect
/RT {SR} def
/LC {} def
/SS {pop} def
/PF {} def
/PC {} def
0.000 0 351.000 351.000 0.000 0.000 16.000 101.000 rect
gsave
401.500 359.000 T translate
0.0 rotate
1 1 scale
14.000 (_Courier) fess
 /setcmykcolor where
 {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse 

(A) -50.486 4.000 S
(7) -42.486 4.000 S
( ) -34.486 4.000 S
(&) -26.486 4.000 S
( ) -18.486 4.000 S
(A) -10.486 4.000 S
(8) -2.486 4.000 S
( ) 5.513 4.000 S
(&) 13.513 4.000 S
( ) 21.513 4.000 S
(A) 29.513 4.000 S
(9) 37.513 4.000 S
grestore
/RT {SR} def
/SD {} def
/SS {setlinewidth SD stroke} def
/LC { /setcmykcolor where
 {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse 
} def
/PC { /setcmykcolor where
 {begin 0.000 0.000 0.000 0.000 setcmykcolor end} {1.000 1.000 1.000 setrgbcolor} ifelse 
} def
/PF {gsave fill grestore} def
1.000 0 180.000 342.000 0.000 0.000 36.000 108.000 rect
/RT {SR} def
/LC {} def
/SS {pop} def
/PF {} def
/PC {} def
0.000 0 189.000 351.000 0.000 0.000 16.000 101.000 rect
gsave
401.500 197.000 T translate
0.0 rotate
1 1 scale
14.000 (_Courier) fess
 /setcmykcolor where
 {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse 

(A) -50.486 4.000 S
(2) -42.486 4.000 S
( ) -34.486 4.000 S
(&) -26.486 4.000 S
( ) -18.486 4.000 S
(A) -10.486 4.000 S
(3) -2.486 4.000 S
( ) 5.513 4.000 S
(&) 13.513 4.000 S
( ) 21.513 4.000 S
(A) 29.513 4.000 S
(1) 37.513 4.000 S
grestore
/ArrowType{ 
1.000 setlinewidth
162.000 180.000 moveto
/Triangular 14.099 7.049 false 270.019 DrawArrowHead
} bind def
/SD {} def
/SS {setlinewidth SD stroke} def
/LC { /setcmykcolor where
 {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse 
} def
/PF {gsave fill grestore} def
/SS {setlinewidth SD stroke} def
1.000 161.999 178.000 162.000 54.000 Line
/ArrowType{ 
1.000 setlinewidth
234.000 72.000 moveto
/Triangular 14.099 7.049 false 194.050 DrawArrowHead
} bind def
/SD {} def
/SS {setlinewidth SD stroke} def
/LC { /setcmykcolor where
 {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse 
} def
/PF {gsave fill grestore} def
/SS {setlinewidth SD stroke} def
1.000 232.059 71.514 162.000 54.000 Line
/ArrowType{ 
1.000 setlinewidth
306.000 126.000 moveto
/Triangular 14.099 7.049 false 194.050 DrawArrowHead
} bind def
/SD {} def
/SS {setlinewidth SD stroke} def
/LC { /setcmykcolor where
 {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse 
} def
/PF {gsave fill grestore} def
/SS {setlinewidth SD stroke} def
1.000 304.059 125.514 234.000 108.000 Line
/ArrowType{ 
1.000 setlinewidth
171.000 180.000 moveto
/Triangular 14.099 7.049 false 311.207 DrawArrowHead
} bind def
/SD {} def
/SS {setlinewidth SD stroke} def
/LC { /setcmykcolor where
 {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse 
} def
/PF {gsave fill grestore} def
/SS {setlinewidth SD stroke} def
1.000 172.316 178.494 234.000 108.000 Line
/ArrowType{ 
1.000 setlinewidth
342.000 180.000 moveto
/Triangular 14.099 7.049 false 206.580 DrawArrowHead
} bind def
/SD {} def
/SS {setlinewidth SD stroke} def
/LC { /setcmykcolor where
 {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse 
} def
/PF {gsave fill grestore} def
/SS {setlinewidth SD stroke} def
1.000 340.211 179.105 306.000 162.000 Line
/ArrowType{ 
1.000 setlinewidth
180.000 189.000 moveto
/Triangular 14.099 7.049 false 347.930 DrawArrowHead
} bind def
/SD {} def
/SS {setlinewidth SD stroke} def
/LC { /setcmykcolor where
 {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse 
} def
/PF {gsave fill grestore} def
/SS {setlinewidth SD stroke} def
1.000 181.955 188.580 306.000 162.000 Line
/ArrowType{ 
1.000 setlinewidth
162.000 342.000 moveto
/Triangular 14.099 7.049 false 270.019 DrawArrowHead
} bind def
/SD {} def
/SS {setlinewidth SD stroke} def
/LC { /setcmykcolor where
 {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse 
} def
/PF {gsave fill grestore} def
/SS {setlinewidth SD stroke} def
1.000 161.999 340.000 162.000 216.000 Line
/ArrowType{ 
1.000 setlinewidth
234.000 234.000 moveto
/Triangular 14.099 7.049 false 194.050 DrawArrowHead
} bind def
/SD {} def
/SS {setlinewidth SD stroke} def
/LC { /setcmykcolor where
 {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse 
} def
/PF {gsave fill grestore} def
/SS {setlinewidth SD stroke} def
1.000 232.059 233.514 162.000 216.000 Line
/ArrowType{ 
1.000 setlinewidth
306.000 288.000 moveto
/Triangular 14.099 7.049 false 194.050 DrawArrowHead
} bind def
/SD {} def
/SS {setlinewidth SD stroke} def
/LC { /setcmykcolor where
 {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse 
} def
/PF {gsave fill grestore} def
/SS {setlinewidth SD stroke} def
1.000 304.059 287.514 234.000 270.000 Line
/ArrowType{ 
1.000 setlinewidth
342.000 342.000 moveto
/Triangular 14.099 7.049 false 206.580 DrawArrowHead
} bind def
/SD {} def
/SS {setlinewidth SD stroke} def
/LC { /setcmykcolor where
 {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse 
} def
/PF {gsave fill grestore} def
/SS {setlinewidth SD stroke} def
1.000 340.211 341.105 306.000 324.000 Line
/ArrowType{ 
1.000 setlinewidth
180.000 351.000 moveto
/Triangular 14.099 7.049 false 347.930 DrawArrowHead
} bind def
/SD {} def
/SS {setlinewidth SD stroke} def
/LC { /setcmykcolor where
 {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse 
} def
/PF {gsave fill grestore} def
/SS {setlinewidth SD stroke} def
1.000 181.955 350.580 306.000 324.000 Line
/ArrowType{ 
1.000 setlinewidth
171.000 342.000 moveto
/Triangular 14.099 7.049 false 311.207 DrawArrowHead
} bind def
/SD {} def
/SS {setlinewidth SD stroke} def
/LC { /setcmykcolor where
 {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse 
} def
/PF {gsave fill grestore} def
/SS {setlinewidth SD stroke} def
1.000 172.316 340.494 234.000 270.000 Line
/ArrowType{ 
1.000 setlinewidth
162.000 504.000 moveto
/Triangular 14.099 7.049 false 270.019 DrawArrowHead
} bind def
/SD {} def
/SS {setlinewidth SD stroke} def
/LC { /setcmykcolor where
 {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse 
} def
/PF {gsave fill grestore} def
/SS {setlinewidth SD stroke} def
1.000 161.999 502.000 162.000 378.000 Line
/ArrowType{ 
1.000 setlinewidth
234.000 396.000 moveto
/Triangular 14.099 7.049 false 194.050 DrawArrowHead
} bind def
/SD {} def
/SS {setlinewidth SD stroke} def
/LC { /setcmykcolor where
 {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse 
} def
/PF {gsave fill grestore} def
/SS {setlinewidth SD stroke} def
1.000 232.059 395.514 162.000 378.000 Line
/ArrowType{ 
1.000 setlinewidth
171.000 504.000 moveto
/Triangular 14.099 7.049 false 311.207 DrawArrowHead
} bind def
/SD {} def
/SS {setlinewidth SD stroke} def
/LC { /setcmykcolor where
 {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse 
} def
/PF {gsave fill grestore} def
/SS {setlinewidth SD stroke} def
1.000 172.316 502.494 234.000 432.000 Line
/ArrowType{ 
1.000 setlinewidth
180.000 504.000 moveto
/Triangular 14.099 7.049 false 351.895 DrawArrowHead
} bind def
/SD {} def
/SS {setlinewidth SD stroke} def
/LC { /setcmykcolor where
 {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse 
} def
/PF {gsave fill grestore} def
/SS {setlinewidth SD stroke} def
1.000 181.979 503.717 306.000 486.000 Line
/ArrowType{ 
1.000 setlinewidth
306.000 450.000 moveto
/Triangular 14.099 7.049 false 194.050 DrawArrowHead
} bind def
/SD {} def
/SS {setlinewidth SD stroke} def
/LC { /setcmykcolor where
 {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse 
} def
/PF {gsave fill grestore} def
/SS {setlinewidth SD stroke} def
1.000 304.059 449.514 234.000 432.000 Line
/ArrowType{ 
1.000 setlinewidth
342.000 504.000 moveto
/Triangular 14.099 7.049 false 206.580 DrawArrowHead
} bind def
/SD {} def
/SS {setlinewidth SD stroke} def
/LC { /setcmykcolor where
 {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse 
} def
/PF {gsave fill grestore} def
/SS {setlinewidth SD stroke} def
1.000 340.211 503.105 306.000 486.000 Line
restore
end
%%EndDocument
 @endspecial 544 1512 a Fr(Figure)14 b(8:)k(A)c(decision)g(graph)g(for)f(the)
i(xd6)e(data)h(set)0 1655 y(should)g(giv)o(e)f(categories)h(with)g(90\045)f
(purit)o(y)m(.)k(The)d(smallest)f(p)q(ossible)h(decision)g(tree)h(for)e(this)
h(function)g(has)g(39)f(decision)0 1705 y(no)q(des)18 b(and)f(40)g(lea)o(v)o
(es.)28 b(This)17 b(function)g(is)g(hard)g(for)g(decision)h(tree)g(inference)
h(sc)o(hemes)f(to)f(learn,)g(since)h(the)g(data)f(is)0 1755
y(partitioned)d(in)o(to)f(40)g(subsets.)20 b(The)14 b(graph)g(inference)h(sc)
o(heme)g(re-constructed)h(this)e(function,)f(as)h(sho)o(wn)g(in)g(Figure)g
(8,)0 1805 y(and)g(hence)h(the)g(error)f(rate)h(of)e(the)i(decision)f(graph)f
(is)h(the)h(noise)f(lev)o(el)f(of)g(10\045.)p 584 1875 783
2 v 583 1924 2 50 v 608 1909 a(Num)o(b)q(er)h(of)p 836 1924
V 59 w(Decision)p 1038 1924 V 50 w(Lea)o(v)o(es)p 1207 1924
V 61 w(Error)p 1366 1924 V 583 1974 V 608 1959 a(Data)g(Items)p
836 1974 V 90 w(No)q(des)p 1038 1974 V 1207 1974 V 243 w(Rate)p
1366 1974 V 584 1976 783 2 v 583 2026 2 50 v 608 2011 a(400)p
836 2026 V 322 w(7)p 1038 2026 V 149 w(8)p 1207 2026 V 49 w(22.4\045)p
1366 2026 V 583 2076 V 608 2061 a(1000)p 836 2076 V 280 w(24)p
1038 2076 V 128 w(25)p 1207 2076 V 81 w(13\045)p 1366 2076
V 583 2125 V 608 2110 a(2000)p 836 2125 V 280 w(33)p 1038 2125
V 128 w(34)p 1207 2125 V 49 w(10.6\045)p 1366 2125 V 583 2175
V 608 2160 a(2500)p 836 2175 V 280 w(33)p 1038 2175 V 128 w(34)p
1207 2175 V 49 w(10.2\045)p 1366 2175 V 583 2225 V 608 2210
a(2800)p 836 2225 V 280 w(34)p 1038 2225 V 128 w(35)p 1207
2225 V 81 w(10\045)p 1366 2225 V 583 2275 V 608 2260 a(3000)p
836 2275 V 280 w(39)p 1038 2275 V 128 w(40)p 1207 2275 V 81
w(10\045)p 1366 2275 V 584 2276 783 2 v 410 2351 a(T)m(able)g(2:)j(V)m
(arying)c(the)i(size)f(of)f(the)i(xd6)f(data)f(set)i(|)e(Decision)h(T)m(ree)p
549 2476 853 2 v 548 2526 2 50 v 573 2511 a(Num)o(b)q(er)g(of)p
801 2526 V 59 w(Decision)g(and)p 1084 2526 V 49 w(Lea)o(v)o(es)p
1253 2526 V 51 w(Error)p 1401 2526 V 548 2576 V 573 2561 a(Data)g(Items)p
801 2576 V 80 w(Join)g(No)q(des)p 1084 2576 V 1253 2576 V 232
w(Rate)p 1401 2576 V 549 2577 853 2 v 548 2627 2 50 v 573 2612
a(300)p 801 2627 V 382 w(14)p 1084 2627 V 148 w(6)p 1253 2627
V 71 w(19\045)p 1401 2627 V 548 2677 V 573 2662 a(350)p 801
2677 V 382 w(17)p 1084 2677 V 148 w(6)p 1253 2677 V 71 w(17\045)p
1401 2677 V 548 2727 V 573 2712 a(400)p 801 2727 V 382 w(21)p
1084 2727 V 148 w(4)p 1253 2727 V 71 w(10\045)p 1401 2727 V
549 2729 853 2 v 392 2803 a(T)m(able)g(3:)j(V)m(arying)c(the)i(size)f(of)f
(the)i(xd6)f(data)f(set)i(|)e(Decision)h(Graph)965 2936 y(9)p
eop
%%Page: 10 10
bop 62 77 a Fr(In)17 b(T)m(able)f(2)g(and)h(T)m(able)f(3)g(w)o(e)h(giv)o(e)f
(results)i(when)f(w)o(e)g(v)n(aried)f(the)i(n)o(um)o(b)q(er)e(of)g(items)f
(in)i(the)g(training)f(set)h(of)f(the)0 127 y(\\xd6")h(data)h(set.)31
b(The)18 b(decision)h(graph)e(inference)j(sc)o(heme)e(re-constructed)j(the)d
(original)e(function)i(from)e(400)h(data)0 177 y(items,)c(where)i([W)m
(allace)d(and)h(P)o(atric)o(k's])h(decision)g(tree)h(inference)g(sc)o(heme)f
(required)h(3000)e(data)h(items)f(to)h(reconstruct)0 226 y(the)e(function.)17
b(F)m(urthermore,)11 b(the)h(decision)g(graph)f(pro)q(duced)h(a)f(decision)h
(pro)q(cedure)h(that)f(w)o(as)f(easier)h(to)f(iden)o(tify)g(from)0
276 y(a)j(h)o(uman's)e(p)q(ersp)q(ectiv)o(e.)62 333 y(W)m(e)h(had)f(similar)f
(success)k(with)e(the)g(1)673 318 y Fc(st)716 333 y Fr(Monk's)f(data)h(set)h
(\(rep)q(orted)g(in)f([22)o(]\).)k(This)c(data)f(set)i(is)f(an)f
(arti\014cial)g(data)0 383 y(set)j(constructed)h(from)c(the)i(function:)455
488 y Fj(J)t(ack)q(et)p 581 488 13 2 v 15 w(C)s(ol)q(or)26
b Fr(=)g Fj(Red)36 b Fi(_)h Fj(H)s(ead)p 1060 488 V 15 w(S)r(hape)26
b Fr(=)f Fj(B)r(ody)p 1368 488 V 18 w(S)r(hape)0 593 y Fr(While)17
b(ID3)g(had)h(an)g(error)h(rate)f(of)g(31\045)f([22)o(],)h(the)g(decision)g
(graph)g(inference)h(sc)o(heme)f(reconstructed)j(the)e(original)0
643 y(function,)13 b(as)h(sho)o(wn)g(in)f(Figure)h(9,)g(and)f(hence)j(had)d
(a)h(0\045)f(error)i(rate.)532 1494 y @beginspecial 71 @llx
431 @lly 469 @urx 757 @ury 2160 @rwi @setspecial
%%BeginDocument: monk1.ps
/MAV 300 dict def
MAV begin 
/useClip true def 
/top    0 def 
/left   1 def 
/bottom 2 def 
/right  3 def 
/CM     6 array def 
/CTM    6 array def 
/CTMR   6 array def 
/MTC    6 array def 
/blimit 1500 def 
/bcnt   0 def 
/rbox 8 array def 
/segbox 8 array def 
/bbox1 4 array def 
/c1 3 array def 
/c2 3 array def 
/d 3 array def    
/delta 3 array def 
/mycurrentrgbcolor 3 array def 
/ulx 0 def 
/uly 1 def 
/llx 2 def 
/lly 3 def 
/urx 4 def 
/ury 5 def 
/lrx 6 def 
/lry 7 def 
/sp [0 0] def 
/ep [0 0] def 
/bbox 4 array def 
/pbox 4 array def 
/scrnProc currentscreen 3 1 roll pop pop def
/currentcolorscreen where {
begin
currentcolorscreen
end
3 1 roll pop pop 
4 2 roll pop pop 
5 -2 roll pop pop 
6 -2 roll pop pop 
/kProc exch def 
/bProc exch def 
/gProc exch def 
/rProc exch def 
} if 
/Max {2 copy gt {pop}{exch pop} ifelse} bind def
/Min {2 copy lt {pop}{exch pop} ifelse} bind def
/cellPenW 72.0 /currentcolorscreen where
{begin currentcolorscreen end pop pop
10 1 roll pop pop 8 1 roll pop pop
 6 1 roll pop pop Max Max Max }
{currentscreen pop pop} ifelse div 2.0 div def
/rect { 
 /saveobj save def 
 R PC PF LC SS 
 saveobj restore 
} bind def 
/R { 
 newpath
 pbox astore pop
 0 792 translate 1 -1 scale CTMR currentmatrix pop exch translate
 /objectCord mstore def
 pbox right get 2 div
 dup pbox left get exch sub
 pbox left 3 -1 roll put 
 dup pbox right 3 -1 roll put
 pbox bottom get 2 div 
 dup pbox top get exch sub
 pbox top 3 -1 roll put
 dup pbox bottom 3 -1 roll put
 translate 
 CTM currentmatrix pop
 57.3 mul rotate
 RT
} bind def
 /SaveScreenBW {
 currentscreen
 /scrnProc exch def
 /scrnAngle exch def
 /scrnFreq exch def
 } bind def
 /RestoreScreenBW {
 scrnFreq scrnAngle MAV /scrnProc get setscreen
 } bind def
 /SetFreqAngleBW {
 currentscreen
 3 1 roll
 pop pop
 setscreen
 } bind def
 /SaveScreenColor {
 currentcolorscreen
 /grayProc exch def
 /grayAngle exch def
 /grayFreq exch def
 /bProc exch def
 /bAngle exch def
 /bFreq exch def
 /gProc exch def
 /gAngle exch def
 /gFreq exch def
 /rProc exch def
 /rAngle exch def
 /rFreq exch def
 } bind def
 /RestoreColorScreen {
 rFreq rAngle MAV /rProc get gFreq gAngle MAV /gProc get bFreq bAngle MAV /bProc get grayFreq grayAngle MAV /grayProc get setcolorscreen
 } bind def
 /SetFreqAngleColor { 
 currentcolorscreen 
 3 1 roll pop pop
 4 2 roll pop pop
 5 -2 roll pop pop
 6 -2 roll pop pop
 4 1 roll 
 6 1 roll 
 8 1 roll 
 10 1 roll 
 setcolorscreen 
 } bind def 
/initmsaverestore { 
userdict begin 
/mdict 10 dict def 
mdict begin 
/mindex -1 def 
/mstacksize 25 def 
/mstack mstacksize array def 
/incmindex { 
/mindex mindex 1 add def 
} bind def 
/decmindex { 
/mindex mindex 1 sub def 
} bind def 
/checkmindex { 
mindex 0 lt { 
(%ERROR: msave/mrestore stack underflow: Offending command 'mrestore'
) print flush 
stop 
} 
{ 
mindex mstacksize ge { 
(%ERROR: msave/mrestore stack overflow: Offending command 'msave'
) print flush 
stop 
} if 
} ifelse 
} bind def 
/mpush { 
incmindex 
checkmindex 
mstack mindex 
3 -1 roll put 
} bind def 
/mpop { 
checkmindex 
mstack mindex get 
decmindex 
} bind def 
end 
end 
} bind def 
/msave { 
mdict begin 
matrix currentmatrix mpush 
end 
} bind def 
/mrestore { 
mdict begin 
mpop setmatrix 
end 
} bind def 
/msavelevel { 
mdict begin 
mindex 1 add 
end 
} bind def 
/mstore {
matrix currentmatrix
} bind def
/AutoSizeY {
0 0 pl
dup 3 1 roll
4 -1 roll  
add
pl exch pop
exch sub
} bind def
/pl {  
transform
0.25 sub round 0.25 add exch
0.25 sub round 0.25 add exch
itransform
} bind def
/pll {
transform
round exch
round exch
itransform
} bind def
/pr { 
dtransform
round exch
round exch
idtransform
} bind def
/m { 
pl  moveto
} bind def
/l { 
pl lineto
} bind def
/c { 
pl curveto
} bind def
/rm { 
pr rmoveto
} bind def
/rl { 
pr rlineto
} bind def
/ar { 
5 -2 roll pl
5 2 roll
arc
} bind def
/an { 
5 -2 roll pl
5 2 roll
arcn
} bind def
/MakePatternFont {
/FontDict 20 dict def
FontDict begin
/FontName exch def
/Encoding exch def
/FontMatrix [1 0 0 1 0 0 ] def
/FontType 3 def
/FontBBox [ 0 0 1 1 ] def
/PatternDict exch def
/RenderPattern {
patternDict exch get
exec
} bind def
/BuildChar {
exch begin
1 0 0 0 1 1 setcachedevice
Encoding exch get RenderPattern
end
} bind def
FontName FontDict definefont pop
end
} bind def
/SnapToPattenGrid
	{
	exch
	dup 0 lt {
		1 index sub
	} if
	1 index
	div truncate
	mul
} bind def
/FillPatternString {
dup length
1 sub
0 1 3 -1 roll {
2 index
2 index
3 -2 roll
put
} for
pop pop
} bind def
/AutoSizeY {
	0.0 exch dtransform
	round
	idtransform exch pop
} bind def
 /AutoSizeX {
	0.0 dtransform
	exch
	round
	exch
	idtransform pop
} bind def 
/AutoCellSize {
	AutoSizeY
	exch
	AutoSizeX
	exch
} bind def
/CheckPath {
	false
	{ pop pop pop true exit}
	{ pop pop pop true exit}
	{ pop pop pop pop pop pop pop true exit}
	{ pop true exit}
	pathforall
} bind def
/PatternFill {					%		patternCharacter
	/patternString 1 string def
	/cm mstore def
	patternMatrix setmatrix
	1 1 AutoCellSize
	dup 0 eq { pop 1} if
	exch
	dup 0 eq { pop 1} if
	exch
	/patternSize exch 24.0 mul def
	/PatternSizeX exch 24.0 mul patternString length mul def
	/flaterror 0 def
	patternString FillPatternString
	gsave
		flaterror 1 add setflat
		flattenpath
		pathbbox
	grestore
	psy add flaterror add psy SnapToPattenGrid
	exch psx add flaterror add psx SnapToPattenGrid
	3 -1 roll flaterror sub psy SnapToPattenGrid
	4 -1 roll flaterror sub psx SnapToPattenGrid
	4 2 roll pll
	4 2 roll pll
	/llxsnap exch def
	/llysnap exch def
	/urxsnap exch def
	/urysnap exch def
	gsave
		useClip true eq {clip}{eoclip} ifelse newpath
		/PatternFont findfont [psx 0.0 0.0 psy 0.0 0.0] makefont setfont
		llysnap patternSize urysnap {
			llxsnap exch moveto
			llxsnap PatternSizeX urxsnap {
				pop
				patternString show
				%currentpoint am
			} for
		} bind for
	grestore
	cm setmatrix
} bind def				%		End 'PatternFill'
/DefaultPatternFont {
	/cm mstore def
	patternMatrix setmatrix
	1 1 AutoCellSize
	dup 0 eq { pop 1} if
	exch
	dup 0 eq { pop 1} if
	exch
	/psy exch iSizeY mul def
	/psx exch iSizeX mul def
	/patternDict 64 dict def
	patternDict begin
		/NotDef {} def
		/LiteDiagLines {
			iSizeX iSizeY false [iSizeX 0.0 0.0 iSizeY -1.0 mul  0.0 iSizeY]
			{pat}
			imagemask
		} bind def
	end
	/CustEncoding 256 array def
	0 255 1 {
		CustEncoding exch /NotDef put
	} bind for
	CustEncoding 65 /LiteDiagLines put
	patternDict CustEncoding /PatternFont MakePatternFont
	/pathSegProc {
		strokepath
		CheckPath {
			65 PatternFill newpath
		} if
	} bind def
	cm setmatrix
} bind def
/XRound {
	dup
	3 -1 roll
	exch mul round
	exch div
} bind def
/RoundMatrix {
	/i 0 def
	dup {
		100000.0 XRound
		1 index
		exch i exch put
		/i i 1 add def
	} forall
} bind def
/GetBoxesRatio {
3 -1 roll sub
7 1 roll
exch sub
6 1 roll
3 -1 roll sub
5 1 roll
exch sub
4 1 roll
3 -1 roll div
3 1 roll
exch div
exch
} bind def
/T {792 exch sub} bind def
/sx 0 def
/sy 0 def
/ex 0 def
/ey 0 def
/lw  0 def
/siz 0 def
/U {gsave 0 setlinecap
/lw siz 0.078125 mul def  /ey exch neg def /ex exch def /sy exch neg def /sx exch def
fontkind plain eq 
 {
  lw siz 0.0119444 mul sub setlinewidth sx sy moveto ex ey lineto stroke
 }
 {
   currentdict /outlineFontSize known outlineFontSize 0 gt and
     {
       fontkind outline eq
         {
           /sy sy 0.0119444 siz mul sub def
           /ey ey 0.0119444 siz mul sub def
           gsave 
           1 1 1 setrgbcolor lw siz 0.0119444 mul sub setlinewidth sx sy moveto ex ey lineto stroke
           grestore
           lw siz 0.0119444 mul sub setlinewidth sx sy moveto ex ey lineto
           strokepath 0.0119444 siz mul setlinewidth stroke
         } if
       fontkind shadow eq fontkind outlineshadow eq or
         {
           /sy sy 0.0358332 siz mul sub def
           /ey ey 0.0358332 siz mul sub def
           lw setlinewidth
           lw 2 div sx add sy
           lw 2 div sub moveto
           lw 2 div ex add ey
           lw 2 div sub lineto stroke 
           gsave
           1 1 1 setrgbcolor lw siz 0.0119444 mul sub setlinewidth sx sy moveto ex ey lineto stroke
           grestore
           lw siz 0.0119444 mul sub setlinewidth sx sy moveto ex ey lineto
           strokepath 0.0119444 siz mul setlinewidth stroke
         } if
      } if
 } ifelse
grestore} bind def
/plain 1 def
/outline 2 def
/shadow 3 def
/outlineshadow 4 def
/fess {
	currentdict /outlineFontSize known {
		/outlineFontSize 2 index def
	} if
	findfont exch dup /siz exch def scalefont setfont
} bind def
/SHDW {gsave siz oldfontname fess siz 0.055 mul x add y siz 0.05 mul sub moveto c show grestore} def
/NRML {gsave 1 1 1 setrgbcolor siz oldfontname fess x y moveto c show grestore siz /Outline fess  x y moveto c show} def
/S {
fontkind plain eq {neg moveto show} if
fontkind outline eq {neg /y exch def /x exch def /c exch def NRML} if
fontkind shadow eq {neg /y exch def /x exch def /c exch def SHDW NRML} if
fontkind outlineshadow eq {neg /y exch def /x exch def /c exch def SHDW NRML} if
} bind def
/F {
/fontkind exch def
fontkind plain eq {fess} if
fontkind outline eq {dup /oldfontname exch def exch dup /siz exch def exch OLF} if
fontkind shadow eq {dup /oldfontname exch def exch dup /siz exch def exch OLF} if
fontkind outlineshadow eq {dup /oldfontname exch def exch dup /siz exch def exch OLF} if
} bind def
/makeoutlinedict 15 dict def
/makeoutlinefont
 {
  makeoutlinedict begin
   /uniqueid exch def
   /strokewidth exch def
   /newfontname exch def
   /basefontname exch def
   FontDirectory basefontname known not {
    /basefontname /Times-Roman def
   } if
   /basefontdict basefontname findfont def
   /numentries basefontdict maxlength 1 add def
   basefontdict /UniqueID known not
   {/numentries numentries 1 add def} if
   /outfontdict numentries dict def
   basefontdict
   {
     exch dup /FID ne {exch outfontdict 3 1 roll put} {pop pop} ifelse
	  }forall
   outfontdict /FontName newfontname put
   outfontdict /PaintType 2 put
   outfontdict /StrokeWidth strokewidth put
   outfontdict /UniqueID uniqueid put
   newfontname outfontdict definefont pop
  end
  }def
/UID {
 findfont dup /UniqueID known
  {/UniqueID get 1 add}
  {pop 1}
  ifelse
} def
/OLF {
dup
/Outline
1000 62 div
4 -1 roll
UID
/outlineFontSize 5 index def
makeoutlinefont
/Outline findfont exch scalefont setfont
} def
/CopyEncoding {
findfont
/Encoding get
dup length array
/tarrayz exch def
tarrayz 0
3 -1 roll
putinterval
tarrayz
} bind def
/Re-encode {
dup length array copy
/eap 0 def
exch {
dup type /integertype eq {
/eap exch def
} {
1 index
exch
eap exch
put
/eap eap 1 add def
} ifelse
} forall
} bind def
/EncodeFont	{
findfont dup
length dict
begin
{	1 index /FID ne
{ def }
{ pop pop } ifelse
} forall
/FontName exch def
/Encoding exch def
FontName currentdict
end
definefont pop
} bind def
/clip2pathbbox {
	/magicNum linewidth 2 div 1 2 sqrt div mul def
	pathbbox
	/urymn exch magicNum add def
	/urxmn exch magicNum add def
	/llymn exch magicNum sub def
	/llxmn exch magicNum sub def
	newpath llxmn llymn moveto llxmn urymn lineto urxmn urymn lineto urxmn llymn lineto
	closepath clip newpath
} bind def
/Line {
MAV /LC get length 0 ne
{
	gsave
			newpath
			MAV /ArrowType get length 0 eq
			MAV /SD get length 0 eq and
			{2 setlinecap /UseClip {clip2pathbbox} def }
			{0 setlinecap /UseClip {} def } ifelse
			0 792 translate
			1 -1 scale
			CTM currentmatrix pop
			/yStart exch def /xStart exch def /yEnd exch def /xEnd exch def /linewidth exch def
			MAV /ArrowType get length 0 eq xStart xEnd ne yStart yEnd ne and and
			{xStart yStart moveto xEnd yEnd lineto UseClip xStart yStart moveto xEnd yEnd lineto}
			{xStart yStart moveto xEnd yEnd lineto} ifelse
			linewidth setlinewidth SD strokepath
			CheckPath {LC PF ArrowType} if
	grestore
}
{pop pop pop pop pop} ifelse
} bind def
/ZeroLine {
	gsave
		newpath
		MAV /ArrowType get length 0 ne {
			/UseClip {} def
			0 792 translate
			1 -1 scale
			pop pop pop pop pop
			CTM currentmatrix pop
			ArrowType
		} if
	grestore
} bind def
/CompensateForStroke {
	sin currentlinewidth mul
	exch
	cos currentlinewidth mul
	dup 0 translate
	4 -1 roll exch 2.0 mul sub
	3 1 roll
	2.0 mul sub
} bind def
/arrowdict 10 dict def
arrowdict begin
	/SwallowTail {
		newpath
		0.0 0.0 moveto
		1.0 -.5 lineto
		.666 0.0 lineto
		1.0 .5 lineto
		closepath
	} bind def
	/Triangular {
		newpath
		0.0 0.0 moveto
		1.0 -.5 lineto
		1.0 .5 lineto
		closepath
	} bind def
	/OpenTri {
		newpath
		1.0 0.5 moveto
		0.0 0.0 lineto
		1.0 -0.5 lineto
	} bind def
	/ClosedTri {
		newpath
		1.0 0.5 moveto
		0.0 0.0 lineto
		1.0 -0.5 lineto
		closepath
	} bind def
	/SlashBar {
		newpath
		0.5 -.5 moveto
		-.5 0.5 lineto
	} bind def
	/Dot {
		newpath
		0.5 0.0 moveto
		0 0 1 0 360 arc
		closepath
	} bind def
	/ExtSlashBar {
		newpath
		1.0 -.5 moveto
		0.0 0.5 lineto
	} bind def
end
/ScaleArrowHead {
	0 0 4 -2 roll
	0 0 1 1
	8 -4 roll GetBoxesRatio
	scale
} bind def
/DrawArrowHead {
	gsave
	[] 0 setdash
	currentpoint translate rotate
	{
		4 copy
		gsave
			initmatrix
			100 200 translate
			msave
				ScaleArrowHead pop
				arrowdict exch get exec
			mrestore
			strokepath
			0 0 3 index 3 index
			pathbbox 8 4 roll
			GetBoxesRatio
			4 2 roll
		grestore
		3 index 1.0 exch sub
		6 -1 roll
		{
			2 index mul
			0 translate
		}{
			pop
		} ifelse
		msave
			ScaleArrowHead scale
			arrowdict exch get exec
		mrestore
		strokepath
	} {
		msave
		ScaleArrowHead
		arrowdict exch get exec
		mrestore
	} ifelse
		CheckPath {
			LC PF
		} if
	grestore
} bind def
/SR { 
 pbox left get pbox top get moveto 
 pbox right get pbox top get lineto 
 pbox right get pbox bottom get lineto 
 pbox left get pbox bottom get lineto 
 closepath
} bind def 
/E {
1.415 setmiterlimit
CM currentmatrix pop
pbox right get pbox left get sub abs dup
pbox bottom get pbox top get sub abs dup 3 -1 roll
lt {exch dup 3 -1 roll exch div 1 exch}
{dup 3 -1 roll exch div 1} ifelse scale 
0 0 3 -1 roll 2 div 0 360 arc closepath
CM setmatrix
} bind def
/A1 {msave
pbox right get pbox left get sub abs dup
pbox bottom get pbox top get sub abs dup 3 -1 roll
lt {exch dup 3 -1 roll exch div 1 exch}
{dup 3 -1 roll exch div 1} ifelse scale 
0 0 3 -1 roll 2 div 5 -1 roll -90 add 5 -1 roll -90 add arcn
mrestore} bind def
/A2 {msave 0 0 moveto A1 closepath mrestore} def
/StripFromFront { 
dup length
2 index sub
3 1 roll
exch 3 -1 roll
getinterval
} bind def
/MakePathArray { 
 /k 0 def 
 {/k k 1 add def pop pop}{/k k 1 add def pop pop}{/k k 1 add def pop pop pop pop pop pop}{/k k 1 add def }pathforall 
 k array
 /k 0 def 
 {{moveto} 3 array astore 1 index k 3 -1 roll put /k k 1 add def} 
 {{lineto} 3 array astore 1 index k 3 -1 roll put /k k 1 add def} 
 {{curveto} 7 array astore 1 index k 3 -1 roll put /k k 1 add def} 
 {{closepath} 1 array astore 1 index k 3 -1 roll put /k k 1 add def} 
pathforall 
}bind def 
/MakeFlatPathArray { 
/k 0 def 
{/k k 1 add def pop pop}{/k k 1 add def pop pop}{pop pop pop pop pop pop}{}pathforall 
k array
/k 0 def 
{{moveto} 3 array astore 1 index k 3 -1 roll put /k k 1 add def} 
{{lineto} 3 array astore 1 index k 3 -1 roll put /k k 1 add def} 
{ pop pop pop pop pop pop} 
{} 
pathforall 
}bind def 
/FractionalLine {
2 index sub
.00001 mul
exch
3 index sub
.00001 mul
4 -1 roll add
3 1 roll
add
} bind def
/calcLineLength {
 exch
 4 -1 roll
 sub
 dup mul
 3 1 roll exch
 sub
 dup mul
 add sqrt
} bind def
/InitTotalLineLength {
 /oldY exch def
 /oldX exch def
 theDash aload pop currentLineLength add setdash
} bind def
/AccumeLineLength {
 3 copy pop
 2 copy
 oldX oldY
 4 2 roll calcLineLength
 /segmentLength exch def
 /currentLineLength currentLineLength segmentLength add def
 /oldY exch def
 /oldX exch def
} bind def
/DecumeLastLineLength {
 /currentLineLength currentLineLength segmentLength sub def
} bind def
/DrawFlattendSegment {
 /pointCount 2 def
 dup 0 lt { pop 0 } if
 fpc
 3 1 roll
 2 index
 1 index
 gt {
 2 copy get
 dup length
 dup 3 eq {
 pop
 dup 0 get
 exch 1 get
 2 copy InitTotalLineLength  
 m
 } {
 } ifelse
 } {
 pop 1 index
 } ifelse
 dup 1 add
 3 index
 exch sub
 dup 10 gt { pop 10} if
 {
 1 add
 2 copy
 get aload pop
 AccumeLineLength
 exec
 } repeat
 3 1 roll pop pop
 DecumeLastLineLength
} bind def
/IncFPC {
 fpc add
 /fpc exch def
} bind def
/DrawFlatPathArray {
 fpc
 0 { 
 dup 2 index
 1 sub
 lt { 
 flatPathArray exch
 newpath
 1 sub DrawFlattendSegment
 gsave
 pathSegProc
 grestore
 newpath
 }
 {
 pop pop
 exit
 } ifelse
 } loop
} bind def
/RecordFirstSubSegment {
 closepathArray 0 pathArray 0 get
 put
 closepathArray 1
 pathArray 0 get aload pop pop
 pathArray 1 get dup length 3 eq {
 aload pop pop
 } {
 newpath
 0 0 moveto
 aload pop exec
 /segmentArray flattenpath MakeFlatPathArray def
 segmentArray 1 get aload pop pop
 } ifelse
 FractionalLine {lineto} 3 array astore
 put
} bind def
/AppendClosePath {
 closepathArray 0 get 2 {lineto} put
 flatPathArray fpc closepathArray 0 get put
 1 IncFPC
 flatPathArray fpc closepathArray 1 get put
 1 IncFPC
} bind def
/RecordCurrentDash {
 /theDash
 currentdash 2 array astore def
 /currentLineLength 0 def
} bind def
/PatternStroke {
	0 setlinecap
 RecordCurrentDash
 /saveFlat currentflat def
 .5 setflat
 /pathArray MakePathArray def
 /closepathArray 2 array def
 /pathLength pathArray length def
 /flatPathArray 513 array def
 /currentLineLength 0 def
 /fpc 0 def
 pathArray pathLength 1 sub get
 length 1 eq {
 /usingClosepath true def
 RecordFirstSubSegment
 /pathLength pathLength 1 sub def
 } {
 /usingClosepath false def
 } ifelse
 0 1 pathLength 1 sub {
 pathArray exch get
 dup length 3 eq {
 fpc 1 add 512 ge {
 DrawFlatPathArray
 fpc 2 ge {
 flatPathArray flatPathArray fpc 2 sub get 0 put
 flatPathArray flatPathArray fpc 1 sub get 1 put
 /fpc 2 def
 }{
 /fpc 0 def
 } ifelse
 } if
 flatPathArray exch fpc exch put
 1 IncFPC
 } {
 dup length 7 eq {
 newpath
 /nToStrip 0 def
 fpc 1 gt {
 flatPathArray fpc 2 sub get aload pop pop m
 flatPathArray fpc 1 sub get aload pop exec
 /nToStrip 2 def
 } {
 fpc 1 eq {
 flatPathArray fpc 1 sub get aload pop exec
 /nToStrip 2 def
 } if
 } ifelse
 aload pop exec
 /segmentArray flattenpath MakeFlatPathArray def
 /segmentArray nToStrip segmentArray StripFromFront def
 segmentArray length fpc add 512 lt {
 flatPathArray fpc segmentArray putinterval
 segmentArray length IncFPC
 } {
 DrawFlatPathArray
 fpc 1 gt {
 flatPathArray flatPathArray fpc 2 sub get 0 exch put
 flatPathArray flatPathArray fpc 1 sub get 1 exch put
 /fpc 2 def
 }{
 /fpc 0 def
 } ifelse
 segmentArray length 512 lt {
 flatPathArray fpc segmentArray putinterval
 segmentArray length IncFPC
 } {
 segmentArray length
 /exitLoop false def
 0 
 {
 2 copy sub
 dup 500 gt {
 pop 500
 } { 
 /exitLoop true def
 } ifelse 
 segmentArray 2 index 2 index getinterval
 flatPathArray fpc 3 -1 roll putinterval
 dup IncFPC
 add 
 exitLoop {
 exit 
 } {
 DrawFlatPathArray
 fpc 1 gt {
 flatPathArray flatPathArray fpc 2 sub get 0 exch put
 flatPathArray flatPathArray fpc 1 sub get 1 exch put
 /fpc 2 def
 }{
 /fpc 0 def
 } ifelse
 } ifelse
 } loop
 } ifelse
 } ifelse
 } if
 } ifelse
 } for
 fpc 0 gt {
 usingClosepath {
 AppendClosePath
 } if
 DrawFlatPathArray
 } if
 saveFlat setflat
} bind def


initmsaverestore
/tctm matrix currentmatrix def
tctm RoundMatrix setmatrix
/patternMatrix mstore def
10 setmiterlimit
2 setlinecap
newpath
/RT {E} def
/SD {} def
/SS {setlinewidth SD stroke} def
/LC { /setcmykcolor where
 {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse 
} def
/PC { /setcmykcolor where
 {begin 0.000 0.000 0.000 0.000 setcmykcolor end} {1.000 1.000 1.000 setrgbcolor} ifelse 
} def
/PF {gsave fill grestore} def
1.000 0 36.000 162.000 0.000 0.000 36.000 107.999 rect
/RT {SR} def
/SD {} def
/SS {setlinewidth SD stroke} def
/LC { /setcmykcolor where
 {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse 
} def
/PC { /setcmykcolor where
 {begin 0.000 0.000 0.000 0.000 setcmykcolor end} {1.000 1.000 1.000 setrgbcolor} ifelse 
} def
/PF {gsave fill grestore} def
1.000 0 108.000 72.000 0.000 0.000 36.000 72.000 rect
save
[ 39/quotesingle 96/grave 128/Adieresis/Aring/Ccedilla/Eacute/Ntilde/Odieresis
/Udieresis/aacute/agrave/acircumflex/adieresis/atilde/aring/ccedilla/eacute
/egrave/ecircumflex/edieresis/iacute/igrave/icircumflex/idieresis/ntilde
/oacute/ograve/ocircumflex/odieresis/otilde/uacute/ugrave/ucircumflex
/udieresis/dagger/degree/cent/sterling/section/bullet/paragraph/germandbls
/registered/copyright/trademark/acute/dieresis/.notdef/AE/Oslash
/.notdef/plusminus/.notdef/.notdef/yen/mu/.notdef/.notdef
/.notdef/.notdef/.notdef/ordfeminine/ordmasculine/.notdef/ae/oslash
/questiondown/exclamdown/logicalnot/.notdef/florin/.notdef/.notdef
/guillemotleft/guillemotright/ellipsis/.notdef/Agrave/Atilde/Otilde/OE/oe
/endash/emdash/quotedblleft/quotedblright/quoteleft/quoteright/divide
/.notdef/ydieresis/Ydieresis/fraction/currency/guilsinglleft/guilsinglright
/fi/fl/daggerdbl/periodcentered/quotesinglbase/quotedblbase/perthousand
/Acircumflex/Ecircumflex/Aacute/Edieresis/Egrave/Iacute/Icircumflex
/Idieresis/Igrave/Oacute/Ocircumflex/.notdef/Ograve/Uacute/Ucircumflex
/Ugrave/dotlessi/circumflex/tilde/macron/breve/dotaccent/ring/cedilla
/hungarumlaut/ogonek/caron]
StandardEncoding Re-encode /_AvantGarde-Book /AvantGarde-Book EncodeFont

/RT {SR} def
/LC {} def
/SS {pop} def
/PF {} def
/PC {} def
0.000 0 117.000 90.000 0.000 0.000 14.000 29.000 rect
gsave
104.500 124.000 T translate
0.0 rotate
1 1 scale
12.000 (_AvantGarde-Book) plain F
 /setcmykcolor where
 {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse 

(T) -14.500 4.000 S
(r) -9.500 4.000 S
(u) -6.500 4.000 S
(e) 0.500 4.000 S
grestore
/RT {SR} def
/LC {} def
/SS {pop} def
/PF {} def
/PC {} def
0.000 0 72.000 162.000 0.000 0.000 14.000 31.000 rect
gsave
177.500 79.000 T translate
0.0 rotate
1 1 scale
12.000 (_AvantGarde-Book) fess
 /setcmykcolor where
 {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse 

(R) -15.500 4.000 S
(e) -7.500 4.000 S
(d) 1.500 4.000 S
grestore
/RT {SR} def
/LC {} def
/SS {pop} def
/PF {} def
/PC {} def
0.000 0 45.000 171.000 0.000 0.000 14.000 85.000 rect
gsave
213.500 52.000 T translate
0.0 rotate
1 1 scale
12.000 (_AvantGarde-Book) fess
 /setcmykcolor where
 {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse 

( ) -42.500 4.000 S
(J) -39.500 4.000 S
(a) -33.500 4.000 S
(c) -24.500 4.000 S
(k) -16.500 4.000 S
(e) -10.500 4.000 S
(t) -1.500 4.000 S
( ) 1.500 4.000 S
(C) 4.500 4.000 S
(o) 14.500 4.000 S
(l) 23.500 4.000 S
(o) 25.500 4.000 S
(r) 34.500 4.000 S
grestore
/RT {E} def
/SD {} def
/SS {setlinewidth SD stroke} def
/LC { /setcmykcolor where
 {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse 
} def
/PC { /setcmykcolor where
 {begin 0.000 0.000 0.000 0.000 setcmykcolor end} {1.000 1.000 1.000 setrgbcolor} ifelse 
} def
/PF {gsave fill grestore} def
1.000 0 108.000 252.000 0.000 0.000 35.999 72.000 rect
/RT {SR} def
/LC {} def
/SS {pop} def
/PF {} def
/PC {} def
0.000 0 117.000 261.000 0.000 0.000 27.000 49.000 rect
gsave
285.500 130.500 T translate
0.0 rotate
1 1 scale
12.000 (_AvantGarde-Book) fess
 /setcmykcolor where
 {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse 

( ) -24.500 -3.000 S
( ) -21.500 -3.000 S
(H) -18.500 -3.000 S
(e) -9.500 -3.000 S
(a) -0.500 -3.000 S
(d) 8.500 -3.000 S
 /setcmykcolor where
 {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse 

( ) -24.500 10.000 S
(S) -21.500 10.000 S
(h) -14.500 10.000 S
(a) -7.500 10.000 S
(p) 1.500 10.000 S
(e) 10.500 10.000 S
grestore
/RT {E} def
/SD {} def
/SS {setlinewidth SD stroke} def
/LC { /setcmykcolor where
 {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse 
} def
/PC { /setcmykcolor where
 {begin 0.000 0.000 0.000 0.000 setcmykcolor end} {1.000 1.000 1.000 setrgbcolor} ifelse 
} def
/PF {gsave fill grestore} def
1.000 0 180.000 108.000 0.000 0.000 35.999 72.000 rect
/RT {SR} def
/LC {} def
/SS {pop} def
/PF {} def
/PC {} def
0.000 0 189.000 117.000 0.000 0.000 27.000 49.000 rect
gsave
141.500 202.500 T translate
0.0 rotate
1 1 scale
12.000 (_AvantGarde-Book) fess
 /setcmykcolor where
 {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse 

( ) -24.500 -3.000 S
( ) -21.500 -3.000 S
(B) -18.500 -3.000 S
(o) -10.500 -3.000 S
(d) -1.500 -3.000 S
(y) 7.500 -3.000 S
 /setcmykcolor where
 {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse 

( ) -24.500 10.000 S
(S) -21.500 10.000 S
(h) -14.500 10.000 S
(a) -7.500 10.000 S
(p) 1.500 10.000 S
(e) 10.500 10.000 S
grestore
/RT {E} def
/SD {} def
/SS {setlinewidth SD stroke} def
/LC { /setcmykcolor where
 {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse 
} def
/PC { /setcmykcolor where
 {begin 0.000 0.000 0.000 0.000 setcmykcolor end} {1.000 1.000 1.000 setrgbcolor} ifelse 
} def
/PF {gsave fill grestore} def
1.000 0 180.000 252.000 0.000 0.000 35.999 72.000 rect
/RT {SR} def
/LC {} def
/SS {pop} def
/PF {} def
/PC {} def
0.000 0 189.000 261.000 0.000 0.000 27.000 49.000 rect
gsave
285.500 202.500 T translate
0.0 rotate
1 1 scale
12.000 (_AvantGarde-Book) fess
 /setcmykcolor where
 {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse 

( ) -24.500 -3.000 S
( ) -21.500 -3.000 S
(B) -18.500 -3.000 S
(o) -10.500 -3.000 S
(d) -1.500 -3.000 S
(y) 7.500 -3.000 S
 /setcmykcolor where
 {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse 

( ) -24.500 10.000 S
(S) -21.500 10.000 S
(h) -14.500 10.000 S
(a) -7.500 10.000 S
(p) 1.500 10.000 S
(e) 10.500 10.000 S
grestore
/RT {E} def
/SD {} def
/SS {setlinewidth SD stroke} def
/LC { /setcmykcolor where
 {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse 
} def
/PC { /setcmykcolor where
 {begin 0.000 0.000 0.000 0.000 setcmykcolor end} {1.000 1.000 1.000 setrgbcolor} ifelse 
} def
/PF {gsave fill grestore} def
1.000 0 180.000 396.000 0.000 0.000 35.999 72.000 rect
/RT {SR} def
/LC {} def
/SS {pop} def
/PF {} def
/PC {} def
0.000 0 189.000 405.000 0.000 0.000 27.000 49.000 rect
gsave
429.500 202.500 T translate
0.0 rotate
1 1 scale
12.000 (_AvantGarde-Book) fess
 /setcmykcolor where
 {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse 

( ) -24.500 -3.000 S
( ) -21.500 -3.000 S
(B) -18.500 -3.000 S
(o) -10.500 -3.000 S
(d) -1.500 -3.000 S
(y) 7.500 -3.000 S
 /setcmykcolor where
 {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse 

( ) -24.500 10.000 S
(S) -21.500 10.000 S
(h) -14.500 10.000 S
(a) -7.500 10.000 S
(p) 1.500 10.000 S
(e) 10.500 10.000 S
grestore
/ArrowType{ 
1.000 setlinewidth
288.000 180.000 moveto
/Triangular 14.099 7.049 false 270.019 DrawArrowHead
} bind def
/SD {} def
/SS {setlinewidth SD stroke} def
/LC { /setcmykcolor where
 {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse 
} def
/PF {gsave fill grestore} def
/SS {setlinewidth SD stroke} def
1.000 287.999 178.000 288.000 144.000 Line
/RT {SR} def
/LC {} def
/SS {pop} def
/PF {} def
/PC {} def
0.000 0 210.000 171.000 0.000 0.000 14.000 45.000 rect
gsave
193.500 217.000 T translate
0.0 rotate
1 1 scale
12.000 (_AvantGarde-Book) fess
 /setcmykcolor where
 {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse 

(R) -22.500 4.000 S
(o) -14.500 4.000 S
(u) -5.500 4.000 S
(n) 1.500 4.000 S
(d) 8.500 4.000 S
grestore
/RT {SR} def
/LC {} def
/SS {pop} def
/PF {} def
/PC {} def
0.000 0 228.000 261.000 0.000 0.000 14.000 52.000 rect
gsave
287.000 235.000 T translate
0.0 rotate
1 1 scale
12.000 (_AvantGarde-Book) fess
 /setcmykcolor where
 {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse 

( ) -25.500 4.000 S
(S) -22.500 4.000 S
(q) -15.500 4.000 S
(u) -6.500 4.000 S
(a) 0.500 4.000 S
(r) 9.500 4.000 S
(e) 12.500 4.000 S
grestore
/RT {SR} def
/LC {} def
/SS {pop} def
/PF {} def
/PC {} def
0.000 0 210.000 351.000 0.000 0.000 14.000 61.000 rect
gsave
381.500 217.000 T translate
0.0 rotate
1 1 scale
12.000 (_AvantGarde-Book) fess
 /setcmykcolor where
 {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse 

(O) -30.500 4.000 S
(c) -19.500 4.000 S
(t) -11.500 4.000 S
(a) -8.500 4.000 S
(g) 0.500 4.000 S
(o) 9.500 4.000 S
(n) 18.500 4.000 S
grestore
/RT {SR} def
/LC {} def
/SS {pop} def
/PF {} def
/PC {} def
0.000 0 144.000 171.000 0.000 0.000 14.000 45.000 rect
gsave
193.500 151.000 T translate
0.0 rotate
1 1 scale
12.000 (_AvantGarde-Book) fess
 /setcmykcolor where
 {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse 

(R) -22.500 4.000 S
(o) -14.500 4.000 S
(u) -5.500 4.000 S
(n) 1.500 4.000 S
(d) 8.500 4.000 S
grestore
/RT {SR} def
/LC {} def
/SS {pop} def
/PF {} def
/PC {} def
0.000 0 153.000 261.000 0.000 0.000 14.000 52.000 rect
gsave
287.000 160.000 T translate
0.0 rotate
1 1 scale
12.000 (_AvantGarde-Book) fess
 /setcmykcolor where
 {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse 

( ) -25.500 4.000 S
(S) -22.500 4.000 S
(q) -15.500 4.000 S
(u) -6.500 4.000 S
(a) 0.500 4.000 S
(r) 9.500 4.000 S
(e) 12.500 4.000 S
grestore
/RT {SR} def
/LC {} def
/SS {pop} def
/PF {} def
/PC {} def
0.000 0 144.000 351.000 0.000 0.000 14.000 61.000 rect
gsave
381.500 151.000 T translate
0.0 rotate
1 1 scale
12.000 (_AvantGarde-Book) fess
 /setcmykcolor where
 {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse 

(O) -30.500 4.000 S
(c) -19.500 4.000 S
(t) -11.500 4.000 S
(a) -8.500 4.000 S
(g) 0.500 4.000 S
(o) 9.500 4.000 S
(n) 18.500 4.000 S
grestore
/ArrowType{ 
1.000 setlinewidth
144.000 108.000 moveto
/Triangular 14.099 7.049 false 333.458 DrawArrowHead
} bind def
/SD {} def
/SS {setlinewidth SD stroke} def
/LC { /setcmykcolor where
 {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse 
} def
/PF {gsave fill grestore} def
/SS {setlinewidth SD stroke} def
1.000 145.788 107.105 216.000 72.000 Line
/RT {SR} def
/SD {} def
/SS {setlinewidth SD stroke} def
/LC { /setcmykcolor where
 {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse 
} def
/PC { /setcmykcolor where
 {begin 0.000 0.000 0.000 0.000 setcmykcolor end} {1.000 1.000 1.000 setrgbcolor} ifelse 
} def
/PF {gsave fill grestore} def
1.000 0 252.000 252.000 0.000 0.000 36.000 72.000 rect
/RT {SR} def
/LC {} def
/SS {pop} def
/PF {} def
/PC {} def
0.000 0 261.000 270.000 0.000 0.000 14.000 29.000 rect
gsave
284.500 268.000 T translate
0.0 rotate
1 1 scale
12.000 (_AvantGarde-Book) fess
 /setcmykcolor where
 {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse 

(T) -14.500 4.000 S
(r) -9.500 4.000 S
(u) -6.500 4.000 S
(e) 0.500 4.000 S
grestore
/ArrowType{ 
1.000 setlinewidth
288.000 252.000 moveto
/Triangular 14.099 7.049 false 270.019 DrawArrowHead
} bind def
/SD {} def
/SS {setlinewidth SD stroke} def
/LC { /setcmykcolor where
 {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse 
} def
/PF {gsave fill grestore} def
/SS {setlinewidth SD stroke} def
1.000 287.999 250.000 288.000 216.000 Line
/RT {SR} def
/SD {} def
/SS {setlinewidth SD stroke} def
/LC { /setcmykcolor where
 {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse 
} def
/PC { /setcmykcolor where
 {begin 0.000 0.000 0.000 0.000 setcmykcolor end} {1.000 1.000 1.000 setrgbcolor} ifelse 
} def
/PF {gsave fill grestore} def
1.000 0 324.000 252.000 0.000 0.000 36.000 72.000 rect
/RT {SR} def
/LC {} def
/SS {pop} def
/PF {} def
/PC {} def
0.000 0 333.000 270.000 0.000 0.000 14.000 36.000 rect
gsave
288.000 340.000 T translate
0.0 rotate
1 1 scale
12.000 (_AvantGarde-Book) fess
 /setcmykcolor where
 {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse 

(F) -17.500 4.000 S
(a) -11.500 4.000 S
(l) -2.500 4.000 S
(s) -0.500 4.000 S
(e) 4.500 4.000 S
grestore
/ArrowType{ 
1.000 setlinewidth
252.000 126.000 moveto
/Triangular 14.099 7.049 false 180.012 DrawArrowHead
} bind def
/SD {} def
/SS {setlinewidth SD stroke} def
/LC { /setcmykcolor where
 {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse 
} def
/PF {gsave fill grestore} def
/SS {setlinewidth SD stroke} def
1.000 250.000 126.000 234.000 126.000 Line
currentlinecap
0 setlinecap
/RT { 270.000 180.000 A1 gsave} def
/SD {} def
/SS {setlinewidth SD stroke} def
/LC { /setcmykcolor where
 {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse 
} def
/PC {} def
/PF {} def
1.000 0 18.000 216.000 0.000 0.000 108.000 36.000 rect
setlinecap
/ArrowType{ 
1.000 setlinewidth
270.000 108.000 moveto
/Triangular 14.099 7.049 false 213.706 DrawArrowHead
} bind def
/SD {} def
/SS {setlinewidth SD stroke} def
/LC { /setcmykcolor where
 {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse 
} def
/PF {gsave fill grestore} def
/SS {setlinewidth SD stroke} def
1.000 268.335 106.890 216.000 72.000 Line
/ArrowType{ } def
/SD {} def
/SS {setlinewidth SD stroke} def
/LC { /setcmykcolor where
 {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse 
} def
/PF {gsave fill grestore} def
/SS {setlinewidth SD stroke} def
1.000 252.000 72.000 216.000 72.000 Line
currentlinecap
0 setlinecap
/RT { 90.000 0.000 A1 gsave} def
/SD {} def
/SS {setlinewidth SD stroke} def
/LC { /setcmykcolor where
 {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse 
} def
/PC {} def
/PF {} def
1.000 0 72.000 216.000 0.000 0.000 36.000 72.000 rect
setlinecap
/ArrowType{ 
1.000 setlinewidth
288.000 108.000 moveto
/Triangular 14.099 7.049 false 270.019 DrawArrowHead
} bind def
/SD {} def
/SS {setlinewidth SD stroke} def
/LC { /setcmykcolor where
 {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse 
} def
/PF {gsave fill grestore} def
/SS {setlinewidth SD stroke} def
1.000 287.999 106.000 288.000 90.000 Line
currentlinecap
0 setlinecap
/RT { 360.000 270.000 A1 gsave} def
/SD {} def
/SS {setlinewidth SD stroke} def
/LC { /setcmykcolor where
 {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse 
} def
/PC {} def
/PF {} def
1.000 0 216.000 216.000 0.000 0.000 72.000 144.000 rect
setlinecap
currentlinecap
0 setlinecap
/RT { 90.000 0.000 A1 gsave} def
/SD {} def
/SS {setlinewidth SD stroke} def
/LC { /setcmykcolor where
 {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse 
} def
/PC {} def
/PF {} def
1.000 0 216.000 216.000 0.000 0.000 72.000 144.000 rect
setlinecap
/ArrowType{ 
1.000 setlinewidth
252.000 324.000 moveto
/Triangular 14.099 7.049 false 206.580 DrawArrowHead
} bind def
/SD {} def
/SS {setlinewidth SD stroke} def
/LC { /setcmykcolor where
 {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse 
} def
/PF {gsave fill grestore} def
/SS {setlinewidth SD stroke} def
1.000 250.211 323.105 234.000 315.000 Line
currentlinecap
0 setlinecap
/RT { 270.000 180.000 A1 gsave} def
/SD {} def
/SS {setlinewidth SD stroke} def
/LC { /setcmykcolor where
 {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse 
} def
/PC {} def
/PF {} def
1.000 0 189.000 216.000 0.000 0.000 126.000 36.000 rect
setlinecap
/ArrowType{ 
1.000 setlinewidth
324.000 324.000 moveto
/Triangular 14.099 7.049 false 333.458 DrawArrowHead
} bind def
/SD {} def
/SS {setlinewidth SD stroke} def
/LC { /setcmykcolor where
 {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse 
} def
/PF {gsave fill grestore} def
/SS {setlinewidth SD stroke} def
1.000 325.788 323.105 342.000 315.000 Line
currentlinecap
0 setlinecap
/RT { 180.000 90.000 A1 gsave} def
/SD {} def
/SS {setlinewidth SD stroke} def
/LC { /setcmykcolor where
 {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse 
} def
/PC {} def
/PF {} def
1.000 0 189.000 324.000 0.000 0.000 126.000 36.000 rect
setlinecap
/ArrowType{ 
1.000 setlinewidth
144.000 180.000 moveto
/Triangular 14.099 7.049 false 345.988 DrawArrowHead
} bind def
/SD {} def
/SS {setlinewidth SD stroke} def
/LC { /setcmykcolor where
 {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse 
} def
/PF {gsave fill grestore} def
/SS {setlinewidth SD stroke} def
1.000 145.940 179.514 288.000 144.000 Line
/ArrowType{ 
1.000 setlinewidth
432.000 180.000 moveto
/Triangular 14.099 7.049 false 194.050 DrawArrowHead
} bind def
/SD {} def
/SS {setlinewidth SD stroke} def
/LC { /setcmykcolor where
 {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse 
} def
/PF {gsave fill grestore} def
/SS {setlinewidth SD stroke} def
1.000 430.059 179.514 288.000 144.000 Line
/ArrowType{ 
1.000 setlinewidth
252.000 252.000 moveto
/Triangular 14.099 7.049 false 198.449 DrawArrowHead
} bind def
/SD {} def
/SS {setlinewidth SD stroke} def
/LC { /setcmykcolor where
 {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse 
} def
/PF {gsave fill grestore} def
/SS {setlinewidth SD stroke} def
1.000 250.102 251.367 144.000 216.000 Line
/ArrowType{ 
1.000 setlinewidth
324.000 252.000 moveto
/Triangular 14.099 7.049 false 341.589 DrawArrowHead
} bind def
/SD {} def
/SS {setlinewidth SD stroke} def
/LC { /setcmykcolor where
 {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse 
} def
/PF {gsave fill grestore} def
/SS {setlinewidth SD stroke} def
1.000 325.897 251.367 432.000 216.000 Line
/ArrowType{ 
1.000 setlinewidth
252.000 333.000 moveto
/Triangular 14.099 7.049 false 180.012 DrawArrowHead
} bind def
/SD {} def
/SS {setlinewidth SD stroke} def
/LC { /setcmykcolor where
 {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse 
} def
/PF {gsave fill grestore} def
/SS {setlinewidth SD stroke} def
1.000 250.000 333.000 216.000 333.000 Line
/ArrowType{ 
1.000 setlinewidth
252.000 351.000 moveto
/Triangular 14.099 7.049 false 180.012 DrawArrowHead
} bind def
/SD {} def
/SS {setlinewidth SD stroke} def
/LC { /setcmykcolor where
 {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse 
} def
/PF {gsave fill grestore} def
/SS {setlinewidth SD stroke} def
1.000 250.000 351.000 180.000 351.000 Line
currentlinecap
0 setlinecap
/RT { 270.000 180.000 A1 gsave} def
/SD {} def
/SS {setlinewidth SD stroke} def
/LC { /setcmykcolor where
 {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse 
} def
/PC {} def
/PF {} def
1.000 0 99.000 144.000 0.000 0.000 234.000 144.000 rect
setlinecap
currentlinecap
0 setlinecap
/RT { 270.000 180.000 A1 gsave} def
/SD {} def
/SS {setlinewidth SD stroke} def
/LC { /setcmykcolor where
 {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse 
} def
/PC {} def
/PF {} def
1.000 0 81.000 135.000 0.000 0.000 270.000 90.000 rect
setlinecap
/ArrowType{ 
1.000 setlinewidth
324.000 333.000 moveto
/Triangular 14.099 7.049 false 360.025 DrawArrowHead
} bind def
/SD {} def
/SS {setlinewidth SD stroke} def
/LC { /setcmykcolor where
 {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse 
} def
/PF {gsave fill grestore} def
/SS {setlinewidth SD stroke} def
1.000 326.000 332.999 360.000 333.000 Line
/ArrowType{ 
1.000 setlinewidth
324.000 351.000 moveto
/Triangular 14.099 7.049 false 360.025 DrawArrowHead
} bind def
/SD {} def
/SS {setlinewidth SD stroke} def
/LC { /setcmykcolor where
 {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse 
} def
/PF {gsave fill grestore} def
/SS {setlinewidth SD stroke} def
1.000 326.000 350.999 396.000 351.000 Line
currentlinecap
0 setlinecap
/RT { 180.000 90.000 A1 gsave} def
/SD {} def
/SS {setlinewidth SD stroke} def
/LC { /setcmykcolor where
 {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse 
} def
/PC {} def
/PF {} def
1.000 0 99.000 288.000 0.000 0.000 234.000 144.000 rect
setlinecap
currentlinecap
0 setlinecap
/RT { 180.000 90.000 A1 gsave} def
/SD {} def
/SS {setlinewidth SD stroke} def
/LC { /setcmykcolor where
 {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse 
} def
/PC {} def
/PF {} def
1.000 0 81.000 351.000 0.000 0.000 270.000 90.000 rect
setlinecap
restore
end
%%EndDocument
 @endspecial 479 1597 a(Figure)f(9:)k(A)13 b(decision)i(graph)e(for)h(the)g
(1)1136 1581 y Fc(st)1180 1597 y Fr(Monk's)g(data)f(set)0 1807
y Fk(4.2)56 b(Protein)18 b(Data)g(Set)62 1896 y Fr(W)m(e)c(tested)i(decision)
f(graphs)f(on)h(some)e(data)h(sets)i(generated)g(from)c(a)i(protein)h
(structure)h(database)f([8)o(].)k(The)c(data)0 1946 y(consisted)f(of)e(amino)
e(acid)i(c)o(hains)h(with)f(a)g(secondary)i(structure)g(sp)q(eci\014ed)g(at)f
(eac)o(h)g(p)q(oin)o(t.)k(Microbiologists)11 b(can)i(deter-)0
1996 y(mine)f(the)j(amino)c(acid)j(c)o(hain)f(of)g(a)h(protein,)f(but)h
(\014nding)f(the)i(secondary)g(structure)h(\()p Fi(f)d Fj(E)r(xtended;)20
b(H)s(el)q(ix;)g(O)q(ther)15 b Fi(g)p Fr(\))0 2046 y(whic)o(h)e(is)g(related)
h(to)f(the)h(shap)q(e)g(of)f(the)h(protein)f(is)g(quite)h(di\016cult.)j(W)m
(e)c(constructed)i(decision)f(graphs)f(that)h(predicted)0 2095
y(the)h(secondary)g(structure)h(at)e(a)g(p)q(oin)o(t)g(in)g(a)g(protein)g(b)o
(y)g(using)g(a)g(windo)o(w)f(\(cen)o(tered)k(at)d(the)h(p)q(oin)o(t)f(of)f
(in)o(terest\))j(of)d(the)0 2145 y(amino)f(acid)h(c)o(hain)h(as)g
(attributes.)62 2202 y(Figure)e(10)g(sho)o(ws)g(an)g(abbreviated)g(form)e(of)
i(decision)g(graph)g(generated)h(when)f(a)g(windo)o(w)f(of)g(the)i(amino)d
(acid)h(c)o(hain)0 2252 y(w)o(as)h(used)i(for)e(attributes.)19
b(In)12 b(this)h(example,)e(the)i(arit)o(y)f(of)g(the)h(7)f(attributes)i(is)e
(20,)g(and)g(hence)i(decision)f(tree)h(inference)0 2302 y(sc)o(hemes)h(w)o
(ould)f(quic)o(kly)g(fragmen)o(t)g(the)h(data)g(in)o(to)f(small)e(sets)17
b(where)f(learning)e(w)o(ould)g(b)q(e)h(di\016cult.)20 b(F)m(or)15
b(example,)e(a)0 2351 y(complete)h(heigh)o(t)h(3)g(tree)h(w)o(ould)e
(partition)g(the)i(data)e(in)o(to)g(8000)g(subsets.)23 b(Eac)o(h)15
b(leaf)g(of)f(a)h(heigh)o(t)f(3)h(tree)h(w)o(ould)e(ha)o(v)o(e)0
2401 y(little)f(data)h(asso)q(ciated)g(with)g(it,)f(and)h(the)g(tree)h(w)o
(ould)e(b)q(e)i(unin)o(telligible)d(to)i(biologists.)62 2458
y(The)e(decision)f(graph)f(in)h(Figure)g(10)f(displa)o(ys)h(splits)g(where)h
(subsets)g(of)f(the)g(amino)e(acids')h(v)n(alues)h(ha)o(v)o(e)g(b)q(een)h
(formed.)0 2508 y(F)m(or)h(example,)g(the)h(ro)q(ot)g(of)f(the)i(graph)e
(splits)h(the)h(data)e(in)o(to)h(4)f(subsets:)194 2558 y Fi(f)h
Fj(A;)7 b(E)r(;)g(K)q(;)g(Q)12 b Fi(g)55 b(f)14 b Fj(F)q(;)7
b(I)s(;)g(L;)g(V)22 b Fi(g)55 b(f)14 b Fj(C)q(;)7 b(D)q(;)g(G;)g(H)q(;)f(M)r
(;)h(N)r(;)g(R;)g(S;)g(T)s(;)g(W)o(;)f(Y)20 b Fi(g)14 b Fj(and)f
Fi(f)h Fj(P)19 b Fi(g)0 2607 y Fr(The)f(subsets)h(of)e(the)h(amino)d(acids')i
(v)n(alues)g(w)o(ere)i(found,)e(not)g(b)o(y)h(an)f(exhaustiv)o(e)h(searc)o
(h,)h(but)e(b)o(y)g(successiv)o(e)j(joins.)0 2657 y(After)e(the)g(\014rst)g
(split)e(\(on)h(attribute)h(4)f(the)h(cen)o(tral)f(amino)e(acid)i(of)g(the)h
(windo)o(w\))e(the)i(graph)f(had)g(20)f(lea)o(v)o(es.)29 b(The)0
2707 y(Gro)o(w)15 b(Graph)g(pro)q(cedure)i(explored)f(the)h(p)q(ossibilit)o
(y)d(of)h(eac)o(h)h(leaf)f(joining)f(with)h(another)h(leaf,)e(whic)o(h)i(in)f
(the)h(case)h(of)0 2757 y(20)e(lea)o(v)o(es)h(giv)o(es)g(190)f(cases)i(to)f
(explore.)24 b(In)16 b(general,)g(when)g(there)h(are)f Fj(N)21
b Fr(lea)o(v)o(es,)16 b(the)g(Gro)o(w)f(Graph)h(pro)q(cedure)h(will)0
2811 y(explore)149 2791 y Fc(N)g Fb(\002)d Fh(\()p Fc(N)s Fb(\000)p
Fh(1\))p 149 2802 181 2 v 231 2825 a(2)349 2811 y Fr(p)q(ossible)g(joins.)954
2936 y(10)p eop
%%Page: 11 11
bop 382 1360 a @beginspecial 124 @llx 213 @lly 489 @urx 616
@ury 2880 @rwi @setspecial
%%BeginDocument: Psubsets.ps

50 dict begin

/arrowHeight 8 def
/arrowWidth 4 def
/none null def
/numGraphicParameters 17 def
/stringLimit 65535 def

/Begin {
save
numGraphicParameters dict begin
} def

/End {
end
restore
} def

/SetB {
dup type /nulltype eq {
pop
false /brushRightArrow idef
false /brushLeftArrow idef
true /brushNone idef
} {
/brushDashOffset idef
/brushDashArray idef
0 ne /brushRightArrow idef
0 ne /brushLeftArrow idef
/brushWidth idef
false /brushNone idef
} ifelse
} def

/SetCFg {
/fgblue idef
/fggreen idef
/fgred idef
} def

/SetCBg {
/bgblue idef
/bggreen idef
/bgred idef
} def

/SetF {
/printSize idef
/printFont idef
} def

/SetP {
dup type /nulltype eq {
pop true /patternNone idef
} {
/patternGrayLevel idef
patternGrayLevel -1 eq {
/patternString idef
} if
false /patternNone idef
} ifelse
} def

/BSpl {
0 begin
storexyn
newpath
n 1 gt {
0 0 0 0 0 0 1 1 true subspline
n 2 gt {
0 0 0 0 1 1 2 2 false subspline
1 1 n 3 sub {
/i exch def
i 1 sub dup i dup i 1 add dup i 2 add dup false subspline
} for
n 3 sub dup n 2 sub dup n 1 sub dup 2 copy false subspline
} if
n 2 sub dup n 1 sub dup 2 copy 2 copy false subspline
patternNone not brushLeftArrow not brushRightArrow not and and { ifill } if
brushNone not { istroke } if
0 0 1 1 leftarrow
n 2 sub dup n 1 sub dup rightarrow
} if
end
} dup 0 4 dict put def

/Circ {
newpath
0 360 arc
patternNone not { ifill } if
brushNone not { istroke } if
} def

/CBSpl {
0 begin
dup 2 gt {
storexyn
newpath
n 1 sub dup 0 0 1 1 2 2 true subspline
1 1 n 3 sub {
/i exch def
i 1 sub dup i dup i 1 add dup i 2 add dup false subspline
} for
n 3 sub dup n 2 sub dup n 1 sub dup 0 0 false subspline
n 2 sub dup n 1 sub dup 0 0 1 1 false subspline
patternNone not { ifill } if
brushNone not { istroke } if
} {
Poly
} ifelse
end
} dup 0 4 dict put def

/Elli {
0 begin
newpath
4 2 roll
translate
scale
0 0 1 0 360 arc
patternNone not { ifill } if
brushNone not { istroke } if
end
} dup 0 1 dict put def

/Line {
0 begin
2 storexyn
newpath
x 0 get y 0 get moveto
x 1 get y 1 get lineto
brushNone not { istroke } if
0 0 1 1 leftarrow
0 0 1 1 rightarrow
end
} dup 0 4 dict put def

/MLine {
0 begin
storexyn
newpath
n 1 gt {
x 0 get y 0 get moveto
1 1 n 1 sub {
/i exch def
x i get y i get lineto
} for
patternNone not brushLeftArrow not brushRightArrow not and and { ifill } if
brushNone not { istroke } if
0 0 1 1 leftarrow
n 2 sub dup n 1 sub dup rightarrow
} if
end
} dup 0 4 dict put def

/Poly {
3 1 roll
newpath
moveto
-1 add
{ lineto } repeat
closepath
patternNone not { ifill } if
brushNone not { istroke } if
} def

/Rect {
0 begin
/t exch def
/r exch def
/b exch def
/l exch def
newpath
l b moveto
l t lineto
r t lineto
r b lineto
closepath
patternNone not { ifill } if
brushNone not { istroke } if
end
} dup 0 4 dict put def

/Text {
ishow
} def

/idef {
dup where { pop pop pop } { exch def } ifelse
} def

/ifill {
0 begin
gsave
patternGrayLevel -1 ne {
fgred bgred fgred sub patternGrayLevel mul add
fggreen bggreen fggreen sub patternGrayLevel mul add
fgblue bgblue fgblue sub patternGrayLevel mul add setrgbcolor
eofill
} {
eoclip
originalCTM setmatrix
pathbbox /t exch def /r exch def /b exch def /l exch def
/w r l sub ceiling cvi def
/h t b sub ceiling cvi def
/imageByteWidth w 8 div ceiling cvi def
/imageHeight h def
bgred bggreen bgblue setrgbcolor
eofill
fgred fggreen fgblue setrgbcolor
w 0 gt h 0 gt and {
l b translate w h scale
w h true [w 0 0 h neg 0 h] { patternproc } imagemask
} if
} ifelse
grestore
end
} dup 0 8 dict put def

/istroke {
gsave
brushDashOffset -1 eq {
[] 0 setdash
1 setgray
} {
brushDashArray brushDashOffset setdash
fgred fggreen fgblue setrgbcolor
} ifelse
brushWidth setlinewidth
originalCTM setmatrix
stroke
grestore
} def

/ishow {
0 begin
gsave
fgred fggreen fgblue setrgbcolor
/fontDict printFont findfont printSize scalefont dup setfont def
/descender fontDict begin 0 [FontBBox] 1 get FontMatrix end
transform exch pop def
/vertoffset 0 descender sub printSize sub printFont /Courier ne
printFont /Courier-Bold ne and { 1 add } if def {
0 vertoffset moveto show
/vertoffset vertoffset printSize sub def
} forall
grestore
end
} dup 0 3 dict put def

/patternproc {
0 begin
/patternByteLength patternString length def
/patternHeight patternByteLength 8 mul sqrt cvi def
/patternWidth patternHeight def
/patternByteWidth patternWidth 8 idiv def
/imageByteMaxLength imageByteWidth imageHeight mul
stringLimit patternByteWidth sub min def
/imageMaxHeight imageByteMaxLength imageByteWidth idiv patternHeight idiv
patternHeight mul patternHeight max def
/imageHeight imageHeight imageMaxHeight sub store
/imageString imageByteWidth imageMaxHeight mul patternByteWidth add string def
0 1 imageMaxHeight 1 sub {
/y exch def
/patternRow y patternByteWidth mul patternByteLength mod def
/patternRowString patternString patternRow patternByteWidth getinterval def
/imageRow y imageByteWidth mul def
0 patternByteWidth imageByteWidth 1 sub {
/x exch def
imageString imageRow x add patternRowString putinterval
} for
} for
imageString
end
} dup 0 12 dict put def

/min {
dup 3 2 roll dup 4 3 roll lt { exch } if pop
} def

/max {
dup 3 2 roll dup 4 3 roll gt { exch } if pop
} def

/arrowhead {
0 begin
transform originalCTM itransform
/taily exch def
/tailx exch def
transform originalCTM itransform
/tipy exch def
/tipx exch def
/dy tipy taily sub def
/dx tipx tailx sub def
/angle dx 0 ne dy 0 ne or { dy dx atan } { 90 } ifelse def
gsave
originalCTM setmatrix
tipx tipy translate
angle rotate
newpath
0 0 moveto
arrowHeight neg arrowWidth 2 div lineto
arrowHeight neg arrowWidth 2 div neg lineto
closepath
patternNone not {
originalCTM setmatrix
/padtip arrowHeight 2 exp 0.25 arrowWidth 2 exp mul add sqrt brushWidth mul
arrowWidth div def
/padtail brushWidth 2 div def
tipx tipy translate
angle rotate
padtip 0 translate
arrowHeight padtip add padtail add arrowHeight div dup scale
arrowheadpath
ifill
} if
brushNone not {
originalCTM setmatrix
tipx tipy translate
angle rotate
arrowheadpath
istroke
} if
grestore
end
} dup 0 9 dict put def

/arrowheadpath {
newpath
0 0 moveto
arrowHeight neg arrowWidth 2 div lineto
arrowHeight neg arrowWidth 2 div neg lineto
closepath
} def

/leftarrow {
0 begin
y exch get /taily exch def
x exch get /tailx exch def
y exch get /tipy exch def
x exch get /tipx exch def
brushLeftArrow { tipx tipy tailx taily arrowhead } if
end
} dup 0 4 dict put def

/rightarrow {
0 begin
y exch get /tipy exch def
x exch get /tipx exch def
y exch get /taily exch def
x exch get /tailx exch def
brushRightArrow { tipx tipy tailx taily arrowhead } if
end
} dup 0 4 dict put def

/midpoint {
0 begin
/y1 exch def
/x1 exch def
/y0 exch def
/x0 exch def
x0 x1 add 2 div
y0 y1 add 2 div
end
} dup 0 4 dict put def

/thirdpoint {
0 begin
/y1 exch def
/x1 exch def
/y0 exch def
/x0 exch def
x0 2 mul x1 add 3 div
y0 2 mul y1 add 3 div
end
} dup 0 4 dict put def

/subspline {
0 begin
/movetoNeeded exch def
y exch get /y3 exch def
x exch get /x3 exch def
y exch get /y2 exch def
x exch get /x2 exch def
y exch get /y1 exch def
x exch get /x1 exch def
y exch get /y0 exch def
x exch get /x0 exch def
x1 y1 x2 y2 thirdpoint
/p1y exch def
/p1x exch def
x2 y2 x1 y1 thirdpoint
/p2y exch def
/p2x exch def
x1 y1 x0 y0 thirdpoint
p1x p1y midpoint
/p0y exch def
/p0x exch def
x2 y2 x3 y3 thirdpoint
p2x p2y midpoint
/p3y exch def
/p3x exch def
movetoNeeded { p0x p0y moveto } if
p1x p1y p2x p2y p3x p3y curveto
end
} dup 0 17 dict put def

/storexyn {
/n exch def
/y n array def
/x n array def
n 1 sub -1 0 {
/i exch def
y i 3 2 roll put
x i 3 2 roll put
} for
} def




Begin
[ .8 0 0 .8 0 0 ] concat
/originalCTM matrix currentmatrix def

Begin %I Elli
1 0 0 [] 0 SetB
0 0 0 SetCFg
1 1 1 SetCBg
none SetP %I p n
[ 1.24691 0 0 1.2439 183.062 33.0975 ] concat
141 570 40 20 Elli
End

Begin %I Text
0 0 0 SetCFg
/Courier 10 SetF
[ 1.64865 0 0 2.87081 329 753.837 ] concat
[
(Attr 5)
] Text
End

Begin %I Rect
1 0 0 [] 0 SetB
0 0 0 SetCFg
1 1 1 SetCBg
none SetP %I p n
[ 1 0 0 1 -161 148 ] concat
320 441 410 480 Rect
End

Begin %I Elli
1 0 0 [] 0 SetB
0 0 0 SetCFg
1 1 1 SetCBg
none SetP %I p n
[ 1.24691 0 0 1.2439 322.062 -105.902 ] concat
141 570 40 20 Elli
End

Begin %I Text
0 0 0 SetCFg
/Courier 10 SetF
[ 1.6722 0 0 2.72727 469 613.545 ] concat
[
(Attr 4)
] Text
End

Begin %I Elli
1 0 0 [] 0 SetB
0 0 0 SetCFg
1 1 1 SetCBg
none SetP %I p n
[ 1.24691 0 0 1.2439 261.062 -225.902 ] concat
141 570 40 20 Elli
End

Begin %I Text
0 0 0 SetCFg
/Courier 10 SetF
[ 1.64865 0 0 2.90909 408 496.091 ] concat
[
(Attr 3)
] Text
End

Begin %I Elli
1 0 0 [] 0 SetB
0 0 0 SetCFg
1 1 1 SetCBg
none SetP %I p n
[ 1.24691 0 0 1.2439 143.062 -354.902 ] concat
141 570 40 20 Elli
End

Begin %I Text
0 0 0 SetCFg
/Courier 10 SetF
[ 1.6722 0 0 2.72727 290 364.545 ] concat
[
(Attr 4)
] Text
End

Begin %I Text
0 0 0 SetCFg
/Courier 10 SetF
[ 1.73684 0 0 2 299 697 ] concat
[
(P)
] Text
End

Begin %I Text
0 0 0 SetCFg
/Courier 10 SetF
[ 1.65672 0 0 1.81818 426 695.364 ] concat
[
(CDGHMNRSTWY)
] Text
End

Begin %I Text
0 0 0 SetCFg
/Courier 10 SetF
[ 1.64 0 0 2 388 537 ] concat
[
(FILV)
] Text
End

Begin %I Text
0 0 0 SetCFg
/Courier 10 SetF
[ 1.64 0 0 2 468 537 ] concat
[
(FQVY)
] Text
End

Begin %I Text
0 0 0 SetCFg
/Courier 10 SetF
[ 1.4918 0 0 1.81818 359 396.364 ] concat
[
(ACDEHKNQRW)
] Text
End

Begin %I Text
0 0 0 SetCFg
/Courier 10 SetF
[ 1.64 0 0 1.81818 289 535.364 ] concat
[
(AEKQ)
] Text
End

Begin %I Line
1 0 1 [] 0 SetB
0 0 0 SetCFg
1 1 1 SetCBg
none SetP %I p n
[ 1 0 0 1 148 197 ] concat
211 520 350 431 Line
End

Begin %I Line
1 0 1 [] 0 SetB
0 0 0 SetCFg
1 1 1 SetCBg
none SetP %I p n
[ 1 0 0 1 148 197 ] concat
211 520 290 311 Line
End

Begin %I Line
1 0 1 [] 0 SetB
0 0 0 SetCFg
1 1 1 SetCBg
none SetP %I p n
[ 1 0 0 1 148 197 ] concat
350 381 300 311 Line
End

Begin %I Line
1 0 1 [] 0 SetB
0 0 0 SetCFg
1 1 1 SetCBg
none SetP %I p n
[ 1 0 0 1 148 197 ] concat
211 520 171 182 Line
End

Begin %I Line
1 0 1 [] 0 SetB
0 0 0 SetCFg
1 1 1 SetCBg
none SetP %I p n
[ 1 0 0 1 148 197 ] concat
290 261 181 182 Line
End

Begin %I Line
1 0 1 [] 0 SetB
0 0 0 SetCFg
1 1 1 SetCBg
none SetP %I p n
[ 1 0 0 1 148 197 ] concat
211 520 101 431 Line
End

Begin %I Text
0 0 0 SetCFg
/Courier 10 SetF
[ 1.64516 0 0 1.81818 179 615.364 ] concat
[
(Other)
] Text
End

Begin %I Line
1 0 1 [] 0 SetB
0 0 0 SetCFg
1 1 1 SetCBg
none SetP %I p n
[ 1 0 0 1 148 197 ] concat
350 381 410 311 Line
End

Begin %I Text
0 0 0 SetCFg
/Courier 10 SetF
[ 1.63158 0 0 2.72727 528 394.545 ] concat
[
(...)
] Text
End

Begin %I Text
0 0 0 SetCFg
/Courier 10 SetF
[ 1.63158 0 0 2.72727 568 523.545 ] concat
[
(...)
] Text
End

Begin %I Line
1 0 1 [] 0 SetB
0 0 0 SetCFg
1 1 1 SetCBg
none SetP %I p n
[ 1 0 0 1 206 197 ] concat
292 381 402 311 Line
End

Begin %I Line
1 0 1 [] 0 SetB
0 0 0 SetCFg
1 1 1 SetCBg
none SetP %I p n
[ 1 0 0 1 206 197 ] concat
232 261 312 182 Line
End

Begin %I Line
1 0 1 [] 0 SetB
0 0 0 SetCFg
1 1 1 SetCBg
none SetP %I p n
[ 1 0 0 1 206 197 ] concat
232 261 362 182 Line
End

Begin %I Text
0 0 0 SetCFg
/Courier 10 SetF
[ 1.63158 0 0 2.72727 309 294.545 ] concat
[
(...)
] Text
End

Begin %I Line
1 0 1 [] 0 SetB
0 0 0 SetCFg
1 1 1 SetCBg
none SetP %I p n
[ 1 0 0 1 206 197 ] concat
113 132 93 82 Line
End

Begin %I Line
1 0 1 [] 0 SetB
0 0 0 SetCFg
1 1 1 SetCBg
none SetP %I p n
[ 1 0 0 1 206 197 ] concat
113 132 133 82 Line
End

End %I eop

showpage


end
%%EndDocument
 @endspecial 299 1463 a Fr(Figure)14 b(10:)k(A)c(abbreviated)g(decision)g
(graph)g(for)f(the)i(protein)f(structure)i(data)e(set)0 1589
y Fl(5)69 b(Determining)20 b(the)i(T)n(yp)r(e)h(of)g(Mo)r(del)0
1680 y Fr(The)14 b(reader)h(will)e(note)h(that)g(the)h(decision)f(graph)f(sc)
o(heme)i(often)f(ga)o(v)o(e)f(results)i(iden)o(tical)e(to)h(the)h(decision)f
(tree)h(sc)o(heme)0 1730 y(prop)q(osed)g(b)o(y)f([W)m(allace)f(and)h(P)o
(atric)o(k])f([24)o(].)19 b(In)14 b(these)i(cases,)f(the)g(decision)g(graph)f
(sc)o(heme)g(used)h(the)g(MML)f(metric)g(to)0 1780 y(determine)f(that)g(a)f
(decision)h(tree)h(w)o(as)f(more)f(appropriate)h(for)f(this)h(data)g(set)g
(than)g(a)g(decision)g(graph.)k(In)c(this)g(Section,)0 1829
y(w)o(e)h(describ)q(e)i(ho)o(w)d(this)h(determination)f(w)o(as)h(made.)62
1879 y(The)e(message)p 293 1879 13 2 v 15 w(length)f(function)g(describ)q(ed)
i(in)e([Oliv)o(er)g(and)g(W)m(allace])e([16)o(])i(has)g(a)g(parameter,)h
Fj(P)1607 1885 y Fc(J)1652 1879 y Fp(the)g(pr)n(ob)n(ability)g(of)0
1929 y(a)h(Join)p Fr(,)f(whic)o(h)g(describ)q(es)i(ho)o(w)e(disjunctiv)o(e)g
(a)f(decision)h(graph)g(is.)17 b Fj(P)1108 1935 y Fc(J)1143
1929 y Fr(e\013ects)d(the)f(message)p 1485 1929 V 14 w(length)f(of)g(a)f(giv)
o(en)h(decision)0 1979 y(graph.)27 b(If)17 b Fj(P)215 1985
y Fc(J)255 1979 y Fr(is)g(high)f(\(for)h(example,)f(0.50\))g(then)i(Joins)f
(cost)h(a)e(small)f(n)o(um)o(b)q(er)i(of)f(bits)h(\(2)g(bits)g(p)q(er)h
(binary)f(Join\).)0 2029 y(Ho)o(w)o(ev)o(er,)e(if)e Fj(P)245
2035 y Fc(J)283 2029 y Fr(is)h(lo)o(w)g(\(for)g(example,)f(0.10\))h(then)h(a)
f(Join)g(is)h(relativ)o(ely)f(exp)q(ensiv)o(e)h(\(4.6)f(bits)h(p)q(er)g
(binary)f(Join\),)g(and)0 2079 y(if)g Fj(P)66 2085 y Fc(J)116
2079 y Fr(=)28 b(0)15 b(then)g(the)h(cost)f(of)f(a)h(Join)f(is)h(in\014nite.)
20 b(Hence,)c(pro)q(cedure)32 b Fp(Gr)n(ow)15 b(Gr)n(aph)30
b Fr(will)13 b(gro)o(w)i(a)f(tree)i(if)e Fj(P)1807 2085 y Fc(J)1858
2079 y Fr(=)28 b(0,)0 2128 y(and)14 b(it)f(will)g(gro)o(w)g(graphs)h(with)g
(more)f(Joins)h(as)f Fj(P)818 2134 y Fc(J)855 2128 y Fr(is)h(increased.)p
741 2185 468 2 v 740 2234 2 50 v 780 2219 a Fj(P)807 2225 y
Fc(J)p 868 2234 V 893 2219 a Fr(Message)h(Length)p 1208 2234
V 741 2236 468 2 v 740 2286 2 50 v 768 2271 a(0.00)p 868 2286
V 108 w(84.50)d(bits)p 1208 2286 V 740 2336 V 768 2321 a(0.10)p
868 2336 V 108 w(76.26)g(bits)p 1208 2336 V 740 2385 V 768
2371 a(0.20)p 868 2385 V 108 w(47.04)g(bits)p 1208 2385 V 740
2435 V 768 2420 a(0.30)p 868 2435 V 108 w(47.63)g(bits)p 1208
2435 V 740 2485 V 768 2470 a(0.40)p 868 2485 V 108 w(49.50)g(bits)p
1208 2485 V 740 2535 V 768 2520 a(0.50)p 868 2535 V 108 w(52.68)g(bits)p
1208 2535 V 741 2537 468 2 v 410 2615 a(T)m(able)h(4:)18 b(1)596
2600 y Fc(st)640 2615 y Fr(Monks)c(Data)f(Set)i(|)e(Null)g(Explanation)g
(129.75)f(bits)62 2711 y(In)g(T)m(ables)e(4)h(and)g(5)g(w)o(e)h(v)n(ary)f
(the)g Fj(P)625 2717 y Fc(J)660 2711 y Fr(parameter)f(for)h(2)g(data)g(sets.)
19 b(W)m(e)11 b(select)h(that)f(v)n(alue)g(of)g Fj(P)1580 2717
y Fc(J)1614 2711 y Fr(that)g(minim)o(izes)e(the)0 2761 y(message)p
148 2761 13 2 v 15 w(length.)21 b(W)m(e)14 b(found)h(that)g(the)h(1)682
2746 y Fc(st)727 2761 y Fr(Monks)f(data)f(set)i(w)o(as)f(disjunctiv)o(e)g(in)
g(nature,)g(and)g(hence)h(decision)f(trees)0 2811 y(w)o(ere)h(inappropriate)f
(for)g(this)g(data)g(set.)23 b(The)15 b(decision)g(tree)i(made)d(an)h
(excellen)o(t)h(explanation)e(for)h(the)g(Hyp)q(oth)o(yroid)954
2936 y(11)p eop
%%Page: 12 12
bop 741 37 468 2 v 740 87 2 50 v 780 72 a Fj(P)807 78 y Fc(J)p
868 87 V 893 72 a Fr(Message)15 b(Length)p 1208 87 V 741 89
468 2 v 740 138 2 50 v 768 123 a(0.00)p 868 138 V 108 w(202.4)d(bits)p
1208 138 V 740 188 V 768 173 a(0.10)p 868 188 V 108 w(204.3)g(bits)p
1208 188 V 740 238 V 768 223 a(0.20)p 868 238 V 108 w(206.6)g(bits)p
1208 238 V 740 288 V 768 273 a(0.30)p 868 288 V 108 w(209.3)g(bits)p
1208 288 V 740 338 V 768 323 a(0.40)p 868 338 V 108 w(212.6)g(bits)p
1208 338 V 740 387 V 768 373 a(0.50)p 868 387 V 108 w(217.1)g(bits)p
1208 387 V 741 389 468 2 v 388 464 a(T)m(able)h(5:)18 b(Hyp)q(oth)o(yroid)13
b(Data)g(Set)i(|)e(Null)g(Explanation)g(1786.4)f(bits)0 596
y(data)i(set)g(\(sa)o(ving)g(1584)e(bits\),)i(whic)o(h)g(w)o(as)g(b)q(etter)h
(that)f(an)o(y)f(decision)i(graph)e(explanation)g(found.)0
734 y Fl(6)69 b(Conclusion)0 825 y Fr(The)16 b(MMLP)f(giv)o(es)g(us)g(a)g
(measure)g(to)g(compare)f(theories)i(with)f(distinct)g(structures,)j(and)d
(allo)o(ws)e(us)j(to)f(determine)g(if)0 874 y(one)f(theory)g(is)f(sup)q
(erior)i(to)e(another.)18 b(Within)13 b(the)h(scop)q(e)h(of)d(decision)i
(graphs)g(and)f(decision)h(trees,)h(using)e(a)g(minim)n(um)0
924 y(enco)q(ding)h(framew)o(ork:)62 1007 y Fi(\017)21 b Fr(allo)o(ws)c(us)i
(to)f(compare)f(mo)q(di\014cations)g(that)h(are)h(totally)e(di\013eren)o(t)i
(in)f(nature.)32 b(F)m(or)18 b(example,)g(if)g(w)o(e)g(ha)o(v)o(e)g(a)104
1057 y(decision)d(graph)f Fj(G)p Fr(,)g(and)g(w)o(e)h(p)q(ostulate)g(t)o(w)o
(o)f(mo)q(di\014cations)f(to)i Fj(G)p Fr(,)f(one)g(whic)o(h)h(splits)g(a)f
(no)q(de,)h(the)g(other)g(whic)o(h)104 1107 y(joins)c(t)o(w)o(o)g(no)q(des,)i
(then)g(w)o(e)f(can)g(sensibly)g(compare)f(these)i(mo)q(di\014cations)d(and)i
(sa)o(y)g(one)g(mo)q(di\014cation)d(is)j(sup)q(erior)104 1157
y(to)i(another.)62 1240 y Fi(\017)21 b Fr(pro)o(vides)15 b(a)f(theoretical)h
(guaran)o(tee.)20 b([Barron)15 b(and)f(Co)o(v)o(er])g([2])g(sho)o(w)g(that)h
(if)f(the)h(data)f(is)h(dra)o(wn)f(from)f(a)h(p)q(opu-)104
1290 y(lation)f(in)i(whic)o(h)g(the)g(probabilit)o(y)e(distribution)i(o)o(v)o
(er)g(classes)h(can)f(b)q(e)h(exactly)f(represen)o(ted)i(b)o(y)e(a)g
(decision)g(tree)104 1339 y(or)i(decision)g(graph)f(function)h(then,)h(giv)o
(en)e(su\016cien)o(t)i(data,)e(an)h(MML)g(tree)h(or)f(graph)g(inference)h
(algorithm)c(is)104 1389 y(guaran)o(teed)g(to)g(reco)o(v)o(er)h(that)f
(function.)62 1472 y(Represen)o(ting)20 b(the)f(theory)g(as)g(a)f(directed)i
(acyclic)e(graph)h(rather)g(than)g(a)f(tree)i(resulted)g(in)e(a)g(more)f
(expressiv)o(e)0 1522 y(language)j(for)g(theories.)39 b(The)21
b(additional)d(expressiv)o(eness)24 b(results)d(in)f(a)h(searc)o(h)g(through)
g(a)f(larger)h(searc)o(h)g(space,)0 1572 y(ho)o(w)o(ev)o(er,)14
b(the)g(b)q(ene\014ts)i(can)e(b)q(e)g(signi\014can)o(t.)62
1655 y Fi(\017)21 b Fr(Firstly)m(,)15 b(the)i(graph)f(formalism)c(describ)q
(es)18 b(a)e(large)g(set)h(of)e(disjunctiv)o(e)i(functions)f(more)f(simply)f
(than)i(the)h(tree)104 1705 y(formalism)o(.)22 b(Hence,)17
b(the)g(decision)f(graph)g(algorithm)e(will)g(in)i(general)g(infer)g
(functions)h(in)e(this)h(set)i(with)d(few)o(er)104 1755 y(data)e(than)h(w)o
(ould)f(b)q(e)i(required)g(b)o(y)e(a)h(decision)g(tree)h(algorithm.)62
1838 y Fi(\017)21 b Fr(Secondly)m(,)12 b(the)h(graph)f(formalism)c(can)k(use)
i(attributes)f(with)f(man)o(y)e(v)n(alues,)i(without)g(fragmen)o(ting)e(the)j
(data)f(in)o(to)104 1887 y(small)h(partitions.)21 b(The)16
b(resultan)o(t)g(graphs)f(form)f(subsets)j(of)d(attribute)i(v)n(alues)f(that)
g(b)q(e)h(of)f(in)o(terest)h(to)f(domain)104 1937 y(exp)q(erts.)62
2020 y Fi(\017)21 b Fr(Thirdly)m(,)13 b(the)i(applicabilit)o(y)e(of)h
(decision)h(graphs)g(for)f(a)h(particular)f(domain)f(can)i(b)q(e)g
(determined.)20 b(This)15 b(is)g(done)104 2070 y(b)o(y)h(comparing)f(the)i
(message)g(lengths)f(of)g(the)i(b)q(est)f(decision)g(graph)g(with)f(that)h
(of)f(the)h(b)q(est)h(decision)e(tree)i(for)104 2120 y(that)c(domain.)0
2257 y Fl(7)69 b(Ac)n(kno)n(wledgmen)n(ts)0 2348 y Fr(I)15
b(w)o(ould)g(lik)o(e)f(to)h(thank)g(m)o(y)f(sup)q(ervisor)i(Ingrid)f(Zuk)o
(erman)g(for)g(v)n(aluable)f(advice,)h(Chris)g(W)m(allace,)f(Da)o(vid)g(Do)o
(w)o(e)h(and)0 2398 y(W)m(ra)o(y)e(Bun)o(tine)h(for)g(v)n(aluable)e
(discussions,)j(and)e(Phil)h(Chou)f(for)h(critical)f(reading)h(of)f(the)i
(man)o(uscript.)0 2529 y Fl(References)19 2612 y Fn([1])20
b(L.R.)c(Bahl,)i(P)m(.F.)e(Bro)o(wn,)h(P)m(.V.)e(deSouza,)j(and)f(R.L.)f
(Mercer.)27 b(A)16 b(tree-based)i(statistical)g(language)h(mo)q(del)e(for)f
(natural)80 2657 y(language)j(sp)q(eec)o(h)f(recognition.)31
b Fm(IEEE)17 b(T)m(r)n(ansactions)d(on)j(A)n(c)n(oustics,)e(Sp)n(e)n(e)n(ch,)
g(and)h(Signal)g(Pr)n(o)n(c)n(essing)p Fn(,)e(37:1001{1008,)80
2703 y(1989.)19 2765 y([2])20 b(A.R.)c(Barron)i(and)f(T.M.)f(Co)o(v)o(er.)27
b(Minim)o(um)19 b(complexit)o(y)g(densit)o(y)f(estimation.)29
b Fm(IEEE)17 b(T)m(r)n(ansactions)d(on)i(Information)80 2811
y(The)n(ory)p Fn(,)c(37:1034{1054,)i(1991.)954 2936 y Fr(12)p
eop
%%Page: 13 13
bop 19 77 a Fn([3])20 b(L.)d(Breiman,)i(J.H.)c(F)m(riedman,)k(R.A.)d(Olshen,)
j(and)f(C.J.)d(Stone.)29 b Fm(Classi\014c)n(ation)14 b(and)i(R)n(e)n(gr)n
(ession)f(T)m(r)n(e)n(es)p Fn(.)28 b(W)m(adsw)o(orth,)80 123
y(Belmon)o(t,)14 b(1984.)19 185 y([4])20 b(G.J.)12 b(Chaitin.)19
b(On)13 b(the)g(length)i(of)d(programs)i(for)f(computing)i(\014nite)f
(sequences.)k Fm(J.A.C.M.)p Fn(,)12 b(13:547{549,)i(1966.)19
247 y([5])20 b(P)m(.A.)15 b(Chou.)24 b Fm(Applic)n(atio)o(ns)12
b(of)k(Information)d(The)n(ory)i(to)g(Pattern)f(R)n(e)n(c)n(o)n(gnition)f
(and)h(the)h(Design)f(of)h(De)n(cision)f(T)m(r)n(e)n(es)h(and)80
293 y(T)m(r)n(el)r(lises)p Fn(.)h(PhD)d(thesis,)h(Departmen)o(t)g(of)f
(Electrical)i(Engineering,)h(Stanford)e(Univ)o(ersit)o(y)m(,)g(June)f(1988.)
19 355 y([6])20 b(P)m(.A.)12 b(Chou.)k(Optimal)e(partitioning)i(for)c
(classi\014cation)j(and)e(regression)i(trees.)h Fm(IEEE)c(T)m(r)n(ansactions)
f(on)h(Pattern)g(A)o(nalysis)80 401 y(and)h(Machine)f(Intel)r(ligenc)m(e)p
Fn(,)e(13\(4\),)j(1991.)19 463 y([7])20 b(P)m(.A.)12 b(Chou.)18
b Fm(Personal)11 b(Communic)n(ation)p Fn(.)k(1992.)19 525 y([8])20
b(D.L.)c(Do)o(w)o(e,)h(J.J.)e(Oliv)o(er,)i(L.)f(Allison,)j(C.S.)c(W)m
(allace,)k(and)e(T.I.)e(Dix.)27 b(A)16 b(decision)i(graph)f(explanation)i(of)
d(protein)i(sec-)80 571 y(ondary)12 b(structure)e(prediction.)k(In)c
Fm(Pr)n(o)n(c)n(e)n(e)n(dings)e(of)i(the)g(Hawaii)g(Internationa)o(l)e
(Confer)n(enc)n(e)g(on)i(System)g(Scienc)n(es)e(\(HICSS\),)80
617 y(Biote)n(chnolo)n(gy)i(Computing)i(T)m(r)n(ack)h(\(to)g(app)n(e)n(ar\))p
Fn(,)e(1993.)19 679 y([9])20 b(U.M.)c(F)m(a)o(yy)o(ad)h(and)g(K.B.)f(Irani.)
28 b(The)16 b(attribute)i(selection)g(problem)g(in)f(decision)i(tree)d
(generation.)29 b(In)17 b Fm(Pr)n(o)n(c)n(e)n(e)n(dings)d(of)80
725 y(AAAI-92)p Fn(,)c(pages)k(104{110,)g(1992.)0 787 y([10])20
b(M.P)m(.)13 b(George\013)g(and)h(C.S.)e(W)m(allace.)18 b(A)13
b(general)h(criterion)h(for)d(inductiv)o(e)k(inference.)h(In)c
Fm(Pr)n(o)n(c)n(e)n(e)n(dings)e(of)i(the)g(6th)f(Eur)n(op)n(e)n(an)80
832 y(Confer)n(enc)n(e)g(on)h(A)o(rti\014cial)e(Intel)r(ligenc)n(e)o
Fn(,)f(1984.)0 895 y([11])20 b(I.)10 b(Kononenk)o(o,)h(I.)f(Bratk)o(o,)g(and)
h(E.)e(Rosk)n(ar.)k(Exp)q(erimen)o(ts)f(in)e(automatic)h(learning)i(of)c
(medical)j(diagnostic)g(rules.)h(T)m(ec)o(hnical)80 940 y(rep)q(ort,)h(Jozef)
e(Stefan)i(Institute,)f(Ljubljana,)h(Y)m(ugosla)o(via,)h(1984.)0
1003 y([12])20 b(J.J.)12 b(Mahoney)i(and)g(R.J.)e(Mo)q(oney)m(.)18
b(Initializin)q(g)d(id5r)f(with)g(a)f(domain)h(theory:)k(Some)13
b(negativ)o(e)h(results.)k(91-154,)13 b(Depart-)80 1048 y(men)o(t)i(of)f
(Computer)h(Science,)h(Univ)o(ersit)o(y)h(of)d(T)m(exas)h(at)f(Austin,)i(T)m
(a)o(ylor)f(Hall)g(2.124,)g(Austin,)h(T)m(exas)e(78712-1188,)i(USA,)80
1094 y(Marc)o(h)e(1991.)0 1156 y([13])20 b(C.J.)12 b(Math)o(ues)i(and)g(L.A.)
e(Rendell.)19 b(Constructiv)o(e)14 b(induction)i(on)d(decision)i(trees.)i(In)
c Fm(IJCAI-89)p Fn(,)e(pages)j(645{650,)g(1989.)0 1219 y([14])20
b(J.J.)15 b(Oliv)o(er.)26 b(Decision)19 b(graphs)d(-)g(an)g(extension)i(of)d
(decision)j(trees.)26 b(In)15 b Fm(Pr)n(o)n(c)n(e)n(e)n(dings)f(of)i(the)f(A)
o(rti\014cial)f(Intel)r(ligenc)m(e)f(and)80 1264 y(Statistics)f(Confer)n(enc)
n(e)g(\(to)h(app)n(e)n(ar\))p Fn(,)f(1993.)i(More)g(extensiv)o(e)h(v)o
(ersion)h(a)o(v)n(ailable)g(as)e(TR)g(173)g(Computer)g(Science)h(Depart-)80
1310 y(men)o(t,)e(Monash)h(Univ)o(ersit)o(y)m(,)h(Vic)e(3168,)g(A)o
(USTRALIA.)0 1372 y([15])20 b(J.J.)10 b(Oliv)o(er,)i(D.L.)e(Do)o(w)o(e,)h
(and)g(C.S.)f(W)m(allace.)16 b(Inferring)11 b(decision)i(graphs)f(using)g
(the)f(minim)o(um)i(message)e(length)h(principle.)80 1418 y(In)e(A.)e(Adams)i
(and)g(L.)f(Sterling,)i(editors,)g Fm(Pr)n(o)n(c)n(e)n(e)n(dings)d(of)h(the)h
(5th)f(A)o(ustr)n(alian)e(Joint)j(Confer)n(enc)n(e)e(on)h(A)o(rti\014cial)f
(Intel)r(ligenc)n(e)o Fn(,)80 1463 y(pages)14 b(361{367.)g(W)m(orld)g(Scien)o
(ti\014c,)h(Singap)q(ore,)g(1992.)0 1526 y([16])20 b(J.J.)8
b(Oliv)o(er)j(and)f(C.S.)e(W)m(allace.)13 b(Inferring)d(decision)h(graphs.)h
(In)d Fm(Pr)n(o)n(c)n(e)n(e)n(dings)f(of)h(Workshop)g(8)h(|)g(Evaluating)d
(and)i(Changing)80 1571 y(R)n(epr)n(esentation)i(in)i(Machine)f(L)n(e)n
(arning)g(IJCAI-91)p Fn(,)g(1991.)h(Also)h(a)o(v)n(ailable)i(as)e(TR)f(170)h
(Computer)f(Science)i(Departmen)o(t,)80 1617 y(Monash)g(Univ)o(ersit)o(y)m(,)
f(Vic)f(3168,)h(A)o(USTRALIA.)0 1679 y([17])20 b(G.)13 b(P)o(agallo)i(and)f
(D.)f(Haussler.)18 b(Bo)q(olean)c(feature)f(disco)o(v)o(ery)i(in)f(empirical)
h(learning.)20 b Fm(Machine)12 b(L)n(e)n(arning)p Fn(,)e(5:71{99,)j(1990.)0
1742 y([18])20 b(J.R.)13 b(Quinlan.)19 b(Induction)c(of)d(decision)k(trees.)g
Fm(Machine)c(L)n(e)n(arning)p Fn(,)f(1:81{106,)i(1986.)0 1804
y([19])20 b(J.R.)13 b(Quinlan.)19 b(Simplifying)d(decision)g(trees.)h
Fm(Internation)o(al)10 b(Journal)j(of)g(Man)g(Machine)f(Studies)p
Fn(,)e(pages)k(221{234,)g(1987.)0 1866 y([20])20 b(J.R.)14
b(Quinlan)j(and)e(R.L.)f(Riv)o(est.)23 b(Inferring)15 b(decision)i(trees)e
(using)h(the)f(minim)o(um)h(description)h(length)f(principle.)24
b Fm(Infor-)80 1912 y(mation)13 b(and)f(Computation)p Fn(,)e(80:227{248,)k
(1989.)0 1974 y([21])20 b(J.)13 b(Rissanen.)18 b(A)13 b(univ)o(ersal)i(prior)
f(for)e(in)o(tegers)j(and)e(estimation)i(b)o(y)e(minim)o(um)i(description)g
(length.)j Fm(A)o(nnals)11 b(of)i(Statistics)p Fn(,)80 2020
y(11:416{431,)h(1983.)0 2082 y([22])20 b(S.B.)14 b(Thrun)h(et)f(al.)22
b(The)14 b(monk's)h(problems:)21 b(A)14 b(p)q(erformance)h(comparison)i(of)d
(di\013eren)o(t)i(learning)g(algorithms.)23 b(Cm)o(u-cs-)80
2128 y(91-197,)14 b(Carnegie)g(Mellon)h(Univ)o(ersit)o(y)m(,)f(Decem)o(b)q
(er)g(1991.)0 2190 y([23])20 b(C.S.)10 b(W)m(allace)j(and)e(D.M.)f(Boulton.)k
(An)d(information)h(measure)g(for)e(classi\014cation.)16 b
Fm(Computer)11 b(Journal)p Fn(,)e(11:185{194,)j(1968.)0 2252
y([24])20 b(C.S.)14 b(W)m(allace)i(and)e(J.D.)f(P)o(atric)o(k.)21
b(Co)q(ding)16 b(decision)g(trees.)k Fm(T)m(o)14 b(app)n(e)n(ar)f(in)h
(Machine)f(L)n(e)n(arning)p Fn(,)f(1993.)i(Also)h(a)o(v)n(ailable)i(as)80
2298 y(TR)c(153)h(Computer)f(Science)i(Departmen)o(t,)e(Monash)h(Univ)o
(ersit)o(y)m(,)h(Vic)e(3168,)g(A)o(USTRALIA.)954 2936 y Fr(13)p
eop
%%Trailer
end
userdict /end-hook known{end-hook}if
%%EOF
